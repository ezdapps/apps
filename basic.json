{
    "name": "Basic",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "apps_description",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(Class: container){\r\n    Div(Class: pt-xl)\r\n    Div(Class: row){\r\n        Div(Class: col-md-4 text-center){\r\n            Em(Class: icon-people fa-4x text-primary)\r\n            Div(Class: text-bold text-primary h3){\r\n                 LangRes(@1ecosystem_members)\r\n            }\r\n            Div(Class: text-bold h4) {\r\n                LangRes(@1ecosystems_members_description)\r\n            }\r\n        }\r\n        Div(Class: col-md-4 text-center){\r\n            Em(Class: icon-pie-chart fa-4x text-primary)\r\n            Div(Class: text-bold text-primary h3){\r\n                LangRes(@1roles)\r\n            }\r\n            Div(Class: text-bold h4) {\r\n                LangRes(@1roles_description)\r\n            }\r\n        }\r\n        Div(Class: col-md-4 text-center){\r\n            Em(Class: icon-note fa-4x text-primary)\r\n            Div(Class: text-bold text-primary h3){\r\n                LangRes(@1votings)\r\n            }\r\n            Div(Class: text-bold h4) {\r\n                LangRes(@1votings_description)\r\n            }\r\n        }\r\n    }\r\n    Div(Class: pt-xl)\r\n    Div(Class: row){\r\n        Div(Class: col-md-4 text-center){\r\n            Em(Class: icon-layers fa-4x text-primary)\r\n            Div(Class: text-bold text-primary h3){\r\n                LangRes(@1catalog_ecosystems)\r\n            }\r\n            Div(Class: text-bold h4) {\r\n                LangRes(@1ecosystems_description)\r\n            }\r\n        }\r\n        Div(Class: col-md-4 text-center){\r\n            Em(Class: icon-flag fa-4x text-primary)\r\n            Div(Class: text-bold text-primary h3){\r\n                LangRes(@1notifications)\r\n            }\r\n            Div(Class: text-bold h4) {\r\n                LangRes(@1notifications_description)\r\n            }\r\n        }\r\n        Div(Class: col-md-4 text-center){\r\n            Em(Class: icon-settings fa-4x text-primary)\r\n            Div(Class: text-bold text-primary h3){\r\n                LangRes(@1platform_parameters) \r\n            }\r\n            Div(Class: text-bold h4) {\r\n                LangRes(@1parameters_description)\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Type": "blocks"
        },
        {
            "Name": "notifications_roles",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1notifications_list).(this_table, @1notifications)\r\nInclude(@1pager_header)\r\n\r\nIf(#role_id#>0){\r\n    DBFind(\"@1roles\").Where({\"id\": \"#role_id#\"}).Vars(my)\r\n    SetTitle($@1role_notifics$ (#my_role_name#))\r\n}.Else{\r\n    SetTitle($@1role_notifics$)\r\n}\r\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(system_app)\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# == 1)){\r\n    DBFind(\"@1ecosystems\").Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $@1broadcast$, Page: @1notifications_broadcast, Icon: icon-plus).Popup(Header: $@1notifications_broadcast$, Width: \"50\")\r\n    }\r\n}\r\nAddToolButton(Title: $@1send$, Page: @1notifications_roles_send, Icon: icon-plus).Popup(Header: $@1send$, Width: \"50\")\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"recipient->role_id\": \"#role_id#\", \"$and\": [{\"notification->type\": 2}, {\"$or\": [{\"sender->member_name\": {\"$ilike\": \"#search#\"}}, {\"sender->role_name\": {\"$ilike\": \"#search#\"}}]}]})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"notification->type\": 2, \"recipient->role_id\": \"#role_id#\"})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1sender)).(page_par, #type#)\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"closed\": 1, \"id\": \"-1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->account,sender->member_name,sender->role_id,sender->role_name,notification->icon,notification->popup,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\r\n    If(#closed# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #recipient.role_name#\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_arrow){\r\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\r\n}.Custom(_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#sender.account#\"){#sender.member_name#}\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\r\n    }\r\n}.Custom(_icon){\r\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(_page){\r\n    If(#notification.popup#==1){\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n    }.Else{\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# h6 m0){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    If(#date_closed# != 0){\r\n        Div(#style_text# h6 m0){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    }\r\n}.Custom(_processing){\r\n    Div(Class: #style_text# h6 m0){\r\n        If(#date_start_processing# == 0){\r\n           $@1not_started$\r\n        }.Else{\r\n            Span(LangRes(@1started_by) #processing_info.member_name#)\r\n            Div(){DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#){\r\n            If(#date_start_processing# == 0){\r\n                LangRes(@1active)\r\n            }.Else{\r\n                LangRes(@1processing)\r\n            }\r\n        }\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(@1closed))\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(#closed# == 0){\r\n            If(#date_start_processing# == NULL){\r\n                Button(Class: btn btn-default fa fa-play, Contract: @1NotificationsProcess, Params: \"NotificId=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.Else{\r\n                Button(Class: btn btn-default fa fa-trash, Contract: @1NotificationsClose, Params: \"NotificId=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton:$@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1icon$=_icon,$@1page$=_page,$@1sender$=_sender,=custom_arrow,$@1recipient$=_recipient,$@1processing$=_processing,$@1sent$ / $@1closed$=_date,$@1status$=_status,=_actions\")\r\n            }.ElseIf(#role_id#>0){\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1role_notifics$ $@1not_founded$\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1role_not_selected$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_single",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1notifications_list).(this_table, @1notifications)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1personal_notifics$\")\r\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(system_app)\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# == 1)){\r\n    DBFind(\"@1ecosystems\").Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $@1broadcast$, Page: @1notifications_broadcast, Icon: icon-plus).Popup(Header: $@1notifications_broadcast$, Width: \"50\")\r\n    }\r\n}\r\nAddToolButton(Title: $@1send$, Page: @1notifications_single_send, Icon: icon-plus).Popup(Header: $@1send$, Width: \"50\")\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"recipient->account\": \"#account_id#\", \"$and\": [{\"notification->type\": 1}, {\"$or\": [{\"sender->member_name\": {\"$ilike\": \"#search#\"}}, {\"sender->role_name\": {\"$ilike\": \"#search#\"}}]}]})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"notification->type\": 1, \"recipient->account\": \"#account_id#\"})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1sender)).(page_par, #type#)\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"closed\": 1, \"id\": \"-1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,recipient->account,recipient->member_name,recipient->image_id,sender->type,sender->account,sender->member_name,sender->role_id,sender->role_name,notification->icon,notification->popup,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n    If(#closed# == 0){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n    }.Else{\r\n        SetVar(Name: style_text, Value: \"text-muted\")\r\n        SetVar(Name: style_link, Value: \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(custom_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#recipient.account#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#recipient.member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_arrow){\r\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\r\n}.Custom(custom_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#sender.account#\"){\r\n            Span(Body: #sender.member_name#)\r\n        }\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n            Span(Body: #sender.role_name#)\r\n        }\r\n    }\r\n}.Custom(custom_icon){\r\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(custom_page){\r\n    If(#notification.popup#==1){\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n    }.Else{\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }\r\n    }\r\n}.Custom(custom_date){\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    If(#date_closed# != 0){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }\r\n}.Custom(custom_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#, Body: LangRes(@1active))\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(@1closed))\r\n    }\r\n}.Custom(actions){\r\n    Div(pull-right){\r\n        If(#closed# == 0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"NotificId=#id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1icon$=custom_icon,$@1page$=custom_page,$@1sender$=custom_sender,=custom_arrow,$@1recipient$=custom_recipient,$@1sent$ / $@1closed$=custom_date,$@1status$=custom_status,=actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1personal_notifics$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "profile",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#v_account# == \"\"){\r\n    SetVar(v_account, #account_id#)\r\n}\r\nDBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#v_account#\"}).Columns(\"account,image_id,member_name,member_info->information\").Vars(member)\r\n\r\nIf(#member_account#){\r\n    SetVar(member_name, #member_member_name#).(member_info, #member_member_info_information#)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(@1user_info)\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(col-md-12 text-center){\r\n                            If(#member_account#){\r\n                                If(#member_account# == #account_id#){\r\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\r\n                                        If(#member_image_id# > 0){\r\n                                            Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-5x text-primary)\r\n                                        }\r\n                                        Div(m0 h4 text-bold){\r\n                                            #member_name#\r\n                                            If(#role_id# > 0){\r\n                                                DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_id#\"}).Columns(\"role_name\").Vars(role)\r\n                                                Span(Body: \" (#role_role_name#)\")\r\n                                            }\r\n                                        }\r\n                                    }.Popup(Header: $@1edit_profile$, Width: 50)\r\n                                }.Else{\r\n                                    If(#member_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#member_name#}\r\n                                }\r\n                                Div(Class: h5 text-muted m0, Body: #member_info#)\r\n                            }.Else{\r\n                                If(#v_account# == #account_id#){\r\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\r\n                                        Div(Class: h4 m0, Body: LangRes(@1edit_profile))\r\n                                    }.Popup(Header: $@1edit_profile$, Width: 50)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(col-md-12 text-center){\r\n                            Div(text-bold m0 h5, Body: LangRes(@1wallet_address))\r\n                            Span(Class: h5, Body: #v_account#)\r\n                        }\r\n                    }\r\n                    If(#v_account# == #account_id#){\r\n                        Div(row){\r\n                            Div(col-md-12 mt text-center){\r\n                                DBFind(\"@1keys\").Where({\"ecosystem\": 1, \"account\": \"#v_account#\", \"deleted\": 0}).Vars(apl)\r\n                                If(#ecosystem_id# > 1){\r\n                                    DBFind(\"@1keys\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#v_account#\", \"deleted\": 0}).Vars(tokens)\r\n                                    DBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem_id#\"}).Vars(custom)\r\n                                }\r\n                                Div(text-bold m0 h5, Body: LangRes(@1balance))\r\n                                Div(Class: m0 h5, Body: Money(#apl_amount#) APLA)\r\n                                If(And(#ecosystem_id# > 1, #custom_token_title# != \"\")){\r\n                                    Div(Class: m0 h5, Body: Money(#tokens_amount#) #custom_token_title#)\r\n                                }\r\n                                If(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n                                    Button(Class: btn-xs btn-link, Page: @1profile_transactions, Body: LangRes(@1transactions_history))\r\n                                    Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"back_page=@1profile_view\", Body: LangRes(@1tokens_send)).Popup(Header: $@1tokens_send$, Width: \"50\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-12 mt text-center){\r\n                                Div(text-bold h5 m0, Body: LangRes(@1deposit))\r\n                                Div(Class: h5 m0, Body: Money(#apl_deposit#) APLA)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center mt-lg){\r\n                        Div(text-bold m0 h5, Body: LangRes(@1roles))\r\n                        DBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"member->account\": \"#v_account#\", \"deleted\": 0}).Columns(\"id\").Vars(check)\r\n                        If(#check_id# > 0){\r\n                            DBFind(\"@1roles_participants\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"member->account\": \"#v_account#\", \"deleted\": 0}).Columns(\"role->id,role->name\").Order(\"id\")\r\n                            ForList(src_roles){\r\n                                Span(){\r\n                                    LinkPage(Class: h6 m0 text-primary, Page: @1roles_view, PageParams: \"v_role_id=#role.id#\", Body: \"#role.name#\")\r\n                                }.Style(margin-right: 5px; margin-left: 5px;)\r\n                            }\r\n                        }.Else{\r\n                            Span(LangRes(@1role_none))\r\n                        }\r\n                        If(#v_account# == #account_id#){\r\n                            SetVar(founder_account, Address(EcosysParam(\"founder_account\")))\r\n                            If(#founder_account# != #account_id#){\r\n                                Div(row){\r\n                                    Div(col-md-12 text-center){\r\n                                        Button(Class: btn-xs btn-link, Page: @1roles_request, Body: LangRes(@1request)).Popup(Header: $@1request_to_role$, Width: \"50\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "voting_charts",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(row){\r\n    If(#instance_voting_count_type_voters# == 1){\r\n        Div(col-md-2)\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1voted$)\r\n            SetVar(p1, Calculate(Exp:#instance_progress_number_voters#*100/#instance_progress_number_participants#, Type:int, Prec:0))\r\n            Div(Class: c100 center p#p1# orange){\r\n                Span(Body:#instance_progress_number_voters# / #instance_progress_number_participants#)\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-4){\r\n            If(Or(#type_decision#==3,#type_decision#==4)){\r\n                Div(Class: text-center t4, Body: $@1result$)\r\n                If(#subject_results_percent_accepted# == \"\"){\r\n                    SetVar(subject_results_percent_accepted,0)\r\n                }\r\n                SetVar(p1, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:0))\r\n                SetVar(p2, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:2))\r\n                Div(Class: c100 center p#p1# green){\r\n                    Span(Body: #p2#%)\r\n                    Div(Class: slice){\r\n                        Div(Class: bar)\r\n                        Div(Class: fill)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1progress$)\r\n            Div(Class: c100 center p#instance_progress_percent_success# orange){\r\n                Span(Body: #instance_progress_percent_success#%)\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2)\r\n    }.Else{\r\n        Div(col-md-2)\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1voted$)\r\n            Div(Class: c100 center p#instance_progress_percent_voters# orange){\r\n                Span(Body:#instance_progress_percent_voters#% (#instance_progress_number_voters#))\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-4){\r\n            If(Or(#type_decision#==3,#type_decision#==4)){\r\n                Div(Class: text-center t4, Body: $@1result$)\r\n                If(#subject_results_percent_accepted# == \"\"){\r\n                    SetVar(subject_results_percent_accepted,0)\r\n                }\r\n                SetVar(p1, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:0))\r\n                SetVar(p2, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:2))\r\n                Div(Class: c100 center p#p1# green){\r\n                    Span(Body: #p2#%)\r\n                    Div(Class: slice){\r\n                        Div(Class: bar)\r\n                        Div(Class: fill)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1progress$)\r\n            Div(Class: c100 center p#instance_progress_percent_success# orange){\r\n                Span(Body: #instance_progress_percent_success#%)\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2)\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n    .rect-auto,\r\n    .c100.p51 .slice,\r\n    .c100.p52 .slice,\r\n    .c100.p53 .slice,\r\n    .c100.p54 .slice,\r\n    .c100.p55 .slice,\r\n    .c100.p56 .slice,\r\n    .c100.p57 .slice,\r\n    .c100.p58 .slice,\r\n    .c100.p59 .slice,\r\n    .c100.p60 .slice,\r\n    .c100.p61 .slice,\r\n    .c100.p62 .slice,\r\n    .c100.p63 .slice,\r\n    .c100.p64 .slice,\r\n    .c100.p65 .slice,\r\n    .c100.p66 .slice,\r\n    .c100.p67 .slice,\r\n    .c100.p68 .slice,\r\n    .c100.p69 .slice,\r\n    .c100.p70 .slice,\r\n    .c100.p71 .slice,\r\n    .c100.p72 .slice,\r\n    .c100.p73 .slice,\r\n    .c100.p74 .slice,\r\n    .c100.p75 .slice,\r\n    .c100.p76 .slice,\r\n    .c100.p77 .slice,\r\n    .c100.p78 .slice,\r\n    .c100.p79 .slice,\r\n    .c100.p80 .slice,\r\n    .c100.p81 .slice,\r\n    .c100.p82 .slice,\r\n    .c100.p83 .slice,\r\n    .c100.p84 .slice,\r\n    .c100.p85 .slice,\r\n    .c100.p86 .slice,\r\n    .c100.p87 .slice,\r\n    .c100.p88 .slice,\r\n    .c100.p89 .slice,\r\n    .c100.p90 .slice,\r\n    .c100.p91 .slice,\r\n    .c100.p92 .slice,\r\n    .c100.p93 .slice,\r\n    .c100.p94 .slice,\r\n    .c100.p95 .slice,\r\n    .c100.p96 .slice,\r\n    .c100.p97 .slice,\r\n    .c100.p98 .slice,\r\n    .c100.p99 .slice,\r\n    .c100.p100 .slice {\r\n    clip: rect(auto, auto, auto, auto);\r\n    }\r\n    .pie,\r\n    .c100 .bar,\r\n    .c100.p51 .fill,\r\n    .c100.p52 .fill,\r\n    .c100.p53 .fill,\r\n    .c100.p54 .fill,\r\n    .c100.p55 .fill,\r\n    .c100.p56 .fill,\r\n    .c100.p57 .fill,\r\n    .c100.p58 .fill,\r\n    .c100.p59 .fill,\r\n    .c100.p60 .fill,\r\n    .c100.p61 .fill,\r\n    .c100.p62 .fill,\r\n    .c100.p63 .fill,\r\n    .c100.p64 .fill,\r\n    .c100.p65 .fill,\r\n    .c100.p66 .fill,\r\n    .c100.p67 .fill,\r\n    .c100.p68 .fill,\r\n    .c100.p69 .fill,\r\n    .c100.p70 .fill,\r\n    .c100.p71 .fill,\r\n    .c100.p72 .fill,\r\n    .c100.p73 .fill,\r\n    .c100.p74 .fill,\r\n    .c100.p75 .fill,\r\n    .c100.p76 .fill,\r\n    .c100.p77 .fill,\r\n    .c100.p78 .fill,\r\n    .c100.p79 .fill,\r\n    .c100.p80 .fill,\r\n    .c100.p81 .fill,\r\n    .c100.p82 .fill,\r\n    .c100.p83 .fill,\r\n    .c100.p84 .fill,\r\n    .c100.p85 .fill,\r\n    .c100.p86 .fill,\r\n    .c100.p87 .fill,\r\n    .c100.p88 .fill,\r\n    .c100.p89 .fill,\r\n    .c100.p90 .fill,\r\n    .c100.p91 .fill,\r\n    .c100.p92 .fill,\r\n    .c100.p93 .fill,\r\n    .c100.p94 .fill,\r\n    .c100.p95 .fill,\r\n    .c100.p96 .fill,\r\n    .c100.p97 .fill,\r\n    .c100.p98 .fill,\r\n    .c100.p99 .fill,\r\n    .c100.p100 .fill {\r\n        position: absolute;\r\n        border: 0.08em solid #307bbb;\r\n        width: 0.84em;\r\n        height: 0.84em;\r\n        clip: rect(0em, 0.5em, 1em, 0em);\r\n        border-radius: 50%;\r\n        -webkit-transform: rotate(0deg);\r\n        -moz-transform: rotate(0deg);\r\n        -ms-transform: rotate(0deg);\r\n        -o-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    .pie-fill,\r\n    .c100.p51 .bar:after,\r\n    .c100.p51 .fill,\r\n    .c100.p52 .bar:after,\r\n    .c100.p52 .fill,\r\n    .c100.p53 .bar:after,\r\n    .c100.p53 .fill,\r\n    .c100.p54 .bar:after,\r\n    .c100.p54 .fill,\r\n    .c100.p55 .bar:after,\r\n    .c100.p55 .fill,\r\n    .c100.p56 .bar:after,\r\n    .c100.p56 .fill,\r\n    .c100.p57 .bar:after,\r\n    .c100.p57 .fill,\r\n    .c100.p58 .bar:after,\r\n    .c100.p58 .fill,\r\n    .c100.p59 .bar:after,\r\n    .c100.p59 .fill,\r\n    .c100.p60 .bar:after,\r\n    .c100.p60 .fill,\r\n    .c100.p61 .bar:after,\r\n    .c100.p61 .fill,\r\n    .c100.p62 .bar:after,\r\n    .c100.p62 .fill,\r\n    .c100.p63 .bar:after,\r\n    .c100.p63 .fill,\r\n    .c100.p64 .bar:after,\r\n    .c100.p64 .fill,\r\n    .c100.p65 .bar:after,\r\n    .c100.p65 .fill,\r\n    .c100.p66 .bar:after,\r\n    .c100.p66 .fill,\r\n    .c100.p67 .bar:after,\r\n    .c100.p67 .fill,\r\n    .c100.p68 .bar:after,\r\n    .c100.p68 .fill,\r\n    .c100.p69 .bar:after,\r\n    .c100.p69 .fill,\r\n    .c100.p70 .bar:after,\r\n    .c100.p70 .fill,\r\n    .c100.p71 .bar:after,\r\n    .c100.p71 .fill,\r\n    .c100.p72 .bar:after,\r\n    .c100.p72 .fill,\r\n    .c100.p73 .bar:after,\r\n    .c100.p73 .fill,\r\n    .c100.p74 .bar:after,\r\n    .c100.p74 .fill,\r\n    .c100.p75 .bar:after,\r\n    .c100.p75 .fill,\r\n    .c100.p76 .bar:after,\r\n    .c100.p76 .fill,\r\n    .c100.p77 .bar:after,\r\n    .c100.p77 .fill,\r\n    .c100.p78 .bar:after,\r\n    .c100.p78 .fill,\r\n    .c100.p79 .bar:after,\r\n    .c100.p79 .fill,\r\n    .c100.p80 .bar:after,\r\n    .c100.p80 .fill,\r\n    .c100.p81 .bar:after,\r\n    .c100.p81 .fill,\r\n    .c100.p82 .bar:after,\r\n    .c100.p82 .fill,\r\n    .c100.p83 .bar:after,\r\n    .c100.p83 .fill,\r\n    .c100.p84 .bar:after,\r\n    .c100.p84 .fill,\r\n    .c100.p85 .bar:after,\r\n    .c100.p85 .fill,\r\n    .c100.p86 .bar:after,\r\n    .c100.p86 .fill,\r\n    .c100.p87 .bar:after,\r\n    .c100.p87 .fill,\r\n    .c100.p88 .bar:after,\r\n    .c100.p88 .fill,\r\n    .c100.p89 .bar:after,\r\n    .c100.p89 .fill,\r\n    .c100.p90 .bar:after,\r\n    .c100.p90 .fill,\r\n    .c100.p91 .bar:after,\r\n    .c100.p91 .fill,\r\n    .c100.p92 .bar:after,\r\n    .c100.p92 .fill,\r\n    .c100.p93 .bar:after,\r\n    .c100.p93 .fill,\r\n    .c100.p94 .bar:after,\r\n    .c100.p94 .fill,\r\n    .c100.p95 .bar:after,\r\n    .c100.p95 .fill,\r\n    .c100.p96 .bar:after,\r\n    .c100.p96 .fill,\r\n    .c100.p97 .bar:after,\r\n    .c100.p97 .fill,\r\n    .c100.p98 .bar:after,\r\n    .c100.p98 .fill,\r\n    .c100.p99 .bar:after,\r\n    .c100.p99 .fill,\r\n    .c100.p100 .bar:after,\r\n    .c100.p100 .fill {\r\n    -webkit-transform: rotate(180deg);\r\n    -moz-transform: rotate(180deg);\r\n    -ms-transform: rotate(180deg);\r\n    -o-transform: rotate(180deg);\r\n    transform: rotate(180deg);\r\n    }\r\n    .c100 {\r\n        position: relative;\r\n        font-size: 100px;\r\n        width: 1em;\r\n        height: 1em;\r\n        border-radius: 50%;\r\n        float: left;\r\n        margin: 0 0.1em 0.1em 0;\r\n        background-color: #cccccc;\r\n    }\r\n    .c100 *,\r\n    .c100 *:before,\r\n    .c100 *:after {\r\n        -webkit-box-sizing: content-box;\r\n        -moz-box-sizing: content-box;\r\n        box-sizing: content-box;\r\n    }\r\n    .c100.center {\r\n        float: none;\r\n        margin: 0 auto;\r\n    }\r\n    .c100.big {\r\n        font-size: 240px;\r\n    }\r\n    .c100.small {\r\n        font-size: 80px;\r\n    }\r\n    .c100 > span {\r\n        position: absolute;\r\n        width: 100%;\r\n        z-index: 1;\r\n        left: 0;\r\n        top: 0;\r\n        width: 5em;\r\n        line-height: 5em;\r\n        font-size: 0.2em;\r\n        color: #cccccc;\r\n        display: block;\r\n        text-align: center;\r\n        white-space: nowrap;\r\n        -webkit-transition-property: all;\r\n        -moz-transition-property: all;\r\n        -o-transition-property: all;\r\n        transition-property: all;\r\n        -webkit-transition-duration: 0.2s;\r\n        -moz-transition-duration: 0.2s;\r\n        -o-transition-duration: 0.2s;\r\n        transition-duration: 0.2s;\r\n        -webkit-transition-timing-function: ease-out;\r\n        -moz-transition-timing-function: ease-out;\r\n        -o-transition-timing-function: ease-out;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    .c100:after {\r\n        position: absolute;\r\n        top: 0.08em;\r\n        left: 0.08em;\r\n        display: block;\r\n        content: \" \";\r\n        border-radius: 50%;\r\n        background-color: #f5f5f5;\r\n        width: 0.84em;\r\n        height: 0.84em;\r\n        -webkit-transition-property: all;\r\n        -moz-transition-property: all;\r\n        -o-transition-property: all;\r\n        transition-property: all;\r\n        -webkit-transition-duration: 0.2s;\r\n        -moz-transition-duration: 0.2s;\r\n        -o-transition-duration: 0.2s;\r\n        transition-duration: 0.2s;\r\n        -webkit-transition-timing-function: ease-in;\r\n        -moz-transition-timing-function: ease-in;\r\n        -o-transition-timing-function: ease-in;\r\n        transition-timing-function: ease-in;\r\n    }\r\n    .c100 .slice {\r\n        position: absolute;\r\n        width: 1em;\r\n        height: 1em;\r\n        clip: rect(0em, 1em, 1em, 0.5em);\r\n    }\r\n    .c100.p1 .bar {\r\n        -webkit-transform: rotate(3.6deg);\r\n        -moz-transform: rotate(3.6deg);\r\n        -ms-transform: rotate(3.6deg);\r\n        -o-transform: rotate(3.6deg);\r\n        transform: rotate(3.6deg);\r\n    }\r\n    .c100.p2 .bar {\r\n        -webkit-transform: rotate(7.2deg);\r\n        -moz-transform: rotate(7.2deg);\r\n        -ms-transform: rotate(7.2deg);\r\n        -o-transform: rotate(7.2deg);\r\n        transform: rotate(7.2deg);\r\n    }\r\n    .c100.p3 .bar {\r\n        -webkit-transform: rotate(10.8deg);\r\n        -moz-transform: rotate(10.8deg);\r\n        -ms-transform: rotate(10.8deg);\r\n        -o-transform: rotate(10.8deg);\r\n        transform: rotate(10.8deg);\r\n    }\r\n    .c100.p4 .bar {\r\n        -webkit-transform: rotate(14.4deg);\r\n        -moz-transform: rotate(14.4deg);\r\n        -ms-transform: rotate(14.4deg);\r\n        -o-transform: rotate(14.4deg);\r\n        transform: rotate(14.4deg);\r\n    }\r\n    .c100.p5 .bar {\r\n        -webkit-transform: rotate(18deg);\r\n        -moz-transform: rotate(18deg);\r\n        -ms-transform: rotate(18deg);\r\n        -o-transform: rotate(18deg);\r\n        transform: rotate(18deg);\r\n    }\r\n    .c100.p6 .bar {\r\n        -webkit-transform: rotate(21.6deg);\r\n        -moz-transform: rotate(21.6deg);\r\n        -ms-transform: rotate(21.6deg);\r\n        -o-transform: rotate(21.6deg);\r\n        transform: rotate(21.6deg);\r\n    }\r\n    .c100.p7 .bar {\r\n        -webkit-transform: rotate(25.2deg);\r\n        -moz-transform: rotate(25.2deg);\r\n        -ms-transform: rotate(25.2deg);\r\n        -o-transform: rotate(25.2deg);\r\n        transform: rotate(25.2deg);\r\n    }\r\n    .c100.p8 .bar {\r\n        -webkit-transform: rotate(28.8deg);\r\n        -moz-transform: rotate(28.8deg);\r\n        -ms-transform: rotate(28.8deg);\r\n        -o-transform: rotate(28.8deg);\r\n        transform: rotate(28.8deg);\r\n    }\r\n    .c100.p9 .bar {\r\n        -webkit-transform: rotate(32.4deg);\r\n        -moz-transform: rotate(32.4deg);\r\n        -ms-transform: rotate(32.4deg);\r\n        -o-transform: rotate(32.4deg);\r\n        transform: rotate(32.4deg);\r\n    }\r\n    .c100.p10 .bar {\r\n        -webkit-transform: rotate(36deg);\r\n        -moz-transform: rotate(36deg);\r\n        -ms-transform: rotate(36deg);\r\n        -o-transform: rotate(36deg);\r\n        transform: rotate(36deg);\r\n    }\r\n    .c100.p11 .bar {\r\n        -webkit-transform: rotate(39.6deg);\r\n        -moz-transform: rotate(39.6deg);\r\n        -ms-transform: rotate(39.6deg);\r\n        -o-transform: rotate(39.6deg);\r\n        transform: rotate(39.6deg);\r\n    }\r\n    .c100.p12 .bar {\r\n        -webkit-transform: rotate(43.2deg);\r\n        -moz-transform: rotate(43.2deg);\r\n        -ms-transform: rotate(43.2deg);\r\n        -o-transform: rotate(43.2deg);\r\n        transform: rotate(43.2deg);\r\n    }\r\n    .c100.p13 .bar {\r\n        -webkit-transform: rotate(46.800000000000004deg);\r\n        -moz-transform: rotate(46.800000000000004deg);\r\n        -ms-transform: rotate(46.800000000000004deg);\r\n        -o-transform: rotate(46.800000000000004deg);\r\n        transform: rotate(46.800000000000004deg);\r\n    }\r\n    .c100.p14 .bar {\r\n        -webkit-transform: rotate(50.4deg);\r\n        -moz-transform: rotate(50.4deg);\r\n        -ms-transform: rotate(50.4deg);\r\n        -o-transform: rotate(50.4deg);\r\n        transform: rotate(50.4deg);\r\n    }\r\n        .c100.p15 .bar {\r\n        -webkit-transform: rotate(54deg);\r\n        -moz-transform: rotate(54deg);\r\n        -ms-transform: rotate(54deg);\r\n        -o-transform: rotate(54deg);\r\n        transform: rotate(54deg);\r\n    }\r\n        .c100.p16 .bar {\r\n        -webkit-transform: rotate(57.6deg);\r\n        -moz-transform: rotate(57.6deg);\r\n        -ms-transform: rotate(57.6deg);\r\n        -o-transform: rotate(57.6deg);\r\n        transform: rotate(57.6deg);\r\n    }\r\n        .c100.p17 .bar {\r\n        -webkit-transform: rotate(61.2deg);\r\n        -moz-transform: rotate(61.2deg);\r\n        -ms-transform: rotate(61.2deg);\r\n        -o-transform: rotate(61.2deg);\r\n        transform: rotate(61.2deg);\r\n    }\r\n    .c100.p18 .bar {\r\n        -webkit-transform: rotate(64.8deg);\r\n        -moz-transform: rotate(64.8deg);\r\n        -ms-transform: rotate(64.8deg);\r\n        -o-transform: rotate(64.8deg);\r\n        transform: rotate(64.8deg);\r\n    }\r\n        .c100.p19 .bar {\r\n        -webkit-transform: rotate(68.4deg);\r\n        -moz-transform: rotate(68.4deg);\r\n        -ms-transform: rotate(68.4deg);\r\n        -o-transform: rotate(68.4deg);\r\n        transform: rotate(68.4deg);\r\n    }\r\n    .c100.p20 .bar {\r\n        -webkit-transform: rotate(72deg);\r\n        -moz-transform: rotate(72deg);\r\n        -ms-transform: rotate(72deg);\r\n        -o-transform: rotate(72deg);\r\n        transform: rotate(72deg);\r\n    }\r\n    .c100.p21 .bar {\r\n        -webkit-transform: rotate(75.60000000000001deg);\r\n        -moz-transform: rotate(75.60000000000001deg);\r\n        -ms-transform: rotate(75.60000000000001deg);\r\n        -o-transform: rotate(75.60000000000001deg);\r\n        transform: rotate(75.60000000000001deg);\r\n    }\r\n    .c100.p22 .bar {\r\n        -webkit-transform: rotate(79.2deg);\r\n        -moz-transform: rotate(79.2deg);\r\n        -ms-transform: rotate(79.2deg);\r\n        -o-transform: rotate(79.2deg);\r\n        transform: rotate(79.2deg);\r\n    }\r\n    .c100.p23 .bar {\r\n        -webkit-transform: rotate(82.8deg);\r\n        -moz-transform: rotate(82.8deg);\r\n        -ms-transform: rotate(82.8deg);\r\n        -o-transform: rotate(82.8deg);\r\n        transform: rotate(82.8deg);\r\n    }\r\n    .c100.p24 .bar {\r\n        -webkit-transform: rotate(86.4deg);\r\n        -moz-transform: rotate(86.4deg);\r\n        -ms-transform: rotate(86.4deg);\r\n        -o-transform: rotate(86.4deg);\r\n        transform: rotate(86.4deg);\r\n    }\r\n    .c100.p25 .bar {\r\n        -webkit-transform: rotate(90deg);\r\n        -moz-transform: rotate(90deg);\r\n        -ms-transform: rotate(90deg);\r\n        -o-transform: rotate(90deg);\r\n        transform: rotate(90deg);\r\n    }\r\n    .c100.p26 .bar {\r\n        -webkit-transform: rotate(93.60000000000001deg);\r\n        -moz-transform: rotate(93.60000000000001deg);\r\n        -ms-transform: rotate(93.60000000000001deg);\r\n        -o-transform: rotate(93.60000000000001deg);\r\n        transform: rotate(93.60000000000001deg);\r\n    }\r\n    .c100.p27 .bar {\r\n        -webkit-transform: rotate(97.2deg);\r\n        -moz-transform: rotate(97.2deg);\r\n        -ms-transform: rotate(97.2deg);\r\n        -o-transform: rotate(97.2deg);\r\n        transform: rotate(97.2deg);\r\n    }\r\n    .c100.p28 .bar {\r\n        -webkit-transform: rotate(100.8deg);\r\n        -moz-transform: rotate(100.8deg);\r\n        -ms-transform: rotate(100.8deg);\r\n        -o-transform: rotate(100.8deg);\r\n        transform: rotate(100.8deg);\r\n    }\r\n    .c100.p29 .bar {\r\n        -webkit-transform: rotate(104.4deg);\r\n        -moz-transform: rotate(104.4deg);\r\n        -ms-transform: rotate(104.4deg);\r\n        -o-transform: rotate(104.4deg);\r\n        transform: rotate(104.4deg);\r\n    }\r\n    .c100.p30 .bar {\r\n        -webkit-transform: rotate(108deg);\r\n        -moz-transform: rotate(108deg);\r\n        -ms-transform: rotate(108deg);\r\n        -o-transform: rotate(108deg);\r\n        transform: rotate(108deg);\r\n    }\r\n    .c100.p31 .bar {\r\n        -webkit-transform: rotate(111.60000000000001deg);\r\n        -moz-transform: rotate(111.60000000000001deg);\r\n        -ms-transform: rotate(111.60000000000001deg);\r\n        -o-transform: rotate(111.60000000000001deg);\r\n        transform: rotate(111.60000000000001deg);\r\n    }\r\n    .c100.p32 .bar {\r\n        -webkit-transform: rotate(115.2deg);\r\n        -moz-transform: rotate(115.2deg);\r\n        -ms-transform: rotate(115.2deg);\r\n        -o-transform: rotate(115.2deg);\r\n        transform: rotate(115.2deg);\r\n    }\r\n    .c100.p33 .bar {\r\n        -webkit-transform: rotate(118.8deg);\r\n        -moz-transform: rotate(118.8deg);\r\n        -ms-transform: rotate(118.8deg);\r\n        -o-transform: rotate(118.8deg);\r\n        transform: rotate(118.8deg);\r\n    }\r\n    .c100.p34 .bar {\r\n        -webkit-transform: rotate(122.4deg);\r\n        -moz-transform: rotate(122.4deg);\r\n        -ms-transform: rotate(122.4deg);\r\n        -o-transform: rotate(122.4deg);\r\n        transform: rotate(122.4deg);\r\n    }\r\n    .c100.p35 .bar {\r\n        -webkit-transform: rotate(126deg);\r\n        -moz-transform: rotate(126deg);\r\n        -ms-transform: rotate(126deg);\r\n        -o-transform: rotate(126deg);\r\n        transform: rotate(126deg);\r\n    }\r\n    .c100.p36 .bar {\r\n        -webkit-transform: rotate(129.6deg);\r\n        -moz-transform: rotate(129.6deg);\r\n        -ms-transform: rotate(129.6deg);\r\n        -o-transform: rotate(129.6deg);\r\n        transform: rotate(129.6deg);\r\n    }\r\n    .c100.p37 .bar {\r\n        -webkit-transform: rotate(133.20000000000002deg);\r\n        -moz-transform: rotate(133.20000000000002deg);\r\n        -ms-transform: rotate(133.20000000000002deg);\r\n        -o-transform: rotate(133.20000000000002deg);\r\n        transform: rotate(133.20000000000002deg);\r\n    }\r\n    .c100.p38 .bar {\r\n        -webkit-transform: rotate(136.8deg);\r\n        -moz-transform: rotate(136.8deg);\r\n        -ms-transform: rotate(136.8deg);\r\n        -o-transform: rotate(136.8deg);\r\n        transform: rotate(136.8deg);\r\n    }\r\n    .c100.p39 .bar {\r\n        -webkit-transform: rotate(140.4deg);\r\n        -moz-transform: rotate(140.4deg);\r\n        -ms-transform: rotate(140.4deg);\r\n        -o-transform: rotate(140.4deg);\r\n        transform: rotate(140.4deg);\r\n    }\r\n    .c100.p40 .bar {\r\n        -webkit-transform: rotate(144deg);\r\n        -moz-transform: rotate(144deg);\r\n        -ms-transform: rotate(144deg);\r\n        -o-transform: rotate(144deg);\r\n        transform: rotate(144deg);\r\n    }\r\n    .c100.p41 .bar {\r\n        -webkit-transform: rotate(147.6deg);\r\n        -moz-transform: rotate(147.6deg);\r\n        -ms-transform: rotate(147.6deg);\r\n        -o-transform: rotate(147.6deg);\r\n        transform: rotate(147.6deg);\r\n    }\r\n    .c100.p42 .bar {\r\n        -webkit-transform: rotate(151.20000000000002deg);\r\n        -moz-transform: rotate(151.20000000000002deg);\r\n        -ms-transform: rotate(151.20000000000002deg);\r\n        -o-transform: rotate(151.20000000000002deg);\r\n        transform: rotate(151.20000000000002deg);\r\n    }\r\n    .c100.p43 .bar {\r\n        -webkit-transform: rotate(154.8deg);\r\n        -moz-transform: rotate(154.8deg);\r\n        -ms-transform: rotate(154.8deg);\r\n        -o-transform: rotate(154.8deg);\r\n        transform: rotate(154.8deg);\r\n    }\r\n    .c100.p44 .bar {\r\n        -webkit-transform: rotate(158.4deg);\r\n        -moz-transform: rotate(158.4deg);\r\n        -ms-transform: rotate(158.4deg);\r\n        -o-transform: rotate(158.4deg);\r\n        transform: rotate(158.4deg);\r\n    }\r\n    .c100.p45 .bar {\r\n        -webkit-transform: rotate(162deg);\r\n        -moz-transform: rotate(162deg);\r\n        -ms-transform: rotate(162deg);\r\n        -o-transform: rotate(162deg);\r\n        transform: rotate(162deg);\r\n    }\r\n    .c100.p46 .bar {\r\n        -webkit-transform: rotate(165.6deg);\r\n        -moz-transform: rotate(165.6deg);\r\n        -ms-transform: rotate(165.6deg);\r\n        -o-transform: rotate(165.6deg);\r\n        transform: rotate(165.6deg);\r\n    }\r\n    .c100.p47 .bar {\r\n        -webkit-transform: rotate(169.20000000000002deg);\r\n        -moz-transform: rotate(169.20000000000002deg);\r\n        -ms-transform: rotate(169.20000000000002deg);\r\n        -o-transform: rotate(169.20000000000002deg);\r\n        transform: rotate(169.20000000000002deg);\r\n    }\r\n    .c100.p48 .bar {\r\n        -webkit-transform: rotate(172.8deg);\r\n        -moz-transform: rotate(172.8deg);\r\n        -ms-transform: rotate(172.8deg);\r\n        -o-transform: rotate(172.8deg);\r\n        transform: rotate(172.8deg);\r\n    }\r\n    .c100.p49 .bar {\r\n        -webkit-transform: rotate(176.4deg);\r\n        -moz-transform: rotate(176.4deg);\r\n        -ms-transform: rotate(176.4deg);\r\n        -o-transform: rotate(176.4deg);\r\n        transform: rotate(176.4deg);\r\n    }\r\n    .c100.p50 .bar {\r\n        -webkit-transform: rotate(180deg);\r\n        -moz-transform: rotate(180deg);\r\n        -ms-transform: rotate(180deg);\r\n        -o-transform: rotate(180deg);\r\n        transform: rotate(180deg);\r\n    }\r\n    .c100.p51 .bar {\r\n        -webkit-transform: rotate(183.6deg);\r\n        -moz-transform: rotate(183.6deg);\r\n        -ms-transform: rotate(183.6deg);\r\n        -o-transform: rotate(183.6deg);\r\n        transform: rotate(183.6deg);\r\n    }\r\n    .c100.p52 .bar {\r\n        -webkit-transform: rotate(187.20000000000002deg);\r\n        -moz-transform: rotate(187.20000000000002deg);\r\n        -ms-transform: rotate(187.20000000000002deg);\r\n        -o-transform: rotate(187.20000000000002deg);\r\n        transform: rotate(187.20000000000002deg);\r\n    }\r\n    .c100.p53 .bar {\r\n        -webkit-transform: rotate(190.8deg);\r\n        -moz-transform: rotate(190.8deg);\r\n        -ms-transform: rotate(190.8deg);\r\n        -o-transform: rotate(190.8deg);\r\n        transform: rotate(190.8deg);\r\n    }\r\n    .c100.p54 .bar {\r\n        -webkit-transform: rotate(194.4deg);\r\n        -moz-transform: rotate(194.4deg);\r\n        -ms-transform: rotate(194.4deg);\r\n        -o-transform: rotate(194.4deg);\r\n        transform: rotate(194.4deg);\r\n    }\r\n    .c100.p55 .bar {\r\n        -webkit-transform: rotate(198deg);\r\n        -moz-transform: rotate(198deg);\r\n        -ms-transform: rotate(198deg);\r\n        -o-transform: rotate(198deg);\r\n        transform: rotate(198deg);\r\n    }\r\n    .c100.p56 .bar {\r\n        -webkit-transform: rotate(201.6deg);\r\n        -moz-transform: rotate(201.6deg);\r\n        -ms-transform: rotate(201.6deg);\r\n        -o-transform: rotate(201.6deg);\r\n        transform: rotate(201.6deg);\r\n    }\r\n    .c100.p57 .bar {\r\n        -webkit-transform: rotate(205.20000000000002deg);\r\n        -moz-transform: rotate(205.20000000000002deg);\r\n        -ms-transform: rotate(205.20000000000002deg);\r\n        -o-transform: rotate(205.20000000000002deg);\r\n        transform: rotate(205.20000000000002deg);\r\n    }\r\n    .c100.p58 .bar {\r\n        -webkit-transform: rotate(208.8deg);\r\n        -moz-transform: rotate(208.8deg);\r\n        -ms-transform: rotate(208.8deg);\r\n        -o-transform: rotate(208.8deg);\r\n        transform: rotate(208.8deg);\r\n    }\r\n    .c100.p59 .bar {\r\n        -webkit-transform: rotate(212.4deg);\r\n        -moz-transform: rotate(212.4deg);\r\n        -ms-transform: rotate(212.4deg);\r\n        -o-transform: rotate(212.4deg);\r\n        transform: rotate(212.4deg);\r\n    }\r\n    .c100.p60 .bar {\r\n        -webkit-transform: rotate(216deg);\r\n        -moz-transform: rotate(216deg);\r\n        -ms-transform: rotate(216deg);\r\n        -o-transform: rotate(216deg);\r\n        transform: rotate(216deg);\r\n    }\r\n    .c100.p61 .bar {\r\n        -webkit-transform: rotate(219.6deg);\r\n        -moz-transform: rotate(219.6deg);\r\n        -ms-transform: rotate(219.6deg);\r\n        -o-transform: rotate(219.6deg);\r\n        transform: rotate(219.6deg);\r\n    }\r\n    .c100.p62 .bar {\r\n        -webkit-transform: rotate(223.20000000000002deg);\r\n        -moz-transform: rotate(223.20000000000002deg);\r\n        -ms-transform: rotate(223.20000000000002deg);\r\n        -o-transform: rotate(223.20000000000002deg);\r\n        transform: rotate(223.20000000000002deg);\r\n    }\r\n    .c100.p63 .bar {\r\n        -webkit-transform: rotate(226.8deg);\r\n        -moz-transform: rotate(226.8deg);\r\n        -ms-transform: rotate(226.8deg);\r\n        -o-transform: rotate(226.8deg);\r\n        transform: rotate(226.8deg);\r\n    }\r\n    .c100.p64 .bar {\r\n        -webkit-transform: rotate(230.4deg);\r\n        -moz-transform: rotate(230.4deg);\r\n        -ms-transform: rotate(230.4deg);\r\n        -o-transform: rotate(230.4deg);\r\n        transform: rotate(230.4deg);\r\n    }\r\n    .c100.p65 .bar {\r\n        -webkit-transform: rotate(234deg);\r\n        -moz-transform: rotate(234deg);\r\n        -ms-transform: rotate(234deg);\r\n        -o-transform: rotate(234deg);\r\n        transform: rotate(234deg);\r\n    }\r\n    .c100.p66 .bar {\r\n        -webkit-transform: rotate(237.6deg);\r\n        -moz-transform: rotate(237.6deg);\r\n        -ms-transform: rotate(237.6deg);\r\n        -o-transform: rotate(237.6deg);\r\n        transform: rotate(237.6deg);\r\n    }\r\n    .c100.p67 .bar {\r\n        -webkit-transform: rotate(241.20000000000002deg);\r\n        -moz-transform: rotate(241.20000000000002deg);\r\n        -ms-transform: rotate(241.20000000000002deg);\r\n        -o-transform: rotate(241.20000000000002deg);\r\n        transform: rotate(241.20000000000002deg);\r\n    }\r\n    .c100.p68 .bar {\r\n        -webkit-transform: rotate(244.8deg);\r\n        -moz-transform: rotate(244.8deg);\r\n        -ms-transform: rotate(244.8deg);\r\n        -o-transform: rotate(244.8deg);\r\n        transform: rotate(244.8deg);\r\n    }\r\n    .c100.p69 .bar {\r\n        -webkit-transform: rotate(248.4deg);\r\n        -moz-transform: rotate(248.4deg);\r\n        -ms-transform: rotate(248.4deg);\r\n        -o-transform: rotate(248.4deg);\r\n        transform: rotate(248.4deg);\r\n    }\r\n    .c100.p70 .bar {\r\n        -webkit-transform: rotate(252deg);\r\n        -moz-transform: rotate(252deg);\r\n        -ms-transform: rotate(252deg);\r\n        -o-transform: rotate(252deg);\r\n        transform: rotate(252deg);\r\n    }\r\n    .c100.p71 .bar {\r\n        -webkit-transform: rotate(255.6deg);\r\n        -moz-transform: rotate(255.6deg);\r\n        -ms-transform: rotate(255.6deg);\r\n        -o-transform: rotate(255.6deg);\r\n        transform: rotate(255.6deg);\r\n    }\r\n    .c100.p72 .bar {\r\n        -webkit-transform: rotate(259.2deg);\r\n        -moz-transform: rotate(259.2deg);\r\n        -ms-transform: rotate(259.2deg);\r\n        -o-transform: rotate(259.2deg);\r\n        transform: rotate(259.2deg);\r\n    }\r\n    .c100.p73 .bar {\r\n        -webkit-transform: rotate(262.8deg);\r\n        -moz-transform: rotate(262.8deg);\r\n        -ms-transform: rotate(262.8deg);\r\n        -o-transform: rotate(262.8deg);\r\n        transform: rotate(262.8deg);\r\n    }\r\n    .c100.p74 .bar {\r\n        -webkit-transform: rotate(266.40000000000003deg);\r\n        -moz-transform: rotate(266.40000000000003deg);\r\n        -ms-transform: rotate(266.40000000000003deg);\r\n        -o-transform: rotate(266.40000000000003deg);\r\n        transform: rotate(266.40000000000003deg);\r\n    }\r\n    .c100.p75 .bar {\r\n        -webkit-transform: rotate(270deg);\r\n        -moz-transform: rotate(270deg);\r\n        -ms-transform: rotate(270deg);\r\n        -o-transform: rotate(270deg);\r\n        transform: rotate(270deg);\r\n    }\r\n    .c100.p76 .bar {\r\n        -webkit-transform: rotate(273.6deg);\r\n        -moz-transform: rotate(273.6deg);\r\n        -ms-transform: rotate(273.6deg);\r\n        -o-transform: rotate(273.6deg);\r\n        transform: rotate(273.6deg);\r\n    }\r\n    .c100.p77 .bar {\r\n        -webkit-transform: rotate(277.2deg);\r\n        -moz-transform: rotate(277.2deg);\r\n        -ms-transform: rotate(277.2deg);\r\n        -o-transform: rotate(277.2deg);\r\n        transform: rotate(277.2deg);\r\n    }\r\n    .c100.p78 .bar {\r\n        -webkit-transform: rotate(280.8deg);\r\n        -moz-transform: rotate(280.8deg);\r\n        -ms-transform: rotate(280.8deg);\r\n        -o-transform: rotate(280.8deg);\r\n        transform: rotate(280.8deg);\r\n    }\r\n    .c100.p79 .bar {\r\n        -webkit-transform: rotate(284.40000000000003deg);\r\n        -moz-transform: rotate(284.40000000000003deg);\r\n        -ms-transform: rotate(284.40000000000003deg);\r\n        -o-transform: rotate(284.40000000000003deg);\r\n        transform: rotate(284.40000000000003deg);\r\n    }\r\n    .c100.p80 .bar {\r\n        -webkit-transform: rotate(288deg);\r\n        -moz-transform: rotate(288deg);\r\n        -ms-transform: rotate(288deg);\r\n        -o-transform: rotate(288deg);\r\n        transform: rotate(288deg);\r\n    }\r\n    .c100.p81 .bar {\r\n        -webkit-transform: rotate(291.6deg);\r\n        -moz-transform: rotate(291.6deg);\r\n        -ms-transform: rotate(291.6deg);\r\n        -o-transform: rotate(291.6deg);\r\n        transform: rotate(291.6deg);\r\n    }\r\n    .c100.p82 .bar {\r\n        -webkit-transform: rotate(295.2deg);\r\n        -moz-transform: rotate(295.2deg);\r\n        -ms-transform: rotate(295.2deg);\r\n        -o-transform: rotate(295.2deg);\r\n        transform: rotate(295.2deg);\r\n    }\r\n    .c100.p83 .bar {\r\n        -webkit-transform: rotate(298.8deg);\r\n        -moz-transform: rotate(298.8deg);\r\n        -ms-transform: rotate(298.8deg);\r\n        -o-transform: rotate(298.8deg);\r\n        transform: rotate(298.8deg);\r\n    }\r\n    .c100.p84 .bar {\r\n        -webkit-transform: rotate(302.40000000000003deg);\r\n        -moz-transform: rotate(302.40000000000003deg);\r\n        -ms-transform: rotate(302.40000000000003deg);\r\n        -o-transform: rotate(302.40000000000003deg);\r\n        transform: rotate(302.40000000000003deg);\r\n    }\r\n    .c100.p85 .bar {\r\n        -webkit-transform: rotate(306deg);\r\n        -moz-transform: rotate(306deg);\r\n        -ms-transform: rotate(306deg);\r\n        -o-transform: rotate(306deg);\r\n        transform: rotate(306deg);\r\n    }\r\n    .c100.p86 .bar {\r\n        -webkit-transform: rotate(309.6deg);\r\n        -moz-transform: rotate(309.6deg);\r\n        -ms-transform: rotate(309.6deg);\r\n        -o-transform: rotate(309.6deg);\r\n        transform: rotate(309.6deg);\r\n    }\r\n    .c100.p87 .bar {\r\n        -webkit-transform: rotate(313.2deg);\r\n        -moz-transform: rotate(313.2deg);\r\n        -ms-transform: rotate(313.2deg);\r\n        -o-transform: rotate(313.2deg);\r\n        transform: rotate(313.2deg);\r\n    }\r\n    .c100.p88 .bar {\r\n        -webkit-transform: rotate(316.8deg);\r\n        -moz-transform: rotate(316.8deg);\r\n        -ms-transform: rotate(316.8deg);\r\n        -o-transform: rotate(316.8deg);\r\n        transform: rotate(316.8deg);\r\n    }\r\n    .c100.p89 .bar {\r\n        -webkit-transform: rotate(320.40000000000003deg);\r\n        -moz-transform: rotate(320.40000000000003deg);\r\n        -ms-transform: rotate(320.40000000000003deg);\r\n        -o-transform: rotate(320.40000000000003deg);\r\n        transform: rotate(320.40000000000003deg);\r\n    }\r\n    .c100.p90 .bar {\r\n        -webkit-transform: rotate(324deg);\r\n        -moz-transform: rotate(324deg);\r\n        -ms-transform: rotate(324deg);\r\n        -o-transform: rotate(324deg);\r\n        transform: rotate(324deg);\r\n    }\r\n    .c100.p91 .bar {\r\n        -webkit-transform: rotate(327.6deg);\r\n        -moz-transform: rotate(327.6deg);\r\n        -ms-transform: rotate(327.6deg);\r\n        -o-transform: rotate(327.6deg);\r\n        transform: rotate(327.6deg);\r\n    }\r\n    .c100.p92 .bar {\r\n        -webkit-transform: rotate(331.2deg);\r\n        -moz-transform: rotate(331.2deg);\r\n        -ms-transform: rotate(331.2deg);\r\n        -o-transform: rotate(331.2deg);\r\n        transform: rotate(331.2deg);\r\n    }\r\n    .c100.p93 .bar {\r\n        -webkit-transform: rotate(334.8deg);\r\n        -moz-transform: rotate(334.8deg);\r\n        -ms-transform: rotate(334.8deg);\r\n        -o-transform: rotate(334.8deg);\r\n        transform: rotate(334.8deg);\r\n    }\r\n    .c100.p94 .bar {\r\n        -webkit-transform: rotate(338.40000000000003deg);\r\n        -moz-transform: rotate(338.40000000000003deg);\r\n        -ms-transform: rotate(338.40000000000003deg);\r\n        -o-transform: rotate(338.40000000000003deg);\r\n        transform: rotate(338.40000000000003deg);\r\n    }\r\n    .c100.p95 .bar {\r\n        -webkit-transform: rotate(342deg);\r\n        -moz-transform: rotate(342deg);\r\n        -ms-transform: rotate(342deg);\r\n        -o-transform: rotate(342deg);\r\n        transform: rotate(342deg);\r\n    }\r\n    .c100.p96 .bar {\r\n        -webkit-transform: rotate(345.6deg);\r\n        -moz-transform: rotate(345.6deg);\r\n        -ms-transform: rotate(345.6deg);\r\n        -o-transform: rotate(345.6deg);\r\n        transform: rotate(345.6deg);\r\n    }\r\n    .c100.p97 .bar {\r\n        -webkit-transform: rotate(349.2deg);\r\n        -moz-transform: rotate(349.2deg);\r\n        -ms-transform: rotate(349.2deg);\r\n        -o-transform: rotate(349.2deg);\r\n        transform: rotate(349.2deg);\r\n    }\r\n    .c100.p98 .bar {\r\n        -webkit-transform: rotate(352.8deg);\r\n        -moz-transform: rotate(352.8deg);\r\n        -ms-transform: rotate(352.8deg);\r\n        -o-transform: rotate(352.8deg);\r\n        transform: rotate(352.8deg);\r\n    }\r\n    .c100.p99 .bar {\r\n        -webkit-transform: rotate(356.40000000000003deg);\r\n        -moz-transform: rotate(356.40000000000003deg);\r\n        -ms-transform: rotate(356.40000000000003deg);\r\n        -o-transform: rotate(356.40000000000003deg);\r\n        transform: rotate(356.40000000000003deg);\r\n    }\r\n    .c100.p100 .bar {\r\n        -webkit-transform: rotate(360deg);\r\n        -moz-transform: rotate(360deg);\r\n        -ms-transform: rotate(360deg);\r\n        -o-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n    .c100:hover {\r\n        cursor: default;\r\n    }\r\n    .c100:hover > span {\r\n        width: 3.33em;\r\n        line-height: 3.33em;\r\n        font-size: 0.3em;\r\n        color: #307bbb;\r\n    }\r\n    .c100:hover:after {\r\n        top: 0.04em;\r\n        left: 0.04em;\r\n        width: 0.92em;\r\n        height: 0.92em;\r\n    }\r\n    .c100.dark {\r\n        background-color: #777777;\r\n    }\r\n    .c100.dark .bar,\r\n    .c100.dark .fill {\r\n        border-color: #c6ff00 !important;\r\n    }\r\n    .c100.dark > span {\r\n        color: #777777;\r\n    }\r\n    .c100.dark:after {\r\n        background-color: #666666;\r\n    }\r\n    .c100.dark:hover > span {\r\n        color: #c6ff00;\r\n    }\r\n    .c100.green .bar,\r\n    .c100.green .fill {\r\n        border-color: #4db53c !important;\r\n    }\r\n    .c100.green:hover > span {\r\n        color: #4db53c;\r\n    }\r\n    .c100.green.dark .bar,\r\n    .c100.green.dark .fill {\r\n        border-color: #5fd400 !important;\r\n    }\r\n    .c100.green.dark:hover > span {\r\n        color: #5fd400;\r\n    }\r\n    .c100.orange .bar,\r\n    .c100.orange .fill {\r\n        border-color: #dd9d22 !important;\r\n    }\r\n    .c100.orange:hover > span {\r\n        color: #dd9d22;\r\n    }\r\n    .c100.orange.dark .bar,\r\n    .c100.orange.dark .fill {\r\n        border-color: #e08833 !important;\r\n    }\r\n    .c100.orange.dark:hover > span {\r\n        color: #e08833;\r\n    }\r\n)",
            "Type": "blocks"
        },
        {
            "Name": "welcome",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(panel panel-primary){\r\n        Div(list-group-item text-center){\r\n            P(Class: h3 m0 text-bold, Body: $@1welcome_title$)\r\n        }\r\n        Div(list-group-item){\r\n            Span(Class: h4, Body: $@1welcome_text$)\r\n            Span(Class: h4 text-primary, Body: \" https://genesiskernel.readthedocs.io\")\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1member_management$, Page:@1members_list_admin, Icon:\"icon-people\")\r\nMenuItem(Title:$@1ecosystems$, Page:@1ecosystems_list, Icon:\"icon-layers\")\r\nMenuItem(Title:$@1platform_parameters$, Page:@1sysparams_list, Icon:\"icon-settings\")\r\nMenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\"icon-pie-chart\")\r\nMenuItem(Title:$@1groups$, Page:@1groups_list, Icon:\"icon-user-following\")\r\nMenuItem(Title:$@1tokens_refund$, Page:@1tokenrefund_list, Icon:\"icon-shuffle\")\r\nMenuItem(Title:$@1consortium_network$, Page:@1cn_connection_requests_list, Icon:\"icon-graduation\")\r\nMenuItem(Title:$@1pa_settings$, Page:@1platform_apps_settings, Icon: \"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\"icon-wallet\")\r\nMenuItem(Title:$@1messenger$, Page:@1messages_list, Icon:\"icon-speech\")\r\nMenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\"icon-flag\")\r\nMenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\"icon-people\")\r\nMenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\"icon-note\")",
            "Type": "menu"
        },
        {
            "Name": "cn_connection_requests",
            "Columns": "[\r\n    {\r\n        \"name\": \"api_address\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"comment\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"date_created\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"description\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"pub_key\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"tcp_address\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "groups",
            "Columns": "[\r\n    {\r\n        \"name\": \"creator\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"date_created\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"date_deleted\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"ecosystem\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"group_access\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"group_info\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"group_name\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"group_type\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"image_id\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "groups_participants",
            "Columns": "[\r\n    {\r\n        \"name\": \"appointed\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"date_created\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"date_deleted\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"ecosystem\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"groups_info\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"member\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokens_refund",
            "Columns": "[\r\n    {\r\n        \"name\": \"amount\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"money\"\r\n    },\r\n    {\r\n        \"name\": \"attacker_account\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"varchar\"\r\n    },\r\n    {\r\n        \"name\": \"blocked_at\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"closed_at\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"note\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"name\": \"result\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"status\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"consortium_member_account\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"varchar\"\r\n    },\r\n    {\r\n        \"name\": \"victim_account\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"varchar\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\r\n    {\r\n        \"name\": \"ecosystem\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"optional\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"subject\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"voting\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings",
            "Columns": "[\r\n    {\r\n        \"name\": \"creator\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"date_ended\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"date_started\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"ecosystem\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"flags\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"optional\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"progress\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"status\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"voting\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[\r\n    {\r\n        \"name\": \"decision\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"decision_date\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"ecosystem\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"member\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"rating\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"voting_id\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[\r\n    {\r\n        \"name\": \"ecosystem\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"number_accept\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"name\": \"results\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"subject\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"name\": \"voting_id\",\r\n        \"conditions\": \"true\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "config",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "{\r\n    \"name\": \"Basic\",\r\n    \"conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n    \"data\": [\r\n        {\r\n            \"Name\": \"default_menu\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\\\"icon-wallet\\\")\\nMenuItem(Title:$@1messenger$, Page:@1messages_list, Icon:\\\"icon-speech\\\")\\nMenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\\\"icon-flag\\\")\\nMenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\\\"icon-people\\\")\\nMenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\\\"icon-note\\\")\",\r\n            \"Type\": \"menu\"\r\n        },\r\n        {\r\n            \"Name\": \"admin_menu\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"MenuItem(Title:$@1member_management$, Page:@1members_list_admin, Icon:\\\"icon-people\\\")\\nMenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\\\"icon-pie-chart\\\")\\nMenuItem(Title:$@1groups$, Page:@1groups_list, Icon:\\\"icon-user-following\\\")\\nMenuItem(Title:$@1pa_settings$, Page:@1platform_apps_settings, Icon: \\\"icon-wrench\\\")\",\r\n            \"Type\": \"menu\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_table\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"@1r_ratings\",\r\n            \"Type\": \"app_params\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_wallet\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"member\",\r\n            \"Type\": \"app_params\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_amount\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"amount\",\r\n            \"Type\": \"app_params\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_weight\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"2\",\r\n            \"Type\": \"app_params\"\r\n        }\r\n    ]\r\n}",
            "Type": "app_params"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "{\"api_address\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "groups_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1open_group,@1closed_group",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "notification_closure",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1single,@1multiple",
            "Type": "app_params"
        },
        {
            "Name": "notification_icon",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Type": "app_params"
        },
        {
            "Name": "notification_sender",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1notification_sender_member,@1notification_sender_role",
            "Type": "app_params"
        },
        {
            "Name": "notification_type",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1personal_type,@1role_type",
            "Type": "app_params"
        },
        {
            "Name": "roles_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1assigned_role,@1elective_role,@1system_role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types_selection",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1assigned_role,@1elective_role",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1tokenrefund_result1,@1tokenrefund_result2",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1voting,@1closed",
            "Type": "app_params"
        },
        {
            "Name": "type_tokens_transfer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1resources_fees,@1emission_tokens,@1tokens_transfer,@1tokens_burn",
            "Type": "app_params"
        },
        {
            "Name": "type_voting",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1type_voting_custom,@1type_voting_system",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_decisions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1candidate_requests,@1candidate_manual,@1document,@1contract_run",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_participants",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1vp_everybody,@1vp_manual,@1vp_role,@1vp_rolelist_all,@1vp_rolelist_one,@1vp_group",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_amount",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "amount",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_table",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "r_ratings",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_wallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "member",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_weight",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "2",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1invalid,@1waiting,@1started,@1finished",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses_classes",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "text-danger,text-warning,text-success,text-success",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_cn_connection",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_decision",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_ecosysparams",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_platformparams",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_tokenrefund",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_ves",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "cn_connection_request_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(LangRes(@1tcp_address))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-8 text-left){\r\n            Input(Name: TcpAddress, Placeholder: \"xxx.xxx.xxx.xxx:port\")\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(LangRes(@1api_address))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-8 text-left){\r\n            Input(Name: ApiAddress, Placeholder: \"protocol://xxx.xxx.xxx.xxx:port\")\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(LangRes(@1node_pub_key))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-8 text-left){\r\n            Input(Name: PubKey, Type: textarea).Style(resize:vertical)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(LangRes(@1hardware_description))\r\n        }\r\n        Div(col-md-8 text-left){\r\n            Input(Name: Description, Type: textarea).Style(resize:vertical)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(LangRes(@1comment))\r\n        }\r\n        Div(col-md-8 text-left){\r\n            Input(Name: Comment, Type: textarea).Style(resize:vertical)\r\n        }\r\n    }\r\n\r\n    Button(Contract: @1CNConnectionRequest, Class: btn btn-primary pull-right mt, Page: @1cn_connection_requests_list, Body: $@1create_request$)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1cn_connection_requests_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "cn_connection_requests_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1cn_connection_requests_list).(this_table, @1cn_connection_requests)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1cn_connection_requests$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1cn_connection_requests_desc$\"))\r\nAddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1cn_connection_request_create).Popup(50, $@1cn_connection_request_form$)\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"api_address\": {\"$ilike\": \"#search#\"}, \"deleted\": 0})\r\n}.Else{\r\n    SetVar(where, {\"deleted\": 0})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1api_address))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(Ecosystem: 1, App: #application_id#, Name: voting_template_cn_connection))\r\nIf(#template_id# > 0){\r\n    DBFind(\"@1voting_templates\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#template_id#\"}).Columns(\"subject->voters\").Vars(template)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_actions){\r\n    If(And(#template_subject_voters# > 0, #template_subject_voters# == #role_id#)){\r\n        Form(btn-group pull-right){\r\n            Button(Contract: @1VotingRunNewCNConnection, Params: \"RequestId=#id#\", Page: @1voting_list, Class: btn bg-gray-lighter fa fa-play)\r\n            Button(Class: btn bg-gray-lighter mh-sm, Contract: @1CNConnectionRequestDelete, Params: \"RequestId=#id#\", Page: #this_page#){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n            }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }.Else{\r\n        If(#template_id# > 0){\r\n            Span($@1voting_not_participant$, text-muted)\r\n        }.Else{\r\n            Span($@1voting_template_not_found$, text-muted)\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n}.Custom(_tcp_address){\r\n    Span(Class: h6, Body: #tcp_address#)\r\n}.Custom(_api_address){\r\n    Span(Class: h6, Body: #api_address#)\r\n}.Custom(_description){\r\n    Span(Class: h6, Body: #description#)\r\n}.Custom(_comment){\r\n    Span(Class: h6, Body: #comment#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1api_address$=_api_address,$@1tcp_address$=_tcp_address,$@1hardware_description$=_description,$@1comment$=_comment,$@1date_created$=_date,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1cn_connection_requests$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "contract_bind_request",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(\"@1notifications\").Where({\"id\": \"#notific_id#\", \"ecosystem\": \"#ecosystem_id#\"}).Columns(\"closed,page_params->contract_id\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1request_contract_binding$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1contract_binding_des))\r\n                        Span(Class: h5 text-bold, Body: LangRes(@1contract) - #notific_page_params_contract_name#)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Button(Class: btn btn-danger mr-lg, Body: LangRes(@1request_reject), Contract: NotificationsClose, Page: notifications_list, Params: \"NotificId=#notific_id#\").Alert(Text: $@1want_reject_request$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                                Button(Class: btn btn-success, Body: LangRes(@1contract_binding_accept), Contract: @1BindWallet, Page: notifications_list, Params: \"Id=#notific_page_params_contract_id#\").Alert(Text: $@1want_bind_contract$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#account_id# == #guest_account#){\r\n    Include(@1apps_description)\r\n}.Else{\r\n    Include(@1profile)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Label(Public Key)\r\n    P(Class: text-muted h6 m0, Body: \"$@1keys_must_be_separated$\")\r\n    Input(Name: Keys, Type: textarea)\r\n    Button(Contract: @1MembershipAdd, Class: btn btn-primary pull-right mt, Page: @1members_list, Body: $@1members_add$)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1members_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ecosystems_list).(this_table, @1ecosystems)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystems$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystems_list_desc$\"))\r\nAddToolButton(Title: $@1update_metrics$, Page: @1ecosystems_metrics_update, Icon: icon-refresh).Popup(Header: $@1update_metrics$, Width: \"30\")\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1ecosystem_name))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1buffer_data\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account_id#\", \"key\": \"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_ves))\r\nIf(#template_id# > 0){\r\n    DBFind(\"@1voting_templates\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#template_id#\"}).Columns(\"subject->voters\").Vars(template)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(#id#)\r\n}.Custom(_name){\r\n    Span(#name#)\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id, #id#)\r\n        ForList(src_metrics){\r\n            If(#key# == #eco_id#){\r\n                LinkPage(Body: #value#, Page: @1sysparams_metrics, PageParams: \"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}.Custom(valued){\r\n    If(#is_valued# == 0){\r\n        If(And(#template_subject_voters# > 0, #template_subject_voters# == #role_id#)){\r\n            Button(Body: $@1start_voting_ves$, Class: btn-xs btn-link, Page: @1voting_list, Contract: @1VotingRunVes, Params: \"EcosystemId=#id#\")\r\n        }.Else{\r\n            If(#template_id# > 0){\r\n                Span($@1voting_not_participant$, text-muted)\r\n            }.Else{\r\n                Span($@1voting_template_not_found$, text-muted)\r\n            }\r\n        } \r\n    }.ElseIf(#is_valued#==1){\r\n        $@1is_valued$\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1id$=_id,$@1ecosystem_name$=_name,$@1metrics$=_metrics,$@1valued$=valued\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1ecosystems$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_metrics_update",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Data(aggregates, \"id,name\"){\r\n        max,$@1maximum$\r\n        min,$@1minimum$\r\n        avg,$@1average$\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Interval){\r\n                LangRes(@1interval)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Interval, Type: number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Aggregate){\r\n                LangRes(@1sampling_type)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Select(Name: Aggregate, Source: aggregates, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1update_metrics), Page: @1ecosystems_list, Class: btn btn-primary pull-right mt, Contract: @1MetricsUpdate)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ecosystems_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    P(Class: text-muted h6 m0 mb-sm, Body: \"$@1keys_must_be_separated$\")\r\n    Input(Name: Keys, Type: textarea)\r\n    Button(Contract: @1GroupsAssignList, Class: btn btn-primary pull-right mt, Page: @1groups_view, Body: $@1members_add$, Params: \"GroupId=#v_group_id#\", PageParams: \"v_group_id=#v_group_id#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"name\": \"Basic\", \"ecosystem\": 1}).Vars(application)\r\n\r\nIf(#Id#!=\"\"){\r\n    SetVar(v_group_id, #Id#)\r\n}\r\n\r\nIf(#v_group_id#>0){\r\n    DBFind(\"@1groups\", src_groups).Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#v_group_id#\"}).Columns(\"id,group_name,group_type,group_access,creator->account,deleted\").Vars(prefix)\r\n    If(#prefix_creator_account#==#account_id#){\r\n        SetVar(manager_id, 1)\r\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#prefix_deleted#==0)){\r\n        DBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #prefix_group_access#}}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1group)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Type: hidden, Name: GroupId, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_group_name, Value: LangRes(#prefix_group_name#))\r\n                Input(Name: input_prefix_group_name, Value: #var_prefix_group_name#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1type)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                SetVar(Name: var_prefix_group_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: groups_types, Index: #prefix_group_type#))\r\n                Input(Name: input_prefix_group_type, Value: #var_prefix_group_type#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1member)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(input-group){\r\n                    If(#MemberAccount#){\r\n                        Input(Name: account, Type: hidden, Value: #MemberAccount#)\r\n                        Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccount#)\r\n                    }.Else{\r\n                        Input(Name: account, Type: hidden, Value: 0)\r\n                        Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\r\n                    }\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1groups_assign,back_header=$@1assign$,Id=#v_group_id#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                    }.Style(\r\n                        .buttons {\r\n                            border: 1px solid #dde6e9;\r\n                            padding: 6px 16px;\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        If(#manager_id#>0){\r\n            Button(Body: LangRes(@1assign), Class: btn btn-primary pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\", Contract: @1GroupsAssign, Params: \"MemberAccount=Val(account)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nDBFind(\"@1roles\", src_roles).Columns(\"id,role_name\").Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Order(\"id\")\r\nIf(#back_page#==\"\"){\r\n   SetVar(back_page, \"@1groups_list\")\r\n}\r\n\r\nIf(#GroupId#==\"\"){\r\n    SetVar(title, $@1new_group$)\r\n    DBFind(\"@1buffer_data\").Columns(value).Where({\"ecosystem\": \"#ecosystem_id#\", \"key\": \"group_access\", \"account\": \"#account_id#\"}).Columns(\"id,key,account,ecosystem,value->groups_access,value->group_information,value->group_type,value->group_name\").Vars(buffer)\r\n    AppParam(Source: type_group, Ecosystem: 1, App: #application_id#, Name: groups_types)\r\n    If(And(#buffer_value_groups_access#!=\"NULL\",#buffer_value_groups_access#!=\"\",#buffer_value_groups_access#!=\"[]\")){\r\n        DBFind(\"@1roles\", src_roles_access).Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #buffer_value_groups_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}.Else{\r\n    SetVar(title, $@1edit_group$)\r\n    DBFind(\"@1groups\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#GroupId#\"}).Columns(\"id,group_name,group_type,group_info,group_access\").Vars(gr_e)\r\n    SetVar(type_group, AppParam(Ecosystem: 1, App: #application_id#, Name: groups_types, Index: #gr_e_group_type#))\r\n    If(And(#gr_e_group_access#!=\"NULL\",#gr_e_group_access#!=\"\",#gr_e_group_access#!=\"[]\")){\r\n        DBFind(\"@1roles\", src_roles_access).Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #gr_e_group_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#GroupId#==\"\"){\r\n                Input(Name: GroupName, Value: #buffer_value_group_name#).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: GroupName, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\r\n            }.Else{\r\n                Input(Name: eGroupName, Value: #gr_e_group_name#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1type)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#GroupId#==\"\"){\r\n                Select(Name: GroupType, Source: type_group, NameColumn: name, ValueColumn: id, Value: #buffer_value_group_type#)\r\n            }.Else{\r\n                Input(Name: eGroupType, Value: #type_group#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt text-right){\r\n            Label(){\r\n                LangRes(@1group_info)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#GroupId#==\"\"){\r\n                Input(Name: GroupInfo, Type: textarea, Value: #buffer_value_group_information#)\r\n            }.Else{\r\n                Input(Name: GroupInfo, Type: textarea, Value: #gr_e_group_info#)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1group_access)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1groups_create, Contract: @1GroupAccessManager, Params: \"ManagerRid=Val(roles_managers),Action=add,GroupId=#GroupId#\", PageParams: \"GroupId=#GroupId#\").Popup(50, #title#)\r\n                }\r\n            }\r\n            If(#ra_count#>0){\r\n                ForList(src_roles_access){\r\n                    SetVar(btn_class, \"bg-gray-lighter\")\r\n                    If(#id#==#role_id#){\r\n                        SetVar(btn_class, \"bg-primary\")\r\n                    }\r\n                    Button(Class: btn-xs #btn_class# mr-sm mb-sm, Page: @1groups_create, Contract: @1GroupAccessManager, Params: \"ManagerRid=#id#,Action=remove,GroupId=#GroupId#\", PageParams: \"GroupId=#GroupId#\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    If(#GroupId#==\"\"){\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1GroupsCreate)\r\n    }.Else{\r\n        Button(Body: LangRes(@1edit), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1GroupsCreate, Params:\"GroupId=#GroupId#\")\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: #back_page#)\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1groups_list).(this_table, @1groups)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1groups$)\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1group_desc$))\r\nAddToolButton(Page: @1groups_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_group$)\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"group_name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\"})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, $@1groups$)\r\n    Include(@1search)\r\n}\r\nDBFind(\"@1applications\").Columns(\"id,name\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nDBFind(#this_table#, src_groups).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,group_name,image_id,creator->account,creator->member_name,date_created,date_deleted,deleted,group_access,group_info,group_type\").Custom(_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text, \"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text, \"text-muted\").(style_link, \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_creator){\r\n    If(And(#creator.member_name# != NULL, #creator.member_name# != \"\")){\r\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_account=#creator.account#\"){\r\n            #creator.member_name#\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1groups_view, PageParams: \"v_group_id=#id#\"){\r\n        If(#image_id# > 0){\r\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #group_name#\r\n        }.Else{\r\n            Div(Class: #style_link#){\r\n                Span(Class: fa icon-settings fa-2x mr-sm)\r\n            }.Style(\r\n                display: inline-block;\r\n            )\r\n            Span(Class: btn-link text-bold pb-sm){\r\n                Span(Class: #style_link#, Body: #group_name#)\r\n            }.Style(\r\n                display: inline-block;\r\n                vertical-align: top;\r\n                padding-top: 7px;\r\n                padding-left: 4px;\r\n            )\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# small){\r\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        If(#deleted# == 1){\r\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    Span(Class: #style_text#){\r\n        If(#deleted# == 0){\r\n            LangRes(@1active)\r\n        }.Else{\r\n            LangRes(@1deleted)\r\n        }\r\n    }\r\n}.Custom(_access){\r\n    If(#creator.account# == #account_id#){\r\n        SetVar(access,done)\r\n    }.Else{\r\n        SetVar(access,)\r\n    }\r\n    If(And(#group_access#!=\"NULL\",#group_access# != \"\",#group_access#!=[])){\r\n        DBFind(\"@1roles\", src_access_list).Where({\"id\": {\"$in\": #group_access#}}).Columns(\"id,role_name\").Count(access_count).Order(\"role_name\")\r\n        Div(#style_text# breaker){\r\n            ForList(src_access_list){\r\n                If(#role_id# == #id#){\r\n                    SetVar(access,done)\r\n                }\r\n                If(#access_count# != #src_access_list_index#){\r\n                    Span(\"#role_name#,\",mr-sm)\r\n                }.Else{\r\n                    #role_name#\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right button-group text-nowrap){\r\n        If(#access# == done){\r\n            If(#deleted# == 0){\r\n                Button(Class: btn bg-gray-lighter, Contract: @1GroupsDelete, Params: \"Ops=D,GroupId=#id#\", Page: @1groups_list){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                Button(Class: btn bg-gray-lighter mh-sm, PageParams: \"GroupId=#id#\", Page: @1groups_create){\r\n                    Em(Class: text-default fa fa-1x fa-edit)\r\n                }.Popup(50, $@1edit_group$)\r\n            }.ElseIf(#deleted# == 1){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1GroupsDelete, Params: \"Ops=R,GroupId=#id#\", Page: @1groups_list){\r\n                    Em(Class: text-info fa fa-1x fa-recycle)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(type_group){\r\n    If(#deleted# == 0){\r\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: groups_types, Index:#group_type#))\r\n    }.Else{\r\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: groups_types, Index:#group_type#), Class: text-muted)\r\n    }\r\n}.Custom(join_group){\r\n    If(#deleted# == 0){\r\n        DBFind(\"@1groups_participants\").Columns(\"id,groups_info,groups_info->id,deleted,member,member->account\").Where({\"groups_info->id\": \"#id#\", \"deleted\": 0, \"member->account\": \"#account_id#\"}).Vars(j_l).Count(check_membership)\r\n        If(And(#group_type# == 1, #check_membership# == 0)){\r\n            Button(Body: $@1join_the_group$, Class: btn btn-link pull-right, Contract: @1GroupsAssign, Page: @1groups_view, PageParams: \"v_group_id=#id#\", Params: \"GroupId=#id#,MemberAccount=#account_id#\")\r\n        }.ElseIf(And(#group_type# == 1,#check_membership# == 1)){\r\n            Button(Body: $@1leave_the_group$, Class: btn btn-link pull-right, Contract: @1GroupsUnassign, Page: @1groups_list, Params:\"RowId=#j_l_id#\")\r\n        }.ElseIf(And(#group_type# == 2,#check_membership# == 0)){\r\n            Button(Body: $@1send_request$, Class: btn btn-link pull-right, Contract: @1GroupRequestMembership, Page: @1groups_view, PageParams:\"v_group_id=#id#\", Params: \"GroupId=#id#\")\r\n        }\r\n    }\r\n}.Custom(gr_info){\r\n    If(#deleted# == 0){\r\n        Span(Body: #group_info#)\r\n    }.Else{\r\n        Span(Body: #group_info#, Class: text-muted)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_groups, \"$@1group$=_name,$@1type$=type_group,$@1id$=_id,$@1group_info$=gr_info,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1access$=_access,=join_group,=_actions\")\r\n            }.ElseIf(#all_roles_count# > 0){\r\n                Div(Class: text-center h4 text-muted){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1groups$ $@1not_founded$\")\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1groups$ $@1not_founded$\")\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_request_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"page_params->gr_id,page_params->decide,sender->image_id,recipient->member_name,recipient->account,recipient->image_id,sender->account,sender->member_name,closed\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    If(#notific_page_params_decide# == 1){\r\n                        Span(Class: h3, Body: $@1your_request_approved$)\r\n                    }.ElseIf(#notific_page_params_decide# == -1){\r\n                        Span(Class: h3, Body: $@1your_request_denied$)\r\n                    }.Else{\r\n                        Span(Class: h3, Body: $@1request_group$)\r\n                    }\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                                    If(#notific_recipient_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#notific_recipient_member_name#}\r\n                                }.Else{\r\n                                    If(#notific_sender_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                            Span(Class: h5 text-bold, Body: #notific_recipient_account#)\r\n                        }.Else{\r\n                            Span(Class: h5 text-bold, Body: #notific_sender_account#)\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(\"@1groups\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_page_params_gr_id#\"}).Vars(group)\r\n                        Div(text-muted m0 h5, Body: $@1group$)\r\n                        Span(Class: h5 text-bold, Body: #group_group_name# (#group_id#))\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                                    Button(Class: btn btn-primary mh-sm, Body: $@1close$, Contract: @1NotificationsClose, Page: @1notifications_list, Params: \"NotificId=#notific_id#\")\r\n                                }.Else{\r\n                                    Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"NotificId=#notific_id#,Accept=0\")\r\n                                    Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"NotificId=#notific_id#,Accept=1\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#page_par#!=\"\"){\r\n    SetVar(Name: v_group_id, Value: #page_par#)\r\n}\r\n\r\nIf(#v_group_id# > 0){\r\n    SetVar(this_page, @1groups_view).(this_table, @1groups_participants)\r\n    Include(@1pager_header)\r\n\r\n    DBFind(\"@1groups\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#v_group_id#\"}).Columns(\"group_name,group_type,deleted,group_access,creator->account,deleted\").Vars(prefix)\r\n    If(#prefix_creator_account#==#account_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#prefix_deleted#==0)){\r\n        DBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #prefix_group_access#}}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    If(#manager_id#>0){\r\n        AddToolButton(Page: @1groups_assign, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\r\n        AddToolButton(Page: @1groups_add_members, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1members_add$).Popup(50, $@1add_members_to_group$)\r\n    }\r\n\r\n    SetTitle(\"$@1group$\": #prefix_group_name#)\r\n    Span(Class: h5 m0 mb ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1groups$, Page: @1groups_list)\r\n        Span(Class: text-muted mh-sm, Body: /)\r\n        Span(Class: text-muted, Body: #prefix_group_name#)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n    If(#search#){\r\n        SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"groups_info->id\": \"#v_group_id#\", \"member->member_name\": {\"$ilike\": \"#search#\"}})\r\n    }.Else{\r\n        SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"groups_info->id\": \"#v_group_id#\"})\r\n    }\r\n\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_group_id#)\r\n        Include(@1search)\r\n    }\r\n\r\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->account,groups_info,groups_info->id,member->member_name,member->image_id,appointed->account,appointed->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_appointed){\r\n        If(And(#appointed.account# != \"\", #appointed.account# != NULL)){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#appointed.account#\"){\r\n                Span(Body: #appointed.member_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_member){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#member.account#\"){\r\n            If(#member.image_id#>0){\r\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_address){\r\n        Span(Class: #style_text#, Body: #member.account#)\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        If(#deleted# == 1){\r\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(@1active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1GroupsUnassign, Params: \"RowId=#id#\", Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\"){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }.Count(count)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#count# > 0){\r\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\r\n                }\r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1members_list).(this_table, @1keys)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystem_members$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystem_members_list_desc$\"))\r\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(system_app)\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# != 1)){\r\n    AddToolButton(Title: $@1members_add$, Page:@1ecosystem_add_members, Icon: icon-plus).Popup(50, $@1ecosystem_add_members$)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0, \"$and\": [{\"account\": {\"$ilike\": \"#search#\"}}, {\"account\": {\"$neq\": \"#guest_account#\"}}]})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"account\": {\"$neq\": \"#guest_account#\"}, \"deleted\": 0})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1wallet))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem_id#\"}).Vars(custom)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"account\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    SetVar(Name: style_text, Value: \"text-normal\")\r\n    SetVar(Name: style_link, Value: \"text-primary\")\r\n    Span(Class: h6 text-muted, Body: #account#)\r\n    SetVar(m_account,)\r\n    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Vars(m)\r\n    If(#m_account#){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, #account#)\r\n    }\r\n}.Custom(custom_account){\r\n    If(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n        Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"v_account=#account#\"){\r\n            Span(Class: h5, Body: #account#)\r\n        }.Popup(Header: $@1tokens_send$, Width: \"50\")\r\n    }.Else{\r\n        Span(Class: h5, Body: #account#)\r\n    }\r\n}.Custom(custom_username){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px; width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1wallet$=custom_account\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list_admin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1members_list_admin).(this_table, @1keys)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1member_management$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1member_management_desc$\"))\r\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(system_app)\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# != 1)){\r\n    AddToolButton(Title: $@1members_add$, Page: @1ecosystem_add_members, Icon: icon-plus).Popup(50, $@1ecosystem_add_members$)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"account\": {\"$ilike\": \"#search#\"}}, {\"account\": {\"$neq\": \"#guest_account#\"}}]})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"account\": {\"$neq\": \"#guest_account#\"}})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1wallet))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem_id#\"}).Vars(custom)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"deleted\": 1, \"account\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text, \"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: h6 text-muted, Body: #account#)\r\n}.Custom(custom_account){\r\n    If(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n        Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"v_account=#account#,back_page=#this_page#\"){\r\n            Span(Class: h5 #style_text#, Body: #account#)\r\n        }.Popup(Header: $@1tokens_send$, Width: \"50\")\r\n    }.Else{\r\n        Span(Class: h5 #style_text#, Body: #account#)\r\n    }\r\n}.Custom(custom_username){\r\n    SetVar(m_account,)\r\n    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Vars(m)\r\n    If(#m_account#){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, #account#)\r\n    }\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px; width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\r\n                Span(#member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(actions){\r\n    If(#deleted#==0){\r\n        Button(Body: LangRes(@1delete), Class: btn-xs btn-link pull-right, Page: #this_page#, Params: \"MemberAccount=#account#\", Contract: @1DeleteMember).Alert(Text: \"$@1want_delete_account$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        If(#blocked#==0){\r\n            Button(Body: LangRes(@1block_account), Class: btn-xs btn-link pull-right, Page: #this_page#, Params: \"MemberAccount=#account#,Value=1\", Contract: @1BlockMember).Alert(Text: \"$@1want_block_account$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }.Else{\r\n            Button(Body: LangRes(@1unblock_account), Class: btn-xs btn-link pull-right, Page: #this_page#, Params: \"MemberAccount=#account#,Value=0\", Contract: @1BlockMember).Alert(Text: \"$@1want_unblock_account$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }.Else{\r\n        Span(Class: h6 text-muted pull-right, Body: $@1deleted$)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1id$=custom_id,$@1wallet$=custom_account,=actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(\"@1notifications\").Where({\"id\": \"#notific_id#\"}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->account,sender->member_name,closed\").Vars(notific)\r\n    DBFind(\"@1ecosystems\").Where({\"id\": \"#notific_page_params_ecosystem_id#\"}).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1membership_request$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        Span(Class: h5 text-bold, Body: #notific_sender_account#)\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1ecosystem))\r\n                        Span(Class: h5 text-bold, Body: `\"#ecosystem_name#\" (#ecosystem_id#)`)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"NotificId=#notific_id#,Accept=0\")\r\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"NotificId=#notific_id#,Accept=1\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\r\n    DBFind(\"@1ecosystems\").Where({\"id\": \"#notific_page_params_ecosystem_id#\"}).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1membership_request$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_recipient_image_id# > 0){\r\n                                    Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\r\n                            Div(Class: m0 h5 text-normal, Body: `\"#ecosystem_name#\" (#ecosystem_id#)`)\r\n                            Div(Class: m0 h5 text-bold, Body: $@1is_accepted$!)\r\n                        }\r\n                        If(#notific_closed# == 0){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-lg text-center){\r\n                                    Button(Class: btn btn-success, Body: $@1close$, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: \"@1default_page\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(list-group-item text-center){\r\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\r\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                            Div(Class: m0 h5 text-bold, Body: $@1is_rejected$!)\r\n                        }\r\n                        If(#notific_closed# == 0){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-lg text-center){\r\n                                    Button(Class: btn btn-danger, Body: $@1close$, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1default_page)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "message_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1message_create)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\nIf(#MemberAccount#){\r\n    SetVar(MemberAccountInputValue, #MemberAccount#)\r\n}.Else{\r\n    SetVar(MemberAccount, 0)\r\n    SetVar(MemberAccountInputValue,)\r\n}\r\n\r\nIf(#RoleId#){\r\n    SetVar(broadcast_type_value, \"role\")\r\n}.ElseIf(#GroupId#){\r\n    SetVar(broadcast_type_value, \"group\")\r\n}.Else{\r\n    SetVar(broadcast_type_value, \"member\")\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body: *)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Data(src_broadcast_type, \"type,translation\"){\r\n                member,$@1member$\r\n                role,$@1role$\r\n                group,$@1group$\r\n            }\r\n            Select(Name: broadcast_type, Source: src_broadcast_type, NameColumn: translation, ValueColumn: type, Value: #broadcast_type_value#)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1member)).(Class: text-danger, Body: *)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: MemberAccount, Type: hidden, Value: #MemberAccount#)\r\n            Div(input-group){\r\n                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccountInputValue#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams: \"back_page=#this_page#,back_header=$@1message_create$,EcosystemId=#EcosystemId#\").Popup(Header: $@1member$, Width: \"50\")\r\n                }\r\n            }\r\n        }\r\n    }.Show(\"broadcast_type=member\")\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1role)).(Class: text-danger, Body: *)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(RoleId == \"\"){\r\n                SetVar(RoleId, 0)\r\n                SetVar(RoleName,)\r\n            }.Else{\r\n                Input(Name: Rid, Type: hidden, Value: #RoleId#)\r\n            }\r\n            Div(input-group){\r\n                If(#RoleId# > 0){\r\n                    SetVar(Id, #RoleId#)\r\n                    DBFind(\"@1roles\").WhereId(#RoleId#).Columns(\"role_name\").Vars(r)\r\n                }\r\n                Input(Name: m_name, Disabled: 1, Value: #r_role_name#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_role, PageParams: \"back_page=@1message_create,back_header=$@1message_create$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1role$, Width: \"50\")\r\n                }\r\n            }\r\n        }\r\n    }.Show(\"broadcast_type=role\")\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1group)).(Class: text-danger, Body: *)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(GroupId == \"\"){\r\n                SetVar(GroupId, 0)\r\n                SetVar(GroupName,)\r\n            }.Else{\r\n                Input(Name: GroupId, Type: hidden, Value: #GroupId#)\r\n            }\r\n            Div(input-group){\r\n                If(#GroupId# > 0){\r\n                    SetVar(Id, #GroupId#)\r\n                    DBFind(\"@1groups\").WhereId(#GroupId#).Columns(\"group_name\").Vars(g)\r\n                }\r\n                Input(Name: m_name, Disabled: 1, Value: #g_group_name#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_group, PageParams: \"back_page=@1message_create,back_header=$@1message_create$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1group$, Width: \"50\")\r\n                }\r\n            }\r\n        }\r\n    }.Show(\"broadcast_type=group\")\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1message_subject)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Header, Value: \"\", Placeholder: $@1message_subject_type_here$)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1message_text)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Type: Hidden, Name: EcosystemId, Value: \"#ecosystem_id#\")\r\n            Input(Type: Hidden, Name: Sender, Value: \"1\")\r\n            Input(Type: Hidden, Name: Icon, Value: \"icon-speech\")\r\n            Input(Type: Hidden, Name: Params, Value: `{\"type\": \"message\"}`)\r\n            Input(Type: Hidden, Name: Page, Value: \"@1message_view\")\r\n            Input(Type: textarea, Name: Body, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12){\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"Rid=0,GroupId=0,CurrentRid=#role_id#\")\r\n            }.Show(\"broadcast_type=member\")\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"MemberAccount=0,GroupId=0,CurrentRid=#role_id#,Closure=2\")\r\n            }.Show(\"broadcast_type=role\")\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"MemberAccount=0,Rid=0,CurrentRid=#role_id#\")\r\n            }.Show(\"broadcast_type=group\")\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: @1messages_list)\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons {\r\n        border: 1px solid #dde6e9;\r\n        padding: 6px 16px;\r\n    }\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "message_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#notific_id# > 0){\r\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"id,sender->account,sender->member_name,sender->image_id,recipient->account,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed\").Vars(message)\r\n    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#message_sender_account#\"}).Vars(highlighted)\r\n    If(#highlighted_account#){\r\n        SetVar(message_sender_member_name, #highlighted_member_name#)\r\n        SetVar(message_sender_image_id, #highlighted_image_id#)\r\n    }\r\n\r\n    If(#message_page_params_thread# > 0){\r\n        SetVar(thread, #message_page_params_thread#)\r\n        DBFind(\"@1notifications\",src_thread).Where({\"ecosystem\": \"#ecosystem_id#\", \"page_params->thread\": \"#message_page_params_thread#\"}).Order(\"id\").Count(\"thread_quantity\").Columns(\"id,sender->account,sender->member_name,sender->image_id,notification->body,date_created\")\r\n        DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#message_page_params_thread#\"}).Columns(\"id,sender->account,sender->member_name,sender->image_id,recipient->account,notification->body,date_created\").Vars(init_message)\r\n    }.Else{\r\n        SetVar(thread, #message_id#)\r\n        DBFind(\"@1notifications\",src_thread).Where({\"ecosystem\": \"#ecosystem_id#\", \"page_params->thread\": \"#message_id#\"}).Order(\"id\").Count(\"thread_quantity\").Columns(\"id,sender->account,sender->member_name,sender->image_id,notification->body,date_created\")\r\n        DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#message_id#\"}).Columns(\"id,sender->account,sender->member_name,sender->image_id,recipient->account,notification->body,date_created\").Vars(init_message)\r\n    }\r\n    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#init_message_sender_account#\"}).Vars(starter)\r\n    If(#starter_account#){\r\n        SetVar(init_message_sender_member_name, #starter_member_name#)\r\n        SetVar(init_message_sender_image_id, #starter_image_id#)\r\n    }\r\n\r\n    If(#init_message_sender_account# != #account_id#){\r\n        SetVar(reply_recipient, #init_message_sender_account#)\r\n    }.Else{\r\n        SetVar(reply_recipient, #init_message_recipient_account#)\r\n    }\r\n    If(#message_notification_header# == \"\"){\r\n        SetVar(thread_name, $@1message_subject_empty$)\r\n    }.Else{\r\n        SetVar(thread_name, #message_notification_header#)\r\n    }\r\n\r\n    SetTitle($@1messenger$)\r\n    Span(Class: h5 m0 ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1messenger$, Page: @1messages_list)\r\n        Span(Class: text-muted mh, Body: /)\r\n        Span(Class: text-muted, Body: $@1message_view$)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    Form(){\r\n        Div(content-wrapper){\r\n            Div(row){\r\n                Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                    Form(panel panel-primary){\r\n                        Div(text-center pt){\r\n                            If(#message_sender_account# == #account_id#){\r\n                                Span(Class: h4 text-bold, Body: LangRes(@1message_from_you))\r\n                            }.Else{\r\n                                Span(Class: h4 text-bold, Body: LangRes(@1message_from) #message_sender_member_name#)\r\n                            }\r\n                        }\r\n                        Div(panel-body pt pb){\r\n                            Div(list-group-item wrapper-block){\r\n                                Div(avatar-block text-center){\r\n                                    LinkPage(Page: @1profile_view, PageParams: \"v_account=#message_sender_account#\"){\r\n                                        If(#message_sender_image_id# > 0){\r\n                                            Image(Src: Binary().ById(#message_sender_image_id#), Class: img-circle avatar)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-3x)\r\n                                        }\r\n                                        Div(preview m0 h5){#message_sender_member_name#}\r\n                                    }\r\n                                }\r\n                                Div(message-block){\r\n                                    Span(Class: h5, Body: #message_notification_body#)\r\n                                }\r\n                                Div(datetime-block text-muted){\r\n                                    Span(Class: mb-sm h6, Body: DateTime(#message_date_created#,HH:MI DD.MM.YYYY))\r\n                                }\r\n                            }\r\n                            Div(row mt-lg){\r\n                                Div(col-md-12 text-left){\r\n                                    Label(){\r\n                                        If(#message_sender_account# != #account_id#){\r\n                                            Span(Body: LangRes(@1reply_text))\r\n                                        }.Else{\r\n                                            Span(Body: LangRes(@1message_text))\r\n                                        }\r\n                                    }\r\n                                    Input(Type: Hidden, Name: MemberAccount, Value: \"#reply_recipient#\")\r\n                                    Input(Type: Hidden, Name: EcosystemId, Value: \"#ecosystem_id#\")\r\n                                    Input(Type: Hidden, Name: Sender, Value: \"1\")\r\n                                    Input(Type: Hidden, Name: Icon, Value: \"icon-speech\")\r\n                                    Input(Type: Hidden, Name: Params, Value: `{\"type\":\"message\",\"thread\":\"#thread#\"}`)\r\n                                    Input(Type: Hidden, Name: Page, Value: \"@1message_view\")\r\n                                    Input(Type: Hidden, Name: Header, Value: \"#thread_name#\")\r\n                                    Input(Type: textarea, Name: Body, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n                                }\r\n                            }\r\n                            If(#message_sender_account# == #account_id#){\r\n                                SetVar(send_button, $@1send$)\r\n                            }.Else{\r\n                                SetVar(send_button, $@1reply$)\r\n                            }\r\n                            If(And(#message_closed# == 0, Or(#message_sender_account# != #account_id#, #message_recipient_account# == #account_id#))){\r\n                                Div(mt text-right){\r\n                                    Button(Body: LangRes(@1mark_read), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1messages_list)\r\n                                    Button(Body: #send_button#, Class: btn btn-primary, Contract: @1NotificationsSend, Params: \"CurrentRid=#role_id#\", Page: @1message_view, PageParams: \"notific_id=#message_id#\").CompositeContract(@1NotificationsClose, [{\"NotificId\": #notific_id#}])\r\n                                }\r\n                            }.Else{\r\n                                Div(mt text-right){\r\n                                    Button(Body: #send_button#, Class: btn btn-primary, Contract: @1NotificationsSend, Params: \"CurrentRid=#role_id#\", Page: @1message_view, PageParams: \"notific_id=#message_id#\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(#thread_quantity# > 0){\r\n                Div(row){\r\n                    Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: h4 text-bold, Body: #thread_name#)\r\n                        }\r\n                        Div(list-group-item wrapper-block){\r\n                            Div(avatar-block text-center){\r\n                                LinkPage(Page: @1profile_view, PageParams: \"v_account=#init_message_sender_account#\"){\r\n                                    If(#init_message_sender_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#init_message_sender_image_id#), Class: img-circle avatar)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-3x)\r\n                                    }\r\n                                    Div(preview m0 h5){#init_message_sender_member_name#}\r\n                                }\r\n                            }\r\n                            Div(message-block){\r\n                                Span(Class: h5, Body: #init_message_notification_body#)\r\n                            }\r\n                            Div(datetime-block text-muted){\r\n                                Span(Class: badge mr, Body: 1)\r\n                                Span(Class: mb-sm h6, Body: DateTime(#init_message_date_created#,HH:MI DD.MM.YYYY))\r\n                            }\r\n                        }\r\n                        ForList(src_thread){\r\n                            Div(list-group-item wrapper-block){\r\n                                Div(avatar-block text-center){\r\n                                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#sender.account#\"}).Vars(thread_message)\r\n                                    If(#thread_message_account# == \"\"){\r\n                                        SetVar(thread_message_member_name, #sender.member_name#)\r\n                                        SetVar(thread_message_image_id, #sender.image_id#)\r\n                                    }\r\n                                    LinkPage(Page: @1profile_view, PageParams: \"v_account=#sender.account#\"){\r\n                                        If(#thread_message_image_id# > 0){\r\n                                            Image(Src: Binary().ById(#thread_message_image_id#), Class: img-circle avatar)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-3x)\r\n                                        }\r\n                                        Div(preview m0 h5){#thread_message_member_name#}\r\n                                    }\r\n                                }\r\n                                Div(message-block){\r\n                                    Span(Class: h5, Body: #notification.body#)\r\n                                }\r\n                                Div(datetime-block text-muted){\r\n                                    Span(Class: badge mr, Body: Calculate(#src_thread_index# + 1))\r\n                                    Span(Class: mb-sm h6, Body: DateTime(#date_created#, HH:MI DD.MM.YYYY))\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .preview {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n        .wrapper-block {min-height: 80px;}\r\n        .avatar-block {\r\n            position: absolute;\r\n            width: 70px;\r\n        }\r\n        .message-block {\r\n            margin-left: 85px;\r\n            margin-bottom: 15px;\r\n            }\r\n        .datetime-block {\r\n            position: absolute;\r\n            bottom: 5px;\r\n            right: 10px;\r\n        }\r\n        .avatar {\r\n            max-width: 42px;\r\n            max-height: 42px;\r\n            border: 1px solid #bbb;\r\n        }\r\n        .badge {margin-top: -2px;}\r\n    )\r\n}.Else{\r\n    Div(col-md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "messages_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1notifications\",threads).Where({\"ecosystem\": \"#ecosystem_id#\", \"page_params->type\": \"message\", \"$or\": [{\"sender->account\": \"#account_id#\"}, {\"recipient->account\": \"#account_id#\"}]}).Order({\"id\": \"-1\"}).Limit(250).Count(threads_count).Columns(\"id,sender->account,sender->member_name,sender->image_id,recipient->account,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed\")\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n            Div(list-group-item text-center p0){\r\n                Span(Class: h4 text-bold vc, Body: LangRes(@1message_active_threads))\r\n                Button(Class: btn-xs btn-link plus-button p0 b0, Page: @1message_create){\r\n                    Span(Class: fa fa-2x icon-plus vc)\r\n                }.Popup(50, $@1message_create$)\r\n            }.Style(\r\n                .plus-button {\r\n                    position: absolute;\r\n                    right: 10px;\r\n                }\r\n            )\r\n            If(#threads_count# > 0){\r\n                ForList(threads){\r\n                    If(#page_params.thread# > 0){\r\n                        DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"page_params->thread\": \"#page_params.thread#\"}).Order({\"id\": \"-1\"}).Limit(1).Columns(\"id\").Vars(last)\r\n                    }.Else{\r\n                        DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"page_params->thread\": \"#id#\"}).Count(thread_depth)\r\n                    }\r\n                    If(Or(#id# == #last_id#, #thread_depth# == 0)){\r\n                        If(And(#closed# == 0, Or(#sender.account# != #account_id#, #recipient.account# == #account_id#))){\r\n                            SetVar(status, \"unread\")\r\n                        }.Else{\r\n                            SetVar(status, \"read\")\r\n                        }\r\n                        Div(list-group-item col-sm-12 thread-block #status#){\r\n                            Div(avatar-block text-center){\r\n                                DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#id#\"}).Columns(\"sender->account,recipient->account,sender->member_name,recipient->member_name,sender->image_id,recipient->image_id\").Vars(init_message)\r\n                                If(#init_message_sender_account# != #account_id#){\r\n                                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#init_message_sender_account#\"}).Vars(talker)\r\n                                    If(#talker_account#){\r\n                                        SetVar(talker_name, #talker_member_name#)\r\n                                        SetVar(talker_picture, #talker_image_id#)\r\n                                    }.Else{\r\n                                        SetVar(talker_account, #init_message_sender_account#)\r\n                                        SetVar(talker_name, #init_message_sender_member_name#)\r\n                                        SetVar(talker_picture, #init_message_sender_image_id#)\r\n                                    }\r\n                                }.Else{\r\n                                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#init_message_recipient_account#\"}).Vars(talker)\r\n                                    If(#talker_account#){\r\n                                        SetVar(talker_name, #talker_member_name#)\r\n                                        SetVar(talker_picture, #talker_image_id#)\r\n                                    }.Else{\r\n                                        SetVar(talker_account, #init_message_recipient_account#)\r\n                                        SetVar(talker_name, #init_message_recipient_member_name#)\r\n                                        SetVar(talker_picture, #init_message_recipient_image_id#)\r\n                                    }\r\n                                }\r\n                                LinkPage(Page: @1profile_view, PageParams: \"v_account=#talker_account#\"){\r\n                                    If(#talker_picture# > 0){\r\n                                        Image(Src: Binary().ById(#talker_picture#), Class: img-circle avatar)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-3x)\r\n                                    }\r\n                                    Div(preview m0 h5){#talker_name#}\r\n                                }\r\n                            }\r\n                            Div(message-block){\r\n                                LinkPage(Page: @1message_view, PageParams: \"notific_id=#id#\"){\r\n                                    If(#notification.header# == \"\"){\r\n                                        Div(Class: preview h4 m0, Body: LangRes(@1message_subject_empty))\r\n                                    }.Else{\r\n                                        Div(Class: preview h4 m0, Body: #notification.header#)\r\n                                    }\r\n                                    If(#sender.account# == #account_id#){\r\n                                        Div(Class: preview text-muted, Body: $@1you$: #notification.body#)\r\n                                    }.Else{\r\n                                        Div(Class: preview text-muted, Body: #notification.body#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(datetime-block text-muted){\r\n                                If(#status# == \"unread\"){\r\n                                    Span(Class: badge mr, Body: LangRes(@1unread))\r\n                                }\r\n                                Span(Class: h6, Body: DateTime(#date_created#, HH:MI DD.MM.YYYY))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(list-group-item text-center text-muted){\r\n                    $@1messages_empty$\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .thread-block {height: 80px;}\r\n        .avatar-block {\r\n            position: absolute;\r\n            width: 70px;\r\n        }\r\n        .message-block {margin-left: 85px;}\r\n        .datetime-block {\r\n            position: absolute;\r\n            bottom: 5px;\r\n            right: 10px;\r\n        }\r\n        .preview {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n        .avatar {\r\n            max-width: 42px;\r\n            max-height: 42px;\r\n            border: 1px solid #bbb;\r\n        }\r\n        .badge {margin-top: -2px;}\r\n        .unread {background-color: #f7fafe;}\r\n        .vc {line-height: 44px;}\r\n    )\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1notifications\",notification_singles).Where({\"ecosystem\": \"#ecosystem_id#\", \"closed\": 0, \"notification->type\": 1, \"recipient->account\": \"#account_id#\"}).Columns(\"id,page_name,notification->icon,notification->header,notification->popup,notification->body\").Count(count_singles)\r\n\r\nDBFind(\"@1notifications\",notification_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"closed\": 0, \"notification->type\": 2, \"recipient->role_id\": \"#role_id#\", \"$or\": [{\"date_start_processing\": 0}, {\"processing_info->account\": \"#account_id#\"}]}).Columns(\"id,page_name,notification->icon,notification->header,notification->popup,notification->body,recipient->role_id\").Count(count_current_role)\r\n\r\nSetVar(limit,10).(limit_count,#limit#)\r\nSetVar(remaining,Calculate(#count_singles#+#count_current_role#-#limit#))\r\n\r\nIf(And(#limit_count#>0,#count_singles#>0)){\r\n    ForList(notification_singles){\r\n        If(#limit_count#>0){\r\n            SetVar(limit_count,Calculate(#limit_count#-1))\r\n            If(#notification.popup#==1){\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }.Else{\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nIf(And(#limit_count#>0,#count_current_role#>0)){\r\n    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_id#\"}).Columns(\"role_name\").Vars(role)\r\n    Div(dropdown-heading b0){\r\n        $@1role_notifics$ (#role_role_name#)\r\n    }\r\n    ForList(notification_roles){\r\n        If(#limit_count#>0){\r\n            SetVar(limit_count,Calculate(#limit_count#-1))\r\n            If(#notification.popup#==1){\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }.Else{\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nIf(#remaining#>0){\r\n    Button(Class: btn btn-block btn-default, Page: @1notifications_list){\r\n        $@1notifications_show_all$ (#remaining# $@1more$)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_broadcast",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(system_app)\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nDBFind(\"@1ecosystems\").Count(ecos_count)\r\nForm(){\r\n    If(And(#role_id# == #role_admin#, #ecosystem_id# == 1, #ecos_count# > 1)){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Value: $@1ecosystems_administrators$, Disabled: true)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Header)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1body_text)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Body, Type: textarea).Style(resize: vertical;)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1popup))\r\n                }\r\n            }.Style(line-height: 18px;)\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Popup, Type: checkbox, Value: false, Class: mt-sm)\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-sm-12 alert alert-warning text-center){\r\n            If(#role_id# != #role_admin#){\r\n                LangRes(@1only_admin_action)\r\n            }\r\n            If(#ecosystem_id#!=1){\r\n                LangRes(@1only_first_ecosystem_action)\r\n            }\r\n            If(#ecos_count#==1){\r\n                LangRes(@1other_ecosystems_not_found)\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: @1notifications_list, Contract: @1NotificationsBroadcast, Params: \"RoleId=#role_id#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#page_par#!=\"\"){\r\n    SetVar(Name: type, Value: #page_par#)\r\n}\r\n\r\nIf(Or(#type#==0,#type#==1)){\r\n}.Else{\r\n    SetVar(Name: type, Value: 0)\r\n}\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1notifications_list_desc$\"))\r\nDiv(btn-group ml-lg){\r\n    If(#type#==0){\r\n        Button(Body: Em(Class: fa fa-bell-o) $@1personal_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter ml-sm)\r\n    }.Else{\r\n        Button(Body: Em(Class: fa fa-bell-o) $@1personal_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray ml-sm)\r\n    }\r\n    If(#type#==1){\r\n        Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter ml-sm)\r\n    }.Else{\r\n        Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray ml-sm)\r\n    }\r\n}\r\nIf(#type#==0){\r\n    Include(@1notifications_single)\r\n}\r\nIf(#type#==1){\r\n    Include(@1notifications_roles)\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_roles_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1notifications_roles_send).(back_page,@1notifications_list)\r\nDBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: EcosystemId, Type:hidden, Value: #EcosystemId#)\r\n            Div(input-group){\r\n                DBFind(\"@1ecosystems\").Columns(\"id,name\").WhereId(#EcosystemId#).Vars(e)\r\n                Input(Name: e_name, Disabled: 1, Value: #e_name#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_ecosystem, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#EcosystemId#,Type=ALL_LIST\").Popup(Header: $@1ecosystem$, Width: \"40\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(\"@1roles\", source_roles).Where({\"ecosystem\": \"#EcosystemId#\", \"deleted\": 0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#>0){\r\n                Select(Name: Rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n            }.Else{\r\n                Div(mt-sm){\r\n                    $@1roles$ $@1not_founded$\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1closure_type)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_closure, Source: src_closure_type)\r\n            Select(Name: Closure, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\r\n            Select(Name: Sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\r\n            Select(Name: Icon, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: Header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1body_text))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Body, Type: textarea, Value: \"Body text\").Style(resize: vertical;)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Page, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: Page, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"Popup=false\")\r\n        Div(col-md-9 text-left){\r\n            Input(Name: PagePopup, Value: \"@1notifications_testpage_popup\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: PagePopup, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"Popup=true\")\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1params))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Params, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1popup))\r\n            }\r\n        }.Style(line-height: 18px;)\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Popup, Type: checkbox, Value: false, Class: mt-sm)\r\n        }\r\n    }\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"CurrentRid=#role_id#,Page=Val(Page)\")\r\n    }.Show(\"Popup=false\")\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"CurrentRid=#role_id#,Page=Val(PagePopup)\")\r\n    }.Show(\"Popup=true\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"type=1\")\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_show",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nSetTitle($@1notifications_view$)\r\n\r\nSetVar(type,0).(header,).(body,)\r\nDiv(content-wrapper){\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\r\n        SetVar(type,#note_sender_type#)\r\n        SetVar(header,#note_notification_header#)\r\n        SetVar(body,#note_notification_body#)\r\n\r\n\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading text-center){\r\n                        #header#\r\n                    }\r\n                    Div(panel-body){\r\n                        #body#\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        If(#type# == 1){\r\n                            If(#note_closed# == 0){\r\n                                Button(Body: LangRes(@1ok), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1default_page)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1default_page)\r\n                            }\r\n                        }.ElseIf(#type# == 2){\r\n                            If(#note_closed#==0){\r\n                                If(#note_date_start_processing#==\"\"){\r\n                                    Button(Body: LangRes(@1ok), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"NotificId=#notific_id#\", Page: @1notifications_show)\r\n                                }.Else{\r\n                                    Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1default_page)\r\n                                }\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1default_page)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_single_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1notifications_single_send).(back_page,@1notifications_list)\r\nDBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\nIf(#MemberAccount#){\r\n    SetVar(MemberAccountInputValue, #MemberAccount#)\r\n}.Else{\r\n    SetVar(MemberAccount, 0)\r\n    SetVar(MemberAccountInputValue,)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: EcosystemId, Type: hidden, Value: #EcosystemId#)\r\n            Div(input-group){\r\n                DBFind(\"@1ecosystems\").Columns(\"id,name\").WhereId(#EcosystemId#).Vars(e)\r\n                Input(Name: e_name, Disabled: 1, Value: #e_name#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_ecosystem, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#EcosystemId#,Type=ALL_LIST\").Popup(Header: $@1ecosystem$, Width: \"40\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: MemberAccount, Type: hidden, Value: #MemberAccount#)\r\n            Div(input-group){\r\n                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccountInputValue#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#EcosystemId#\").Popup(Header: $@1member$, Width: \"50\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\r\n            Select(Name: Sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\r\n            Select(Name: Icon, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: Header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1body_text))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Body, Type: textarea, Value: \"Body text\").Style(resize: vertical;)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Page, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: Page, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"Popup=false\")\r\n        Div(col-md-9 text-left){\r\n            Input(Name: PagePopup, Value: \"@1notifications_testpage_popup\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: PagePopup, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"Popup=true\")\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1params))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Params, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1popup))\r\n            }\r\n        }.Style(line-height: 18px;)\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Popup, Type: checkbox, Value: false, Class: mt-sm)\r\n        }\r\n    }\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1NotificationsSend, Params: \"CurrentRid=#role_id#,Page=Val(Page)\")\r\n    }.Show(\"Popup=false\")\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1NotificationsSend, Params: \"CurrentRid=#role_id#,Page=Val(PagePopup)\")\r\n    }.Show(\"Popup=true\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"id,sender->type,notification->type,notification->header,notification->body,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\r\n        SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_body,#prefix_notification_body#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n        SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_body,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(){\r\n                Div(list-group-item text-center){\r\n                    Span(Class: h3, Body: #notific_header#)\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1id))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_id#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1type))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            If(#notification_type# > 0){\r\n                                Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_type, Index: #notification_type#))\r\n                            }.Else{\r\n                                Span(Class: h4, Body: #notification_type#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1sender))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            If(#sender_type# > 0){\r\n                                If(#sender_type# == 1){\r\n                                    Span(Class: h4, Body: $@1member$)\r\n                                }\r\n                                If(#sender_type# == 2){\r\n                                    Span(Class: h4, Body: $@1role$)\r\n                                }\r\n                            }.Else{\r\n                                Span(Class: h4, Body: #sender_type#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1body_text))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_body#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1value_number))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_val_int#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1value_string))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_val_str#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item text-right){\r\n                    If(#prefix_closed# == 0){\r\n                        If(#notification_type# == 1){\r\n                            Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                        }.ElseIf(#notification_type# == 2){\r\n                            If(#prefix_date_start_processing# == 0){\r\n                                Button(Body: LangRes(@1begin), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"NotificId=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        If(#notification_type# == 1){\r\n                            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=0\")\r\n                        }.ElseIf(#notification_type# == 2){\r\n                            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage_popup",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nIf(#notific_id#>0){\r\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"id,sender->type,notification->type,notification->header,notification->body,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\r\n    SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_body,#prefix_notification_body#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n    SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_body,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\r\n}\r\n\r\nForm(){\r\n    Div(list-group-item text-center){\r\n        Span(Class: h3, Body: #notific_header#)\r\n    }\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1id))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_id#)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1type))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                If(#notification_type# > 0){\r\n                    Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_type, Index: #notification_type#))\r\n                }.Else{\r\n                    Span(Class: h4, Body: #notification_type#)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1sender))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                If(#sender_type# > 0){\r\n                    If(#sender_type# == 1){\r\n                        Span(Class: h4, Body: $@1member$)\r\n                    }\r\n                    If(#sender_type# == 2){\r\n                        Span(Class: h4, Body: $@1role$)\r\n                    }\r\n                }.Else{\r\n                    Span(Class: h4, Body: #sender_type#)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1body_text))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_body#)\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1value_number))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_val_int#)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1value_string))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_val_str#)\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item text-right){\r\n        If(#prefix_closed# == 0){\r\n            If(#notification_type# == 1){\r\n                Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.ElseIf(#notification_type# == 2){\r\n                If(#prefix_date_start_processing# == 0){\r\n                    Button(Body: LangRes(@1begin), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"NotificId=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }.Else{\r\n                    Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }\r\n            }\r\n        }.Else{\r\n            If(#notification_type# == 1){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=0\")\r\n            }.ElseIf(#notification_type# == 2){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "platform_apps_settings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(app)\r\n\r\nSetVar(this_page, \"@1platform_apps_settings\").(role_admin,0).(role_consortium_member,0).(role_delegate,0).(role_developer,0).(role_investor_with_voting_rights,0).(role_creates_roles,0)\r\nSetVar(role_admin, AppParam(App: #app_id#, Name: \"role_admin\"))\r\nSetVar(role_consortium_member, AppParam(App: #app_id#, Name: \"role_consortium_member\"))\r\nSetVar(role_delegate, AppParam(App: #app_id#, Name: \"role_delegate\"))\r\nSetVar(role_developer, AppParam(App: #app_id#, Name: \"role_developer\"))\r\nSetVar(role_investor_with_voting_rights, AppParam(App: #app_id#, Name: \"role_investor_with_voting_rights\"))\r\nSetVar(role_creates_roles, AppParam(App: #app_id#, Name: \"role_creates_roles\"))\r\n\r\nDBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Columns(\"role_name,id\").Count(all_roles)\r\n\r\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\r\n\r\nDiv(content-wrapper){\r\n    If(And(#ecosystem_id# == 1, #all_roles# == 0)){\r\n        Div(row){\r\n            Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(text-center text-bold h4 m0){\r\n                            LangRes(@1pa_deploy)\r\n                        }\r\n                        Div(text-center text-muted){\r\n                            LangRes(@1pa_deploy_description)\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $@1deploy$, Class: btn btn-primary, Page: #this_page#, Contract: @1Deploy)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(@1pa_settings)\r\n                    }\r\n                    Div(text-center text-muted){\r\n                        LangRes(@1pa_settings_description)\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Admin\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleAdmin, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_admin#)\r\n                            Div(m0 h6 text-muted){\r\n                                SetVar(r_name, $@1role_not_found$)\r\n                                If(#role_admin# > 0){\r\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_admin#\"}).Columns(\"role_name\").Vars(r)\r\n                                    SetVar(r_name, #r_role_name#)\r\n                                }\r\n                                LangRes(@1current_value): #r_name#\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Developer\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleDeveloper, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_developer#)\r\n                            Div(m0 h6 text-muted){\r\n                                SetVar(r_name, $@1role_not_found$)\r\n                                If(#role_developer# > 0){\r\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_developer#\"}).Columns(\"role_name\").Vars(r)\r\n                                    SetVar(r_name, #r_role_name#)\r\n                                }\r\n                                LangRes(@1current_value): #r_name#\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#ecosystem_id# == 1){\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Consortium Member\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleConsortiumMember, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_consortium_member#)\r\n                                Div(m0 h6 text-muted){\r\n                                    SetVar(r_name, $@1role_not_found$)\r\n                                    If(#role_consortium_member# > 0){\r\n                                        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_consortium_member#\"}).Columns(\"role_name\").Vars(r)\r\n                                        SetVar(r_name, #r_role_name#)\r\n                                    }\r\n                                    LangRes(@1current_value): #r_name#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Delegate\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleDelegate, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_delegate#)\r\n                                Div(m0 h6 text-muted){\r\n                                    SetVar(r_name, $@1role_not_found$)\r\n                                    If(#role_delegate# > 0){\r\n                                        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_delegate#\"}).Columns(\"role_name\").Vars(r)\r\n                                        SetVar(r_name, #r_role_name#)\r\n                                    }\r\n                                    LangRes(@1current_value): #r_name#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Investor with Voting Rights\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleInvestor, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_investor_with_voting_rights#)\r\n                                Div(m0 h6 text-muted){\r\n                                    SetVar(r_name, $@1role_not_found$)\r\n                                    If(#role_investor_with_voting_rights# > 0){\r\n                                        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_investor_with_voting_rights#\"}).Columns(\"role_name\").Vars(r)\r\n                                        SetVar(r_name, #r_role_name#)\r\n                                    }\r\n                                    LangRes(@1current_value): #r_name#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                LangRes(@1role_creates_roles)\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleCreatesRoles, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_creates_roles#)\r\n                            Div(m0 h6 text-muted){\r\n                                SetVar(r_name, $@1role_not_found$)\r\n                                If(#role_creates_roles# > 0){\r\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_creates_roles#\"}).Columns(\"role_name\").Vars(r)\r\n                                    SetVar(r_name, #r_role_name#)\r\n                                }\r\n                                LangRes(@1current_value): #r_name#\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: @1PlatformAppsSettings)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(member_image_id, 0)\r\nDBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account_id#\"}).Columns(\"account,member_name,image_id,member_info->information\").Vars(member)\r\nDBFind(\"@1buffer_data\").Columns(\"value->id,value->member_name,value->image_id,value->member_info_information\").Where({\"ecosystem\": \"#ecosystem_id#\", \"key\": \"edit_profile_form\", \"account\": \"#account_id#\"}).Vars(buffer)\r\nIf(#buffered# == 1){\r\n    SetVar(member_member_name, #buffer_value_member_name#)\r\n    SetVar(member_member_info_information, #buffer_value_member_info_information#)\r\n}\r\nIf(#uploaded# == 1){\r\n    DBFind(\"@1buffer_data\").Columns(\"value->binary_id\").Where({\"ecosystem\": \"#ecosystem_id#\", \"key\": \"avatar\", \"account\": \"#account_id#\"}).Vars(avatar)\r\n    SetVar(member_image_id, #avatar_value_binary_id#)\r\n}.ElseIf(#buffered# == 1){\r\n    SetVar(member_image_id, #buffer_value_image_id#)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-4 mt-sm text-center){\r\n            SetVar(ParamNames, \"id;member_name;image_id;member_info_information\")\r\n            Button(Class: btn btn-link, Page: @1upload_page, PageParams: \"back_page=@1profile_edit,back_page_popup=50,back_page_popup_header=$@1editing_profile$,application_id=#application_id#,buffer_key=avatar\", Contract: @1FormStateSave, Params: \"AppId=#application_id#,FormName=edit_profile_form,ParamNames=#ParamNames#,Param1=#account_id#,Param2=Val(Name),Param3=Val(ImageId),Param4=Val(Info)\"){\r\n                If(#member_image_id# > 0){\r\n                    Input(Name: ImageId, Type: hidden, Value: #member_image_id#)\r\n                    Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\r\n                    Div(Body: $@1edit_avatar$)\r\n                }.Else{\r\n                    Input(Name: ImageId, Type: hidden, Value: 0)\r\n                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\r\n                    Div(Body: $@1edit_avatar$)\r\n                }\r\n            }.Popup(Header: $@1avatar$, Width: 30)\r\n        }\r\n        Div(col-md-8 mt-sm){\r\n            Div(form-group){\r\n                Label(){\r\n                    Span(Body: LangRes(@1member_name)).(Class: text-danger, Body: *)\r\n                }\r\n                If(#member_account#){\r\n                    Input(Name: Name, Value: #member_member_name#, Disabled: true)\r\n                }.Else{\r\n                    Input(Name: Name, Value: #member_member_name#).Validate(minLength:5, maxLength:20)\r\n                    InputErr(Name: Name, minLength: $@1validate_member_name$, maxLength: $@1validate_member_name$)\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Label(){\r\n                    Span(Body: LangRes(@1information))\r\n                }\r\n                Input(Name: Info, Type: textarea, Value: #member_member_info_information#).Style(resize: vertical;)\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1profile_view, Contract: @1ProfileEdit).Alert(Text: \"$@1want_save_changes$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: @1profile_view)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_transactions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1profile_transactions).(this_table, @1history)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1transactions_history$)\r\n\r\nIf(#ecosystem_id# == 1){\r\n    SetVar(token_title, \"APLA\")\r\n}.Else{\r\n    DBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem_id#\"}).Vars(custom)\r\n    SetVar(token_title, #custom_token_title#)\r\n}\r\nIf(#wallet#){\r\n    SetVar(wallet_address, #wallet#)\r\n    SetVar(wallet, AddressToId(#wallet#))\r\n}.Else{\r\n    SetVar(wallet, 0)\r\n}\r\nSetVar(account_key, AddressToId(#account_id#))\r\n\r\nIf(#new_filter#){\r\n    If(#show_fees#!=\"true\"){\r\n        SetVar(filter1, `, {\"type\": {\"$neq\": 1}}`)\r\n    }\r\n    If(#wallet# != 0){\r\n        SetVar(filter2, `, {\"$or\": [{\"$and\": [{\"sender_id\": #account_key#}, {\"recipient_id\": #wallet#}]}, {\"$and\": [{\"sender_id\": #wallet#}, {\"recipient_id\": #account_key#}]}]}`)\r\n    }.Else{\r\n        SetVar(filter2, `, {\"$or\": [{\"sender_id\": #account_key#}, {\"recipient_id\": #account_key#}]}`)\r\n    }\r\n    If(#lower_limit#>0){\r\n        If(#upper_limit#>0){\r\n            SetVar(filter3, `, {\"amount\": [{\"$gte\": Calculate(Exp: #lower_limit#*1000000000000000000, Type: money)}, {\"$lte\": Calculate(Exp: #upper_limit#*1000000000000000000, Type: money)}]}`)\r\n        }.Else{\r\n            SetVar(filter3, `, {\"amount\": {\"$gte\": Calculate(Exp: #lower_limit#*1000000000000000000, Type: money)}}`)\r\n        }\r\n    }.ElseIf(#upper_limit#>0){\r\n        SetVar(filter3, `, {\"amount\": {\"$lte\": Calculate(Exp: #upper_limit#*1000000000000000000, Type: money)}}`)\r\n    }\r\n    SetVar(filters, {\"$and\": [{\"ecosystem\": \"#ecosystem_id#\"} #filter1# #filter2# #filter3#]})\r\n    SetVar(page_par, #filters#)\r\n}.ElseIf(#page_par#){\r\n    SetVar(filters, #page_par#)\r\n}.Else{\r\n    SetVar(filters, {\"$and\": [{\"ecosystem\": \"#ecosystem_id#\"}, {\"type\": {\"$neq\": 1}}, {\"$or\": [{\"sender_id\": #account_key#}, {\"recipient_id\": #account_key#}]}]})\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"$and\": [#filters#, {\"comment\": {\"$ilike\": \"#search#\"}}]})\r\n}.Else{\r\n    SetVar(where, #filters#)\r\n}\r\n\r\nDiv(mr-lg text-right){\r\n    Button(Page: @1profile_transactions_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"show_fees=#show_fees#,MemberAccount=#wallet_address#,lower_limit=#lower_limit#,upper_limit=#upper_limit#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"50\")\r\n    If(#page_par#){\r\n        Button(Page: #this_page#, Class: btn bg-gray-lighter mr-sm, Body: Em(Class: fa fa-close))\r\n    }\r\n}.Style(margin-top: -33px; z-index: 1001;)\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1comment))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(\"@1history\", src_history).Where(#where#).Order({\"id\": \"-1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(sender_wallet){\r\n    If(#sender_id# != 0){\r\n        SetVar(sender_address, Address(#sender_id#))\r\n        LinkPage(Page: @1profile_view, PageParams: \"v_account=#sender_address#\"){\r\n            #sender_address#\r\n        }\r\n    }\r\n}.Custom(recipient_wallet){\r\n    SetVar(recipient_address, Address(#recipient_id#))\r\n    LinkPage(Page: @1profile_view, PageParams: \"v_account=#recipient_address#\"){\r\n        #recipient_address#\r\n    }\r\n}.Custom(amount_apl){\r\n    Span(Money(#amount#) #token_title#)\r\n}.Custom(_type){\r\n    AppParam(Ecosystem: 1, App: #application_id#, Name: type_tokens_transfer, Index: #type#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_history, \"$@1block$=block_id,$@1sender$=sender_wallet,$@1recipient$=recipient_wallet,$@1amount$=amount_apl,$@1comment$=comment,$@1type$=_type\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1transactions_history_empty$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_transactions_filter",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1profile_transactions_filter)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\nIf(#MemberAccount#){\r\n    SetVar(MemberAccountInputValue, #MemberAccount#)\r\n    SetVar(MemberAccount, AddressToId(#MemberAccount#))\r\n}.Else{\r\n    SetVar(MemberAccount, 0)\r\n}\r\n\r\nIf(#ecosystem_id# == 1){\r\n    SetVar(token_title, \"APLA\")\r\n}.Else{\r\n    DBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem_id#\"}).Vars(custom)\r\n    SetVar(token_title, #custom_token_title#)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1wallet))\r\n            }\r\n        }\r\n        Div(col-md-8){\r\n            Input(Name: wallet, Type: hidden, Value: #MemberAccount#)\r\n            Div(input-group){\r\n                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccountInputValue#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1filter$,EcosystemId=#EcosystemId#\").Popup(Header: $@1member$, Width: \"50\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_wallet_desc))\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: $@1amount_range$ (#token_title#))\r\n            }\r\n        }\r\n        Div(col-sm-3 pr0){\r\n            If(#lower_limit# > 0){\r\n                Input(Name: lower_limit, Placeholder: \"$@1for_example$: 0.1\", Value: #lower_limit#)\r\n            }.Else{\r\n                Input(Name: lower_limit, Placeholder: \"$@1for_example$: 0.1\")\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_lower_desc))\r\n        }\r\n        Div(col-sm-2 ph0 mt-sm text-center){\r\n            Label(Body: \"< $@1amount$ <\")\r\n        }\r\n        Div(col-sm-3 pl0){\r\n            If(#upper_limit# > 0){\r\n                Input(Name: upper_limit, Placeholder: \"$@1for_example$: 100\", Value: #upper_limit#)\r\n            }.Else{\r\n                Input(Name: upper_limit, Placeholder: \"$@1for_example$: 100\")\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_upper_desc))\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-4 mt text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1resources_fees_show))\r\n            }\r\n        }\r\n        Div(col-md-8){\r\n            If(#show_fees# == \"true\"){\r\n                Input(Name: show_fees, Type: \"checkbox\", Value: \"true\")\r\n            }.Else{\r\n                Input(Name: show_fees, Type: \"checkbox\", Value: \"false\")\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1filter), Class: btn btn-primary pull-right, Page: @1profile_transactions, PageParams: \"new_filter=1,show_fees=Val(show_fees),wallet=#MemberAccountInputValue#,lower_limit=Val(lower_limit),upper_limit=Val(upper_limit)\")\r\n    Button(Body: LangRes(@1clear), Class: btn btn-default pull-right, Page: @1profile_transactions)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#account_id# == #guest_account#){\r\n    Include(@1apps_description)\r\n}.Else{\r\n    Include(@1profile)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"name\": \"Basic\", \"ecosystem\": 1}).Vars(application)\r\n\r\nIf(#Id#!=\"\"){\r\n    SetVar(v_role_id, #Id#)\r\n}\r\n\r\nIf(#v_role_id#>0){\r\n    DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#v_role_id#\"}).Columns(\"id,role_name,role_type,roles_access,creator->account,deleted\").Vars(prefix)\r\n    If(#prefix_creator_account#==#account_id#){\r\n        SetVar(manager_id, 1)\r\n    }.ElseIf(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0,#prefix_deleted#==0,#prefix_role_type#!=2)){\r\n        DBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #prefix_roles_access#}}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1role)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Type: hidden, Name: Rid, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1type)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                SetVar(Name: var_prefix_role_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: 1)\r\n                If(#prefix_role_type#==2){\r\n                    P(Class: m0 text-danger h6, Body: LangRes(@1elective_role_voting_only))\r\n                }\r\n            }\r\n        }\r\n        If(#prefix_role_type#!=2){\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1member)\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(input-group){\r\n                        If(#MemberAccount#){\r\n                            Input(Name: account, Type: hidden, Value: #MemberAccount#)\r\n                            Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccount#)\r\n                        }.Else{\r\n                            Input(Name: account, Type: hidden, Value: 0)\r\n                            Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\r\n                        }\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1roles_assign,back_header=$@1assign$,Id=#v_role_id#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                        }.Style(\r\n                            .buttons {\r\n                                border: 1px solid #dde6e9;\r\n                                padding: 6px 16px;\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(And(#manager_id#>0,#prefix_role_type#!=2)){\r\n            Button(Body: LangRes(@1assign), Class: btn bg-primary pull-right mt, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: @1RolesAssign, Params: \"MemberAccount=Val(account)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nDBFind(\"@1roles\", src_roles).Columns(\"id,role_name\").Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Order(\"id\")\r\nIf(#back_page#==\"\"){\r\n   SetVar(back_page, \"@1roles_list\")\r\n}\r\n\r\nIf(#rid#==\"\"){\r\n    SetVar(title, $@1new_role$)\r\n    DBFind(\"@1buffer_data\").Where({\"ecosystem\": \"#ecosystem_id#\", \"key\": \"roles_access\", \"account\": \"#account_id#\"}).Columns(\"id,key,account,ecosystem,value->roles_access,value->role_type,value->role_name\").Vars(buffer)\r\n    AppParam(Source: app_roles_types, Ecosystem: 1, App: #application_id#, Name: roles_types_selection)\r\n    If(And(#buffer_value_roles_access#!=\"NULL\",#buffer_value_roles_access#!=\"\",#buffer_value_roles_access#!=\"[]\")){\r\n        DBFind(\"@1roles\", src_roles_access).Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #buffer_value_roles_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}.Else{\r\n    SetVar(title, $@1edit_role$)\r\n    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#rid#\"}).Columns(\"roles_access,role_type,role_name\").Vars(r)\r\n    SetVar(role_type, AppParam(Ecosystem: 1, App: #application_id#, Name: roles_types, Index: #r_role_type#))\r\n    If(And(#r_roles_access#!=\"NULL\",#r_roles_access#!=\"\",#r_roles_access#!=\"[]\")){\r\n        DBFind(\"@1roles\", src_roles_access).Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": {\"$in\": #r_roles_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid#==\"\"){\r\n                Input(Name: Name, Value: #buffer_value_role_name#).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: Name, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\r\n            }.Else{\r\n                Input(Name: Name, Value: #r_role_name#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1type)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid#==\"\"){\r\n                Select(Name: Type, Source: app_roles_types, NameColumn: name, ValueColumn: id, Value: #buffer_value_role_type#)\r\n            }.Else{\r\n                Input(Name: Type, Value: #role_type#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1roles_access)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1roles_create, PageParams: \"rid=#rid#,back_page=#back_page#\", Contract: @1RolesAccessManager, Params: \"Rid=#rid#,ManagerRid=Val(roles_managers),Action=add\").Popup(50, #title#)\r\n                }\r\n            }\r\n            If(#ra_count#>0){\r\n                ForList(src_roles_access){\r\n                    SetVar(btn_class, \"bg-gray-lighter\")\r\n                    If(#id#==#role_id#){\r\n                        SetVar(btn_class, \"bg-primary\")\r\n                    }\r\n                    Button(Class: btn-xs #btn_class# mr-sm mb-sm, Page: @1roles_create, PageParams: \"rid=#rid#\", Contract: @1RolesAccessManager, Params: \"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    If(#rid#==\"\"){\r\n        Button(Body: LangRes(@1create), Class: btn bg-primary pull-right mt, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1RolesCreate)\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1roles_list).(this_table, @1roles)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1roles$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1roles_list_desc$\"))\r\nAddToolButton(Page: @1roles_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_role$)\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"role_name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\"})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1role))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#).Where({\"ecosystem\": \"#ecosystem_id#\"}).Count(all_roles_count)\r\nDBFind(#this_table#, src_roles).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,role_name,role_type,image_id,creator->account,creator->member_name,date_created,date_deleted,deleted,roles_access\").Custom(_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link, \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_creator){\r\n    If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_account=#creator.account#\"){\r\n            #creator.member_name#\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #role_name#\r\n        }.Else{\r\n            Div(Class: #style_link#){\r\n                Span(Class: fa icon-settings fa-2x mr-sm)\r\n            }.Style(\r\n                display: inline-block;\r\n            )\r\n            Span(Class: btn-link text-bold pb-sm){\r\n                Span(Class: #style_link#, Body: #role_name#)\r\n            }.Style(\r\n                display: inline-block;\r\n                vertical-align: top;\r\n                padding-top: 7px;\r\n                padding-left: 4px;\r\n            )\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# small){\r\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        If(#deleted# == 1){\r\n          Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_type){\r\n    DBFind(\"@1applications\").Where({\"name\": \"Basic\", \"ecosystem\": 1}).Columns(\"name,id\").Vars(application)\r\n    Span(Class: #style_text#, Body: AppParam(Ecosystem: 1, App: #application_id#, Name: roles_types, Index: #role_type#))\r\n}.Custom(_status){\r\n    Span(Class:#style_text#){\r\n        If(#deleted# == 0){\r\n            LangRes(@1active)\r\n        }.Else{\r\n            LangRes(@1deleted)\r\n        }\r\n    }\r\n}.Custom(_access){\r\n    If(#creator.account# == #account_id#){\r\n        SetVar(access,done)\r\n    }.Else{\r\n        SetVar(access,)\r\n    }\r\n    If(And(#roles_access#!=\"NULL\",#roles_access#!=\"\",#roles_access#!=\"[]\")){\r\n        DBFind(\"@1roles\", src_access_list).Where({\"id\": {\"$in\": #roles_access#}}).Columns(\"id,role_name\").Count(access_count).Order(\"role_name\")\r\n        Div(#style_text# breaker){\r\n            ForList(src_access_list){\r\n                If(And(#role_id#==#id#)){\r\n                    SetVar(access,done)\r\n                }\r\n                If(#access_count#!=#src_access_list_index#){\r\n                    Span(\"#role_name#,\",mr-sm)\r\n                }.Else{\r\n                    #role_name#\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right button-group text-nowrap){\r\n        If(#access#==\"done\"){\r\n            If(And(#deleted#==0,#role_type#!=3)){\r\n                Button(Class: btn bg-gray-lighter, Contract: @1RolesDelete, Params: \"Ops=D,Rid=#id#\", Page: @1roles_list){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.ElseIf(#deleted#==1){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1RolesDelete, Params: \"Ops=R,Rid=#id#\", Page: @1roles_list){\r\n                    Em(Class: btn-default fa fa-1x fa-recycle)\r\n                }\r\n            }\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, PageParams: \"rid=#id#\", Page: @1roles_create){\r\n                    Em(Class: text-default fa fa-1x fa-edit)\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_roles, \"$@1role$=_name,$@1type$=_type,$@1id$=_id,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1roles_access$=_access,=_actions\")\r\n            }.ElseIf(#all_roles_count# > 0){\r\n                Div(Class: text-center h4 text-muted){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1roles$ $@1not_founded$\")\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted){\r\n                    Button(Body: $@1install_default_roles$, Class: btn btn-primary, Page: @1roles_list, Contract: @1DeployRoles)\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"role_type\": 1, \"deleted\": 0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#==0){\r\n                Div(Body: LangRes(@1no_assigned_roles))\r\n            }.Else{\r\n                Select(Name: Rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n            }\r\n        }\r\n    }\r\n    If(#roles_count#>0){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Contract: @1RolesRequest, Page: @1profile_view)\r\n    }\r\n    Button(Body: LangRes(@1close), Class: btn btn-default pull-right mt, Page: @1profile_view)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": #notific_id#}).Columns(\"page_params->rid,sender->image_id,sender->account,sender->member_name,closed\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1request_to_role$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        Span(Class: h5 text-bold, Body: #notific_sender_account#)\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_page_params_rid#\"}).Columns(\"role_name\").Vars(r)\r\n                        Div(text-muted m0 h5, Body: LangRes(@1role))\r\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Input(Name: MemberAccount, Class: hidden, Value: #notific_sender_account#)\r\n                                Input(Name: Rid, Class: hidden, Value: #notific_page_params_rid#)\r\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"NotificId=#notific_id#,Decision=0\")\r\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"NotificId=#notific_id#,Decision=1\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#page_par#!=\"\"){\r\n    SetVar(Name: v_role_id, Value: #page_par#)\r\n}\r\n\r\nIf(#v_role_id#>0){\r\n    SetVar(this_page, @1roles_view).(this_table, @1roles_participants)\r\n    Include(@1pager_header)\r\n\r\n    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#v_role_id#\"}).Columns(\"role_name,role_type,deleted,roles_access,creator->account\").Vars(prefix)\r\n    If(#prefix_creator_account#==#account_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0,#prefix_deleted#==0,#prefix_role_type#!=2)){\r\n        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": [{\"$in\": #prefix_roles_access#}, {\"$eq\": \"#role_id#\"}]}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    If(#manager_id#>0){\r\n        AddToolButton(Page: @1roles_assign, PageParams: \"v_role_id=#v_role_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\r\n    }\r\n\r\n    SetTitle(\"$@1role$\": #prefix_role_name#)\r\n    Span(Class: h5 m0 mb ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1roles$, Page: @1roles_list)\r\n        Span(Class: text-muted mh-sm, Body: /)\r\n        Span(Class: text-muted, Body: #prefix_role_name#)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    If(#search#){\r\n        SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"role->id\": \"#v_role_id#\", \"member->member_name\": {\"$ilike\": \"#search#\"}})\r\n    }.Else{\r\n        SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"role->id\": \"#v_role_id#\"})\r\n    }\r\n\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_role_id#)\r\n        Include(@1search)\r\n    }\r\n\r\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->account,member->member_name,member->image_id,appointed->account,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_appointed){\r\n        If(And(#appointed.account# != \"\", #appointed.account# != NULL)){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#appointed.account#\"){\r\n                Span(Body: #appointed.member_name#)\r\n            }\r\n        }\r\n        If(#appointed.voting_id#>0){\r\n            LinkPage(Class:#style_link# h5 text-bold, Page: @1voting_view, PageParams: \"vID=#appointed.voting_id#\"){\r\n                Span(Body: #appointed.voting_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_member){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#member.account#\"){\r\n            If(#member.image_id#>0){\r\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_address){\r\n        Span(Class: #style_text#, Body: #member.account#)\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(@1active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1RolesUnassign, Params: \"RowId=#id#\", Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\"){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }.Count(count)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#count# > 0){\r\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\r\n                }\r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "select_ecosystem",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#Type# == \"ALL_LIST\"){\r\n    DBFind(\"@1ecosystems\", items).Limit(250).Columns(\"name,id\")\r\n    SetVar(name_column, \"name\")\r\n    SetVar(value_column, \"id\")\r\n}\r\nIf(#Type# == \"ONLY_MY\"){\r\n    SetVar(account_key, AddressToId(#account_id#))\r\n    DBFind(\"@1parameters\", items).Where({\"$and\": [{\"ecosystem\": {\"$neq\": 1}}, {\"$or\": [{\"$and\": [{\"name\": \"founder_account\"}, {\"value\": \"#account_key#\"}]}, {\"$and\": [{\"name\": \"delegate_account\"}, {\"value\": \"#account_key#\"}]}]}]}).Columns(\"ecosystem\").Custom(\"custom_name\"){\r\n        DBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem#\"}).Vars(eco)\r\n        Span(#eco_name#)\r\n    }\r\n    SetVar(name_column, \"custom_name\")\r\n    SetVar(value_column, \"ecosystem\")\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-12 text-left){\r\n            Select(Name: EcosystemId, Source: items, NameColumn: #name_column#, ValueColumn: #value_column#, Value: #EcosystemId#)\r\n        }\r\n    }\r\n    If(#back_header#){\r\n        Button(Body: LangRes(@1select), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=Val(EcosystemId)\").Popup(Header: #back_header#, Width: 50)\r\n        If(#go_home# == 1) {\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ec_list)\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#\").Popup(Header: #back_header#, Width: 50)\r\n        }\r\n    }.Else{\r\n        Button(Body: LangRes(@1select), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=Val(EcosystemId)\")\r\n        If(#go_home# == 1) {\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ec_list)\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#\")\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "select_group",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1select_group).(this_table, @1groups).(current_header, $@1groups$).(pager_limit, 10)\r\nInclude(@1pager_header)\r\n\r\nIf(#page_par#){\r\n    SetVar(EcosystemId, #page_par#)\r\n}.Else{\r\n    SetVar(page_par, #EcosystemId#)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#EcosystemId#\", \"deleted\": 0, \"group_name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#EcosystemId#\", \"deleted\": 0})\r\n}\r\n\r\nDiv(){\r\n    Form(input-group){\r\n        Div(input-group-addon){\r\n            LangRes(@1name)\r\n        }\r\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\r\n        Div(input-group-btn){\r\n            If(#search#!=\"\"){\r\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #current_header#, Width: \"50\")\r\n            }\r\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons {\r\n        border: 1px solid #dde6e9;\r\n    }\r\n)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n}.Custom(_name){\r\n    If(#back_header#!=\"\"){\r\n        Button(Class: btn-xs btn-link, Page: #back_page#, PageParams: \"GroupId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #group_name#)\r\n        }.Popup(Header: #back_header#, Width: 50)\r\n    }.Else{\r\n        Button(Class: btn-xs btn-link, Page: #back_page#, PageParams: \"GroupId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #group_name#)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    If(#count# > 0){\r\n        Table(src,\"=_name\")\r\n    }.Else{\r\n        Div(Class: text-center h4 text-muted, Body: \"$@1groups$ $@1not_founded$\")\r\n    }\r\n}\r\nDiv(){\r\n    Include(@1pager_for_popup)\r\n    If(#back_header#!=\"\"){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\").Popup(Header: #back_header#, Width: \"50\")\r\n    }.Else{\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "select_role",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1select_role).(this_table, @1roles).(current_header, $@1roles$).(pager_limit, 10)\r\nInclude(@1pager_header)\r\n\r\nIf(#page_par#){\r\n    SetVar(EcosystemId, #page_par#)\r\n}.Else{\r\n    SetVar(page_par, #EcosystemId#)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#EcosystemId#\", \"deleted\": 0, \"role_name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#EcosystemId#\", \"deleted\": 0})\r\n}\r\n\r\nDiv(){\r\n    Form(input-group){\r\n        Div(input-group-addon){\r\n            LangRes(@1name)\r\n        }\r\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\r\n        Div(input-group-btn){\r\n            If(#search#!=\"\"){\r\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #current_header#, Width: \"50\")\r\n            }\r\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons {\r\n        border: 1px solid #dde6e9;\r\n    }\r\n)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n}.Custom(_name){\r\n    If(#back_header#!=\"\"){\r\n        Button(Class: btn-xs btn-link, Page: #back_page#, PageParams: \"RoleId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #role_name#)\r\n        }.Popup(Header: #back_header#, Width: 50)\r\n    }.Else{\r\n        Button(Class: btn-xs btn-link, Page: #back_page#, PageParams: \"RoleId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #role_name#)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    If(#count# > 0){\r\n        Table(src,\"=_name\")\r\n    }.Else{\r\n        Div(Class: text-center h4 text-muted, Body: \"$@1roles$ $@1not_founded$\")\r\n    }\r\n}\r\nDiv(){\r\n    Include(@1pager_for_popup)\r\n    If(#back_header#!=\"\"){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\").Popup(Header: #back_header#, Width: \"50\")\r\n    }.Else{\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "select_wallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1select_wallet).(this_table, @1keys).(current_header, $@1member$).(pager_limit, 10)\r\nInclude(@1pager_header)\r\n\r\nIf(#page_par#){\r\n    SetVar(EcosystemId, #page_par#)\r\n}.Else{\r\n    SetVar(page_par, #EcosystemId#)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#EcosystemId#\", \"deleted\": 0, \"$and\": [{\"account\": {\"$ilike\": \"#search#\"}}, {\"account\": {\"$neq\": \"#guest_account#\"}}]})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#EcosystemId#\", \"account\": {\"$neq\": \"#guest_account#\"}, \"deleted\": 0})\r\n}\r\n\r\nDiv(){\r\n    Form(input-group){\r\n        Div(input-group-addon){\r\n            LangRes(@1wallet)\r\n        }\r\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\r\n        Div(input-group-btn){\r\n            If(#search#){\r\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #current_header#, Width: \"50\")\r\n            }\r\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"account\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    Span(Class: h6 text-muted, Body: #account#)\r\n    SetVar(m_account,)\r\n    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Vars(m)\r\n    If(#m_account#){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, #account#)\r\n    }\r\n}.Custom(custom_account){\r\n    If(#back_header#!=\"\"){\r\n        Button(Class: btn-xs btn-link pull-right, Page: #back_page#, PageParams: \"MemberAccount=#account#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #account#)\r\n        }.Popup(Header: #back_header#, Width: 50)\r\n    }.Else{\r\n        Button(Class: btn-xs btn-link pull-right, Page: #back_page#, PageParams: \"MemberAccount=#account#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #account#)\r\n        }\r\n    }\r\n}.Custom(custom_ecosystem){\r\n    Span(Class: text-muted h5, Body: $@1ecosystem$ #EcosystemId#)\r\n}.Custom(custom_username){\r\n    If(#image_id#>0){\r\n        Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px; width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n        Span(Class: h5, Body: #member_name#)\r\n    }.Else{\r\n        Div(){\r\n            Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\r\n            Span(Class: h5, Body: #member_name#)\r\n        }.Style(display:flex; align-items:center;)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive){\r\n        Div(){\r\n            If(#count# > 0){\r\n                Table(src, \"=custom_username,=custom_ecosystem,=custom_account\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(){\r\n    Include(@1pager_for_popup)\r\n    If(#back_header#!=\"\"){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\").Popup(Header: #back_header#, Width: \"50\")\r\n    }.Else{\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1sysparams_list).(this_table, @1system_parameters)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1platform_parameters$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1platform_params_desc$\"))\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1name))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_actions){\r\n    SetVar(sp_id,0)\r\n    DBFind(\"@1contracts\").Where({\"ecosystem\": 1, \"name\": \"#name#\"}).Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        Span(Class: pull-right){\r\n            LinkPage(Class: text-primary h4, Body: Em(Class: fa fa-cogs), Page: @1sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        Span(Class: pull-right){\r\n            $@1contract_404$\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    Div(){\r\n        #name#\r\n    }.Style(min-width:200px;)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=_name,$@1value$=value,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1platform_parameters$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1ecosystems\").WhereId(#Id#).Vars(eco)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(@1ecosystems), Page: @1ecosystems_list)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(@1metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(@1metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(#Id#){\r\n            SetVar(title, LangRes(@1metrics): #eco_name# (#Id#))\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(\"@1metrics\", src_metric).Where({\"key\": \"#Id#\", \"metric\": \"#Metric#\"}).Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$@1timestam$=time,$@1value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetTitle($@1voting$: #param_name#)\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1system_params$, Page: @1sysparams_list)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    Span(Class: text-muted, Body: #param_name#)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nForm(content-wrapper){\r\n    If(#param_name#==\"\"){\r\n        Div(text-danger text-center text-bold){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n\r\n    DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n    If(#param_name# == full_nodes){\r\n        SetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_cn_connection))\r\n    }.Else{\r\n        SetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_platformparams))\r\n    }\r\n    If(#template_id#){\r\n        DBFind(\"@1voting_templates\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#template_id#\"}).Columns(\"subject->voters\").Vars(template)\r\n    }\r\n\r\n    If(#template_id# > 0){}.Else{\r\n        Div(text-danger text-center text-bold){\r\n            Div(mb-sm){\r\n                LangRes(@1voting_template_not_found)\r\n            }\r\n            LinkPage(Page: @1voting_templates_list, Class: btn btn-info){\r\n                LangRes(@1template_set)\r\n            }\r\n        }\r\n    }\r\n\r\n    If(#template_id# > 0){\r\n        If(#param_name# != full_nodes){\r\n            DBFind(\"@1system_parameters\").Where({\"name\": \"#param_name#\"}).Vars(param)\r\n            Div(form-group){\r\n                Label($@1name$)\r\n                Input(Name: Name, Value: #param_name#, Disabled: true)\r\n            }\r\n            Div(form-group){\r\n                Label($@1value$)\r\n                Input(Name: OldValue, Value: #param_value#, Disabled: true)\r\n            }\r\n            Div(form-group){\r\n                Label($@1new_value$)            \r\n                Input(Name: Value, Type: textarea)\r\n            }\r\n            Div(text-left){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_list)\r\n                If(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n                    Button(Body: LangRes(@1voting), Class: btn btn-primary pull-right, Contract: @1VotingRunEditPlatformParam, Page: @1voting_list)\r\n                }.Else{\r\n                    If(#template_id# > 0){\r\n                        Span($@1voting_not_participant$, text-muted pull-right)\r\n                    }.Else{\r\n                        Span($@1voting_template_not_found$, text-muted pull-right)\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            SetVar(full_nodes, SysParam(full_nodes))\r\n            SetVar(first_node, AppParam(Ecosystem: 1, App: #application_id#, Name: first_node)).(first_node_set,)\r\n            If(#full_nodes# == \"\"){\r\n                JsonToSource(src_first_node, #first_node#)\r\n                ForList(src_first_node){\r\n                    If(#value# == \"\"){\r\n                        SetVar(first_node_set, error)\r\n                    }\r\n                }\r\n                If(#first_node_set# == error){\r\n                    Div(text-center){\r\n                        ForList(src_first_node){\r\n                            If(#value#==\"\"){\r\n                                Div(){first node: '#key#' empty}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(text-center){\r\n                        DBFind(\"@1app_params\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"first_node\"}).Vars(first_node_param)\r\n                        Button(Page: @1app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=@1sysparams_list\", Body: $@1install_first_node$)\r\n                    }\r\n                }\r\n            }.Else{\r\n                ArrayToSource(src_full_nodes, `#full_nodes#`)\r\n                ForList(src_full_nodes){\r\n                    JsonToSource(src_node, `#value#`)\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-9 text-left){\r\n                                Label(){node #key#}\r\n                                ForList(src_node){\r\n                                    P(Class: h6 m0, Body: Strong(#key#:) #value#)\r\n                                }\r\n                            }\r\n                            Div(col-md-3 text-right mt-lg){\r\n                                If(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n                                    SetVar(Index, Calculate(#src_full_nodes_index# - 1))\r\n                                    Button(Body: $@1delete$, Class: btn btn-danger mt, Contract: @1VotingRunRemoveCNConnection, Params: \"Index=#Index#\" Page: @1voting_list)\r\n                                }.Else{\r\n                                    Div(mt-lg){\r\n                                        If(#template_id# > 0){\r\n                                            Span($@1voting_not_participant$, text-muted)\r\n                                        }.Else{\r\n                                            Span($@1voting_template_not_found$, text-muted)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }.Style(word-break: break-all;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: Amount){\r\n                LangRes(@1amount)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Amount, Type: number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: VictimAccount){\r\n                LangRes(@1tokens_refund_victim)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: VictimAccount, Placeholder: $@1wallet_address$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: SuspectAccount){\r\n                LangRes(@1tokens_refund_attacker)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: SuspectAccount, Placeholder: $@1wallet_address$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: Note){\r\n                LangRes(@1description)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Note, Type: textarea)\r\n        }\r\n    }\r\n    Button(Body: $@1request_refund$, Contract: @1VotingRunTokenRefund, Page: @1tokenrefund_list, Class: btn pull-right btn-primary mt)\r\n    Button(Body: LangRes(@1back), Class: btn pull-right btn-default mt, Page: @1tokenrefund_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1tokenrefund_list).(this_table, @1tokens_refund)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1tokens_refunds_list$\")\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(tid, AppParam(App: #application_id#, Name: voting_template_tokenrefund, Ecosystem: 1))\r\nIf(#tid# > 0){\r\n    DBFind(\"@1voting_templates\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#tid#\"}).Columns(\"subject->voters\").Vars(template)\r\n}\r\nIf(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n    Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1tokens_refunds_list_desc$))\r\n    AddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1tokenrefund_create).Popup(50, $@1create_request$)\r\n}.Else{\r\n    If(#template_subject_voters#>0){\r\n        Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1tokens_refunds_list_allowed_role$ #template_subject_voters#))\r\n    }.Else{\r\n        Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1template_id_not_found$))\r\n    }\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"note\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1description))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src_refunds_list).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_status){\r\n    If(#status#>0){\r\n        SetVar(sta, AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n        LangRes(#sta#)\r\n    }\r\n}.Custom(_result){\r\n    If(#result# > 0){\r\n        SetVar(res,AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n        LangRes(#res#)\r\n    }\r\n}.Custom(_blocked){\r\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n}.Custom(_closed){\r\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n}.Custom(_accounts){\r\n    Div(){$@1tokens_refund_victim$: #victim_account#}\r\n    Div(){$@1tokens_refund_attacker$: #attacker_account#}\r\n}.Custom(_amount){\r\n    Money(#amount#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_refunds_list, \"$@1accounts$=_accounts,$@1description$=note,$@1consortium_member$=consortium_member_account,$@1blocked_at$=_blocked,$@1closed$=_closed,$@1result$=_result,$@1amount$=_amount,$@1status$=_status\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1tokens_refunds$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokens_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, \"@1tokens_send\")\r\n\r\nIf(#back_page# == \"\"){\r\n    If(#parent_back_page# != \"\"){\r\n        SetVar(back_page, #parent_back_page#)\r\n    }.Else{\r\n        SetVar(back_page, \"@1members_list\")\r\n    }\r\n}\r\nIf(#MemberAccount#){\r\n    SetVar(v_account, #MemberAccount#)\r\n}\r\nIf(#v_account#){\r\n    SetVar(Name: v_address, Value: #v_account#)\r\n}\r\n\r\nDBFind(\"@1keys\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account_id#\", \"deleted\": 0}).Vars(tokens)\r\nDBFind(\"@1ecosystems\").Where({\"id\": \"#ecosystem_id#\"}).Vars(custom)\r\nIf(#ecosystem_id# == 1){\r\n    SetVar(token_title, \"APLA\")\r\n}.Else{\r\n    SetVar(token_title, #custom_token_title#)\r\n}\r\n\r\nIf(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n    Form(){\r\n        Div(row){\r\n            Div(col-sm-3 mt-sm text-right){\r\n                Label($@1sender$)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n            Div(col-sm-9){\r\n                SetVar(m_a, #account_id# (Money(#tokens_amount#) #token_title#))\r\n                Input(Name: Sender, Disabled: 1, Value: #m_a#)\r\n                Div(Class: m0 h6 text-muted, Body: $@1send_tokens_my_balance$)\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-sm-3 mt-sm text-right){\r\n                Label($@1recipient$)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n            Div(col-sm-9){\r\n                Div(input-group){\r\n                    Input(Name: Recipient, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1tokens_send$,parent_back_page=#back_page#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                    }.Style(\r\n                        .buttons {\r\n                            border: 1px solid #dde6e9;\r\n                            padding: 6px 16px;\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-sm-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1amount$ (#token_title#))\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-sm-9){\r\n                Input(Name: Amount, Type: Number, Value: #v_amount#)\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1TokensSend).Alert(Text: \"$@1want_send_tokens$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n    }\r\n}.Else{\r\n    Form(){\r\n        Div(row){\r\n            Div(col-sm-12){\r\n                Span(Body: $@1ecosystem_no_tokens$)\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "upload_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-12){\r\n            Input(Name: FileData, Type: file).Validate(required: \"1\")\r\n            Div(Class: text-danger){\r\n                InputErr(Name: FileData, required: $@1file_not_selected$)\r\n            }\r\n        }\r\n    }\r\n    If(#back_page_popup# == 50){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#application_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 50)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 50)\r\n    }.ElseIf(#back_page_popup# == 30){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#application_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 30)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 30)\r\n    }.ElseIf(Or(#back_page_popup# == 40, #back_page_popup# == 1)){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#application_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 40)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 40)\r\n    }.Else{\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#application_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\")\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(this_page, \"@1voting_create\")\r\n\r\nForm(){\r\n    If(#type_decision#>0){\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1number_votes$)\r\n                        Input(Name: CountTypeVoters, Type: hidden, Value: 1)\r\n                    }.Else{\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1percent_votes$)\r\n                        Input(Name: CountTypeVoters, Type: hidden, Value: 0)\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_voting_decisions, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #type_decision#))\r\n                    Input(Name: Input_TypeVotingDecisions, Disabled: 1, Value: #var_type_voting_decisions#)\r\n                    Input(Name: TypeDecision, Type: hidden, Value: #type_decision#)\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #type_participants#))\r\n                    Input(Name: Input_TypeParticipants, Disabled: 1, Value: #var_type_participants#)\r\n                    Input(Name: TypeParticipants, Type: hidden, Value: #type_participants#)\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1name)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: Name, Value: \"New voting\")\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_quorum)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Input(Name: Quorum, Value: 3, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_number_desc$\r\n                        }\r\n                    }.Else{\r\n                        Input(Name: Quorum, Value: 30, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(Or(#type_participants#==1,#type_participants#==2,#type_participants#==3,#type_participants#==4)){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_rating)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mt-sm text-left){\r\n                        Input(Name: Rating, Placeholder: $@1voting_rating_desc$, Type: checkbox, Value: false, Class: m0 text-muted)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(Or(#count_type_voters#==1,#type_decision#==1,#type_decision#==2)){\r\n            SetVar(hide_volume, 1)\r\n        }\r\n        If(#hide_volume# != 1){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_volume)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: Volume, Value: 51, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_volume_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1date_start)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: StartDate, Type: date)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: StartTime, Type: time, Value: \"00:00\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1date_end)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: EndDate, Type: date)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: EndTime, Type: time, Value: \"00:00\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1description)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: Description, Type: textarea).Style(resize:vertical)\r\n                }\r\n            }\r\n        }\r\n        Input(Name: Type, Type: hidden, Value: 1)\r\n        If(#type_decision# == 1){\r\n            SetVar(next_page,\"@1voting_decision_candidates\")\r\n        }.ElseIf(#type_decision# == 2){\r\n            SetVar(next_page,\"@1voting_decision_election\")\r\n        }.ElseIf(#type_decision# == 3){\r\n            SetVar(next_page,\"@1voting_decision_document\")\r\n        }.ElseIf(#type_decision# == 4){\r\n            SetVar(next_page,\"@1voting_decision_contract\")\r\n        }\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: #next_page#, Contract: @1VotingCreate, Params: \"CountTypeVoters=#count_type_voters#\").Popup(60, $@1voting_subject$)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #this_page#).Popup(60, $@1new_voting$)\r\n    }.Else{\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 mt-sm text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn-xs btn-default mr-lg).Popup(60, $@1new_voting$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn-xs btn-primary disabled).Popup(60, $@1new_voting$)\r\n                    }.Else{\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn-xs btn-primary disabled mr-lg).Popup(60, $@1new_voting$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn-xs btn-default).Popup(60, $@1new_voting$) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Data(numbers_type_decisions, \"value,name\"){\r\n                            3,$@1document$\r\n                            4,$@1contract_run$\r\n                        }\r\n                        RadioGroup(Name: type_decision, Source: numbers_type_decisions, NameColumn: name, ValueColumn: value)\r\n                    }.Else{\r\n                        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                        RadioGroup(Name: type_decision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\n                    Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id, Value: 2)\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right mt, Page: #this_page#, PageParams: \"count_type_voters=#count_type_voters#,type_decision=Val(type_decision),type_participants=Val(type_participants)\").Popup(60, $@1new_voting$)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_list)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_candidates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(\"@1buffer_data\").Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"account\": \"#account_id#\", \"ecosystem\": \"#ecosystem_id#\"}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n        SetVar(toPageInvite, 1)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n    DBFind(\"@1votings\").WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(\"@1votings_subject\").Where({\"voting_id\": \"#vID#\", \"subject->account\": \"#account_id#\"}).Columns(\"id\").Vars(already_candidate)\r\n    DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"role_type\": 2, \"deleted\": 0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n    If(#elective_roles_count#>0){\r\n        Form(){\r\n            Input(Name: MemberAccount, Type: hidden, Value: 0)\r\n            Input(Name: VotingId, Type: hidden, Value: #vID#)\r\n\r\n            If(#already_candidate_id#>0){\r\n                SetVar(hidden,hidden)\r\n            }.Else{\r\n                SetVar(hidden,)\r\n            }\r\n            Div(row mt-sm #hidden#){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1candidates))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#apply# == 1){\r\n                        Input(Name: applied, Disabled: 1, Value: $@1applied_already$)\r\n                    }.Else{\r\n                        Div(input-group){\r\n                            Input(Name: can_apply_voting, Disabled: 1, Value: $@1can_apply_voting$)\r\n                            Div(input-group-btn){\r\n                                Button(Body: LangRes(@1apply), Class: btn bg-gray-lighter buttons, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#,back_page=#back_page#,apply=1\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\r\n                            }.Style(\r\n                                .buttons{border: 1px solid #dde6e9;}\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            DBFind(\"@1votings_subject\",src_voting_subject).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,subject->account,subject->member_name\").Count(members_count).Custom(_address){\r\n                #subject.account#\r\n            }.Custom(_member){\r\n                LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#subject.account#\"){\r\n                    Span(Body: #subject.member_name#)\r\n                }\r\n            }\r\n            If(Or(#members_count#>0,#apply#==1)){\r\n                Div(row){\r\n                    Div(col-sm-9 col-sm-offset-3){\r\n                        Table(src_voting_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row mt-lg){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1role))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Select(Name: RoleId, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1vacancies))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: Vacancies, Type: number, Value: #instance_optional_role_vacancies#)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_accept))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: OptContractAcceptName, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: OptContractAcceptName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: OptContractAcceptParams, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_reject))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: OptContractRejectName, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: OptContractRejectName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: OptContractRejectParams, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n            }\r\n            If(#toPageInvite#==1){\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings).Popup(60, $@1participants_add$)\r\n            }.Else{\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\r\n            }\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n        }\r\n    }.Else{\r\n        Div(row){\r\n            Div(col-md-12 text-center h4){\r\n                P(LangRes(@1elective_roles_not_found))\r\n                Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                    Span(Class: h4, Body: LangRes(@1create_role))\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_contract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(\"@1buffer_data\").Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"account\": \"#account_id#\", \"ecosystem\": \"#ecosystem_id#\"}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n        SetVar(toPageInvite, 1)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(\"@1votings\", src_voting).WhereId(#vID#).Columns(\"id,voting->name\").Vars(instance)\r\n    DBFind(\"@1votings_subject\", src_subject).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(prefix_subject_contract_accept,)\r\n        SetVar(prefix_subject_contract_accept_params,)\r\n        SetVar(prefix_subject_contract_reject,)\r\n        SetVar(prefix_subject_contract_reject_params,)\r\n    }\r\n\r\n    Form(){\r\n        Input(Name: VotingId, Type: hidden, Value: #vID#)\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1contract_accept)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Name: ContractAcceptName, Value: #prefix_subject_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                InputErr(Name: ContractAcceptName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1params))\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Name: ContractAcceptParams, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: ContractRejectName, Value: #prefix_subject_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: ContractRejectName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: ContractRejectParams, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        If(#toPageInvite#==1){\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectContract).Popup(60, $@1participants_add$)\r\n        }.Else{\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectContract)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_document",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(\"@1buffer_data\").Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"account\": \"#account_id#\", \"ecosystem\": \"#ecosystem_id#\"}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n        SetVar(toPageInvite, 1)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(\"@1votings\", src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(\"@1votings_subject\", src_voting_subject).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,subject->text\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(Name: prefix_subject_text, Value: \"\")\r\n    }\r\n\r\n    Form(){\r\n        Input(Name: VotingId, Type: hidden, Value: #vID#)\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-12 mt-sm){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1text_document))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                    Input(Name: TextDocument, Type: textarea, Value: #prefix_subject_text#).Style(resize: vertical;)\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: OptContractAcceptName, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: OptContractAcceptName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: OptContractAcceptParams, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: OptContractRejectName, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: OptContractRejectName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: OptContractRejectParams, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        If(#toPageInvite#==1){\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectDocument).Popup(60, $@1participants_add$)\r\n        }.Else{\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectDocument)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_election",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(\"@1buffer_data\").Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"account\": \"#account_id#\", \"ecosystem\": \"#ecosystem_id#\"}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#candidates#==\"\"){\r\n        SetVar(candidates,0)\r\n    }\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n    DBFind(\"@1votings\", src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(\"@1votings_subject\", src_subject).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,subject->account,subject->member_name\").Custom(_address){\r\n        SetVar(candidates,\"#candidates#,#subject.account#\")\r\n        #subject.account#\r\n    }.Custom(_member){\r\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#subject.account#\"){\r\n            Span(Body: #subject.member_name#)\r\n        }\r\n    }\r\n\r\n    DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"role_type\": 2, \"deleted\": 0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n    If(#elective_roles_count# > 0){\r\n        Form(){\r\n            Input(Name: VotingId, Type: hidden, Value: #vID#)\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1candidates)).(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Div(input-group){\r\n                            If(#MemberAccount#){\r\n                                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccount#)\r\n                            }.Else{\r\n                                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\r\n                            }\r\n                            Div(input-group-btn){\r\n                                Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams: \"back_page=@1voting_decision_election,back_header=$@1voting_subject$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1member$, Width: \"50\")\r\n                                If(#MemberAccount#){\r\n                                    Button(Class: btn bg-gray-lighter fa fa-plus buttons, Page: @1voting_decision_election, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingSubjectCandidates, Params: \"MemberAccount=#MemberAccount#\").Popup(50, $@1subject_voting$)\r\n                                }\r\n                            }.Style(\r\n                                .buttons{border: 1px solid #dde6e9;}\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n                If(Or(#members_count#>0,#candidates#!=0)){\r\n                    Div(row){\r\n                        Div(col-sm-9 col-sm-offset-3){\r\n                            Table(src_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Select(Name: RoleId, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                    }\r\n                }\r\n\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Input(Name: Vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_accept))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: OptContractAcceptName, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: OptContractAcceptName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: OptContractAcceptParams, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_reject))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: OptContractRejectName, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: OptContractRejectName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Input(Name: OptContractRejectParams, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n            }\r\n            If(#toPageInvite#==1){\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings).Popup(60, $@1participants_add$)\r\n            }.Else{\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\r\n            }\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n        }\r\n    }.Else{\r\n        Div(row){\r\n            Div(col-md-12 text-center h4){\r\n                P(LangRes(@1elective_roles_not_found))\r\n                Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                    Span(Class: h4, Body: LangRes(@1create_role))\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_invite",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#Id# > 0){\r\n    SetVar(vID, #Id#)\r\n}\r\nIf(Id==\"\"){\r\n    SetVar(Id, 0)\r\n}\r\n\r\nIf(#vID# > 0){\r\n    Form(){\r\n        If(#back_page#==\"\"){\r\n            SetVar(back_page,@1voting_view)\r\n        }\r\n        DBFind(\"@1votings\").WhereId(#vID#).Columns(\"id,voting->name,voting->type_participants\").Vars(instance)\r\n        DBFind(\"@1votings_participants\", src_participants).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,member->account,member->member_name,member->role_id\").Count(participants_count).Custom(_id){\r\n            #member.account#\r\n        }.Custom(_name){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#member.account#\", Body: #member.member_name#)\r\n        }.Custom(_sent){\r\n            $@1voting_role_added$\r\n        }.Custom(_member_roles){\r\n            SetVar(rl_id,0)\r\n            DBFind(\"@1roles\").Columns(\"id,role_name,image_id\").WhereId(#member.role_id#).Vars(rl)\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                If(#rl_image_id#>0){\r\n                    Image(Src: Binary().ById(#rl_image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                    #rl_role_name#\r\n                }.Else{\r\n                    Div(){\r\n                        Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\r\n                    }.Style(display:flex; align-items:center;)\r\n                }\r\n            }\r\n        }\r\n        If(#participants_count#>0){\r\n            Div(list-group-item mb-lg){\r\n                If(#instance_voting_type_participants# == 5){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent\")\r\n                }.ElseIf(#instance_voting_type_participants# == 4){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent,$@1member$=_name,=_id,\")\r\n                }.Else{\r\n                    Table(src_participants, \"$@1member$=_name,=_id\")\r\n                }\r\n            }\r\n        }\r\n\t\tInput(Name: VotingId, Type: hidden, Value: #vID#)\r\n\t\t  \r\n\t\tIf(#instance_voting_type_participants#==2){\r\n\t\t\tDiv(row mb){\r\n\t\t\t\tDiv(col-md-3 mt-sm text-right){\r\n\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\tLangRes(@1member)\r\n\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-9 text-left){\r\n\t\t\t\t\tDiv(input-group){\r\n\t\t\t\t\t\tIf(#MemberAccount#){\r\n\t\t\t\t\t\t\tSetVar(Id, #MemberAccount#)\r\n                            Input(Name: VarId, Type: hidden, Value: #MemberAccount#)\r\n                            Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #MemberAccount#)\r\n                        }.Else{\r\n                            Input(Name: VarId, Type: hidden, Value: 0)\r\n                            Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\r\n                        }\r\n\t\t\t\t\t\tDiv(input-group-btn){\r\n\t\t\t\t\t\t\tButton(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1voting_invite,back_header=$@1participants_add$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1member$, Width: \"50\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(Or(#instance_voting_type_participants#==3,#instance_voting_type_participants#==4,#instance_voting_type_participants#==5)){\r\n\t\t\tDiv(row mb){\r\n\t\t\t\tDiv(col-md-3 mt-sm text-right){\r\n\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\tLangRes(@1role)\r\n\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-9 text-left){\r\n\t\t\t\t\tIf(RoleId == \"\"){\r\n\t\t\t\t\t\tSetVar(RoleId, 0)\r\n\t\t\t\t\t\tSetVar(RoleName,)\r\n\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\tInput(Name: VarId, Type: hidden, Value: #RoleId#)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(input-group){\r\n\t\t\t\t\t\tIf(#RoleId#>0){\r\n\t\t\t\t\t\t\tSetVar(Id, #RoleId#)\r\n\t\t\t\t\t\t\tDBFind(\"@1roles\").WhereId(#RoleId#).Columns(\"role_name\").Vars(r)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tInput(Name: m_name, Disabled: 1, Value: #r_role_name#)\r\n\t\t\t\t\t\tDiv(input-group-btn){\r\n\t\t\t\t\t\t\tButton(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_role, PageParams:\"back_page=@1voting_invite,back_header=$@1participants_add$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1roles$, Width: \"50\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(#instance_voting_type_participants#==6){\r\n\t\t\tDiv(row mb){\r\n\t\t\t\tDiv(col-md-3 mt-sm text-right){\r\n\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\tLangRes(@1group)\r\n\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-9 text-left){\r\n\t\t\t\t\tIf(GroupId == \"\"){\r\n\t\t\t\t\t\tSetVar(GroupId, 0)\r\n\t\t\t\t\t\tSetVar(GroupName,)\r\n\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\tInput(Name: VarId, Type: hidden, Value: #GroupId#)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(input-group){\r\n\t\t\t\t\t\tIf(#GroupId# > 0){\r\n\t\t\t\t\t\t\tSetVar(Id, #GroupId#)\r\n\t\t\t\t\t\t\tDBFind(\"@1groups\").WhereId(#GroupId#).Columns(\"group_name\").Vars(g)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tInput(Name: m_name, Disabled: 1, Value: #g_group_name#)\r\n\t\t\t\t\t\tDiv(input-group-btn){\r\n\t\t\t\t\t\t\tButton(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_group, PageParams:\"back_page=@1voting_invite,back_header=$@1participants_add$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1groups$, Width: \"50\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        Div(text-right){\r\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n            If(Or(#MemberAccount# != \"\", #RoleId# != \"\", #GroupId# != \"\")){\r\n                Button(Body: $@1send$, Class: btn btn-primary, Page: @1voting_invite, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingInvite).Popup(50, $@1participants_add$)\r\n            }\r\n        }\r\n    }.Style(\r\n        .buttons {\r\n            border: 1px solid #dde6e9;\r\n            padding: 6px 16px;\r\n        }\r\n    )\r\n}.Else{\r\n    Div(alert alert-danger mb-lg text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_list).(this_table, @1votings)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1voting_list$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1votings_list_desc$\"))\r\nAddToolButton(Title: $@1templates_list$, Page: @1voting_templates_list, Icon: icon-pin)\r\nAddToolButton(Title: $@1create$, Page: @1voting_create, Icon: icon-plus).Popup(60, $@1new_voting$)\r\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"System\"}).Vars(system_app)\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(#role_id# == #role_admin#){\r\n    Div(btn-group ml-lg){\r\n        Button(Body: Em(Class: fa fa-refresh) $@1update_votings_statuses$, Class: btn bg-gray ml-sm, Page: #this_page#, Contract: @1VotingStatusUpdate)\r\n    }\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0, \"voting->type\": {\"$in\": [1, 2]}, \"voting->name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0, \"voting->type\": {\"$in\": [1, 2]}})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1voting))\r\n    Include(@1search)\r\n}\r\n\r\nSetVar(INVALID,1).(WAITING,2).(STARTED,3).(FINISHED,4)\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": \"-1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->account,creator->member_name,date_started,date_ended,deleted,status,voting->count_type_voters,voting->volume,progress->number_voters\").Count(count_votings).Custom(_id){\r\n    Span(Class: h5, Body: #id#)\r\n}.Custom(_name){\r\n    LinkPage(Page: @1voting_view, PageParams: \"vID=#id#\"){\r\n        Span(Class: h5 text-bold m0, Body: #voting.name#)\r\n    }\r\n}.Custom(_subject){\r\n    SetVar(decision, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\r\n    Div(h6 m0){\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n            #decision#\r\n        }.Else{\r\n            If(#voting.type_decision# == 1){\r\n                SetVar(link_page,\"@1voting_decision_candidates\")\r\n            }.ElseIf(#voting.type_decision# == 2){\r\n                SetVar(link_page,\"@1voting_decision_election\")\r\n            }.ElseIf(#voting.type_decision# == 3){\r\n                SetVar(link_page,\"@1voting_decision_document\")\r\n            }.ElseIf(#voting.type_decision# == 4){\r\n                SetVar(link_page,\"@1voting_decision_contract\")\r\n            }\r\n            Button(Class: btn-xs btn-link p0 text-bold text-left, Page: #link_page#, PageParams: \"vID=#id#,back_page=#this_page#\"){\r\n                If(#flags.full_data# == 1){\r\n                    Span(Class: text-primary, Body: #decision#)\r\n                }.Else{\r\n                    Span(Class: text-danger, Body: #decision#)\r\n                }\r\n            }.Popup(60, $@1voting_subject$)\r\n        }\r\n    }\r\n}.Custom(_participants){\r\n    SetVar(participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\r\n    Div(h6 m0){\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n            #participants#\r\n        }.Else{\r\n            Button(Class: btn-xs btn-link p0 text-bold text-left, Page: @1voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\"){\r\n                If(#progress.number_participants# > 0){\r\n                    Span(Class: text-primary, Body: #participants#)\r\n                }.Else{\r\n                    Span(Class: text-danger, Body: #participants#)\r\n                }\r\n            }.Popup(60, $@1participants_add$)\r\n        }\r\n    }\r\n}.Custom(_creator){\r\n    LinkPage(Class: text-primary h6, Page: @1profile_view, PageParams: \"v_account=#creator.account#\", Body: #creator.member_name#)\r\n}.Custom(_date){\r\n    P(Class: text-center h6 m0, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    P(Class: text-center h6 m0, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(_type){\r\n    Div(h6 m0 p0){\r\n        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #voting.type#) /\r\n        If(#voting.count_type_voters#==1){\r\n            $@1number_votes$\r\n        }.Else{\r\n            $@1percent_votes$\r\n        }\r\n    }\r\n}.Custom(_progress){\r\n    Div(text-center h5 text-bold){\r\n        #progress.percent_success# %\r\n    }\r\n}.Custom(_decision){\r\n    Div(text-center){\r\n        If(#flags.decision# == 0){\r\n            If(And(#status# = =#FINISHED#, #creator.account# == #account_id#)){\r\n                Button(Body: LangRes(@1decision), Class: btn btn-primary, Contract: @1VotingDecisionCheck, Params: \"VotingId=#id#\", Page: #this_page#)\r\n            }.Else{\r\n                Div(text-muted){LangRes(@1no)}\r\n            }\r\n        }.ElseIf(#flags.decision# == -2){\r\n            Div(text-muted){LangRes(@1not_enough_votes)}\r\n        }.ElseIf(#flags.decision# == 1){\r\n            Div(text-success){LangRes(@1accepted)}\r\n        }.ElseIf(#flags.decision# == -1){\r\n            Div(text-danger){LangRes(@1rejected)}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#status#))\r\n    Div(text-center #status_class#){\r\n        If(#status#==#STARTED#){\r\n            Button(Class: btn btn-link icon-eye, Page: @1voting_view, PageParams: \"vID=#id#\")\r\n        }.Else{\r\n            If(And(#status# == #INVALID#, Or(#flags.full_data# == 0, #progress.number_participants# == 0))){\r\n                LangRes(@1not_filled)\r\n            }.Else{\r\n                AppParam(Ecosystem: 1, App: #application_id#, Name: voting_statuses, Index: #status#)\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(And(#creator.account# == #account_id#, #status# == #INVALID#)){\r\n            Button(Class: fa fa-trash btn btn-default, Contract: @1VotingDelete, Params: \"VotingId=#id#\", Page: #this_page#).Alert(Text: \"$@1want_delete_voting$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1voting$=_name,$@1type$=_type,$@1voting_subject$=_subject,$@1participants$=_participants,$@1date_start$ / $@1date_end$=_date,$@1creator$=_creator,$@1progress$=_progress,$@1decision$=_decision,$@1status$=_status,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1votings$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_template_create)\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(name, \"New voting\").(typevoting, 0).(volume, 50).(quorum, 51).(vacancies, 1)\r\n\r\nIf(#TemplateId#>0){\r\n    DBFind(\"@1voting_templates\").Where({\"id\": \"#TemplateId#\", \"ecosystem\": \"#ecosystem_id#\"}).Columns(\"voting->count_type_voters,voting->name,voting->volume,voting->quorum,voting->type_decision,voting->type_participants,voting->type,voting->rating,subject->candidates,subject->vacancies,subject->voters,subject->contract_accept,subject->contract_reject,optional->contract_accept,optional->contract_reject,optional->init_contract,optional->contract_accept_params,optional->contract_reject_params,optional->init_contract_params\").Vars(template)\r\n\r\n    If(#CountTypeVoters# == \"\"){\r\n        SetVar(CountTypeVoters, #template_voting_count_type_voters#)\r\n    }\r\n    If(#TypeDecision# == \"\"){\r\n        SetVar(ValTypeDec, #template_voting_type_decision#)\r\n    }\r\n    If(#TypeParticipants# == \"\"){\r\n        SetVar(TypeParticipants, #template_voting_type_participants#)\r\n    }\r\n    SetVar(voters, #template_subject_voters#)\r\n    SetVar(name, #template_voting_name#)\r\n    SetVar(quorum, #template_voting_quorum#)\r\n    If(#template_voting_rating# == 1){\r\n        SetVar(rating, \"true\")\r\n    }\r\n    SetVar(volume, #template_voting_volume#)\r\n    SetVar(candidates, #template_subject_candidates#)\r\n    SetVar(vacancies, #template_subject_vacancies#)\r\n    SetVar(contract_accept, #template_subject_contract_accept#)\r\n    SetVar(contract_reject, #template_subject_contract_reject#)\r\n    SetVar(init_contract, #template_optional_init_contract#)\r\n    SetVar(init_params, #template_optional_init_contract_params#)\r\n    SetVar(optional_accept_contract, #template_optional_contract_accept#)\r\n    SetVar(optional_accept_params, #template_optional_contract_accept_params#)\r\n    SetVar(optional_reject_contract, #template_optional_contract_reject#)\r\n    SetVar(optional_reject_params, #template_optional_contract_reject_params#)\r\n}\r\n\r\nForm(){\r\n    If(#TypeDecision#>0){\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1number_votes$)\r\n                        Input(Name: CountTypeVoters, Type: hidden, Value: 1)\r\n                    }.Else{\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1percent_votes$)\r\n                        Input(Name: CountTypeVoters, Type: hidden, Value: 0)\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_voting_decisions, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #TypeDecision#))\r\n                    Input(Name: Input_TypeVotingDecisions, Disabled: 1, Value: #var_type_voting_decisions#)\r\n                    Input(Name: TypeDecision, Type: hidden, Value: #TypeDecision#)\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #TypeParticipants#))\r\n                    Input(Name: InputTypeVotingParticipants, Disabled: 1, Value: #var_type_participants#)\r\n                    Input(Name: TypeParticipants, Type: hidden, Value: #TypeParticipants#)\r\n                }\r\n            }\r\n            If(#TypeParticipants#==3){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voters_role)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        DBFind(\"@1roles\", src_roles1).Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Order(\"id\").Custom(name){\r\n                            #role_name#\r\n                        }\r\n                        Select(Name: Voters, Source: src_roles1, NameColumn: name, ValueColumn: id, Value: #voters#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1name)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: VotingName, Value: #name#)\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_quorum)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Input(Name: Quorum, Value: #quorum#, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_number_desc$\r\n                        }\r\n                    }.Else{\r\n                        Input(Name: Quorum, Value: #quorum#, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(Or(#TypeParticipants#==1,#TypeParticipants#==2,#TypeParticipants#==3,#TypeParticipants#==4)){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_rating)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mt-sm text-left){\r\n                        Input(Name: Rating, Placeholder: $@1voting_rating_desc$, Type: checkbox, Value: #rating#, Class: m0 text-muted)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(Or(#CountTypeVoters#==1,#TypeDecision#==1,#TypeDecision#==2)){\r\n            SetVar(hide_volume, 1)\r\n        }\r\n        If(#hide_volume# != 1){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_volume)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: Volume, Value: #volume#, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_volume_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        If(Or(#TypeDecision#==1,#TypeDecision#==2)){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1vacancies)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: Vacancies, Value: #vacancies#, Type: number)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1candidates_role)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        DBFind(\"@1roles\", src_roles2).Where({\"role_type\": 2, \"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Order(\"id\").Custom(name){\r\n                            #role_name#\r\n                        }\r\n                        Select(Name: Candidates, Source: src_roles2, NameColumn: name, ValueColumn: id, Value: #candidates#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#TypeDecision#==4){\r\n            Div(list-group-item){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1contract_accept)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Input(Name: ContractAccept, Placeholder: $@1contract$, Value: #contract_accept#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1contract_reject)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Input(Name: ContractReject, Placeholder: $@1contract$, Value: #contract_reject#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_init_contract)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: InitContract, Placeholder: $@1contract$, Value: #init_contract#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: ParamsInit, Placeholder: $@1arguments$, Value: #init_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1contract_accept)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalContractAccept, Placeholder: $@1contract$, Value: #optional_accept_contract#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalParamsAccept, Placeholder: $@1arguments$, Value: #optional_accept_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1contract_reject)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalContractReject, Placeholder: $@1contract$, Value: #optional_reject_contract#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalParamsReject, Placeholder: $@1arguments$, Value: #optional_reject_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: @1voting_templates_list, Contract: @1VotingTemplateCreate)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #this_page#, PageParams: \"TemplateId=#TemplateId#\").Popup(60, $@1voting_template_create$)\r\n    }.Else{\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 mt-sm text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#\", Class: btn-xs btn-default mr-lg).Popup(60, $@1voting_template_create$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#\", Class: btn-xs btn-primary disabled).Popup(60, $@1voting_template_create$)\r\n                    }.Else{\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#\", Class: btn-xs btn-primary disabled mr-lg).Popup(60, $@1voting_template_create$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#\", Class: btn-xs btn-default).Popup(60, $@1voting_template_create$)    \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Data(numbers_type_decisions, \"value,name\"){\r\n                            3,$@1document$\r\n                            4,$@1contract_run$\r\n                        }\r\n                        RadioGroup(Name: TypeDecision, Value: #ValTypeDec#, Source: numbers_type_decisions, ValueColumn: value, NameColumn: name)\r\n                    }.Else{\r\n                        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                        RadioGroup(Name: TypeDecision, Value: #ValTypeDec#, Source: procent_type_decisions, ValueColumn: id, NameColumn: name)             \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: src_typepart)\r\n                    Select(Name: TypeParticipants, Source: src_typepart, NameColumn: name, ValueColumn: id, Value: #TypeParticipants#)\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right mt, Page: #this_page#, PageParams: \"CountTypeVoters=#CountTypeVoters#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants),TemplateId=#TemplateId#\").Popup(60, $@1voting_template_create$)\r\n        If(#TemplateId#>0){\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_template_view, PageParams: \"TemplateId=#TemplateId#\")\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_templates_list)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nIf(#TemplateId#>0){\r\n    DBFind(\"@1voting_templates\").Where({\"id\": \"#TemplateId#\", \"ecosystem\": \"#ecosystem_id#\"}).Columns(\"voting->count_type_voters,voting->name,voting->volume,voting->quorum,voting->type_decision,voting->type_participants,voting->type,voting->rating,subject->candidates,subject->vacancies,subject->voters,subject->contract_accept,subject->contract_reject,optional->contract_accept,optional->contract_reject,optional->init_contract,optional->contract_accept_params,optional->contract_reject_params,optional->init_contract_params\").Vars(template)\r\n    If(#template_subject_voters#>0){\r\n        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#template_subject_voters#\"}).Columns(\"role_name\").Vars(vid)\r\n        SetVar(v_role, \"#vid_role_name#\")\r\n    }\r\n    If(#template_subject_candidates#>0){\r\n        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#template_subject_candidates#\"}).Columns(\"role_name\").Vars(cid)\r\n        SetVar(c_role, \"#cid_role_name#\")\r\n    }\r\n}\r\n\r\nSetTitle(\"$@1template$\": #template_voting_name#)\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1voting$, Page: @1voting_list)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    LinkPage(Class: ml-sm, Body: $@1voting_templates$, Page: @1voting_templates_list)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    Span(Class: text-muted, Body: #template_voting_name#)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nDiv(content-wrapper){\r\n    If(#template_id# > 0){\r\n        Div(row){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-primary){\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #template_voting_name#)\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #template_voting_type_decision#))\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 text-bold m0 mb, Body: $@1voting$)\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #template_voting_type#)\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1vote_count_type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_voting_count_type_voters#==1){\r\n                                    $@1number_votes$\r\n                                }.Else{\r\n                                    $@1percent_votes$\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_rating)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_voting_rating#==1){\r\n                                    $@1yes$ Span(Class:text-muted, Body: ($@1voting_rating_desc$))\r\n                                }.Else{\r\n                                    $@1no$ Span(Class:text-muted, Body: ($@1voting_rating_not_used$))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_quorum)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_voting_count_type_voters#==1){\r\n                                    #template_voting_quorum#\r\n                                }.Else{\r\n                                    #template_voting_quorum#%\r\n                                }\r\n                            }\r\n                        }\r\n                        If(And(#template_voting_count_type_voters#!=1,#template_voting_type_decision#!=1,#template_voting_type_decision#!=2)){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voting_volume)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #template_voting_volume#%\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1participants)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #template_voting_type_participants#)\r\n                            }\r\n                        }\r\n                        If(#template_voting_type_participants#==3){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voters_role)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #v_role#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(Or(#template_voting_type_decision#==1,#template_voting_type_decision#==2)){\r\n                        Div(list-group-item text-center){\r\n                            P(Class: h5 text-bold m0 mb, Body: $@1voting_subject$)\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1vacancies)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #template_subject_vacancies#\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1candidates_role)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #c_role#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#template_voting_type_decision#==4){\r\n                        Div(list-group-item text-center){\r\n                            P(Class: h5 text-bold m0 mb, Body: $@1voting_subject$)\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#template_subject_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #template_subject_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#template_subject_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #template_subject_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 m0 mb){\r\n                             Span(Class: text-bold, Body: $@1params$)\r\n                             Span(Class: text-normal text-muted ml, Body: $@1optional$)\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_init_contract)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_init_contract# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_init_contract#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1arguments)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_init_contract_params# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_init_contract_params#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1contract_accept)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_accept# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_accept#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1arguments)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_accept_params# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_accept_params#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1contract_reject)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_reject# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_reject#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1arguments)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_reject_params# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_reject_params#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#template_voting_type# == 1){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    Label(){\r\n                                        $@1duration$ ($@1days$)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    Input(Name: Duration, Type: number, Value: 3)\r\n                                }\r\n                            }\r\n                            If(#template_voting_type_decision#==3){\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-6 mt-sm text-right){\r\n                                        Label(){\r\n                                            LangRes(@1text_document)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        Input(Name: TextDocument, Type: textarea).Style(resize: vertical;)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_templates_list)\r\n                        Div(pull-right){\r\n                            Button(Class: fa fa-copy btn btn-default, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#\").Popup(60, $@1voting_template_create$)\r\n                            If(#template_voting_type# == 1){\r\n                                Button(Body: $@1voting_start_button$, Class: btn btn-primary, Page: @1voting_list, Contract: @1VotingTemplateRun, Params: \"TemplateId=#TemplateId#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-md-12 alert alert-danger text-center){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_templates_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_templates_list).(this_table, @1voting_templates)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1voting_templates$\")\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1votings$, Page: @1voting_list)\r\n    Span(Class: text-muted mh, Body: /)\r\n    Span(Class: text-muted, Body: $@1voting_templates$)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"voting->type\": {\"$in\": [1, 2]}, \"voting->name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": \"#ecosystem_id#\", \"voting->type\": {\"$in\": [1, 2]}})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1template))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nSetVar(all_templates_count, 0)\r\nDBFind(#this_table#).Where({\"ecosystem\": \"#ecosystem_id#\"}).Count(all_templates_count)\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"voting->name,voting->type_participants,voting->type_decision,voting->type\").Custom(_participants){\r\n    P(Class: m0 h6, Body: AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_participants, Index: #voting.type_participants#))\r\n}.Custom(_decision){\r\n    P(Class: m0 h6, Body: AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_decisions, Index: #voting.type_decision#))\r\n}.Custom(_type){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting, Index: #voting.type#)\r\n}.Custom(_name){\r\n    LinkPage(Body: #voting.name#, Page: @1voting_template_view, PageParams: \"TemplateId=#id#\")\r\n}.Count(count)\r\n\r\nIf(Or(#count#>0,#ecosystem_id#>1)){\r\n    AddToolButton(Title: $@1create$, Page: @1voting_template_create, Icon: icon-plus).Popup(50, $@1voting_template_create$)\r\n}\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1template$=_name,$@1participants$=_participants,$@1decision$=_decision,$@1voting_type$=_type\")\r\n            }.ElseIf(And(#ecosystem_id# == 1, #all_templates_count# == 0)){\r\n                Form(Class: text-center h6){\r\n                    Button(Body: $@1install_default_templates$, Class: btn btn-primary, Page: @1voting_templates_list, Contract: @1DeployVotingTemplates)\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1voting_templates_not_found$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"page_params->voting_id\").Vars(notific)\r\n    SetVar(vID,#notific_page_params_voting_id#)\r\n}\r\n\r\nSetVar(INVALID,1).(WAITING,2).(STARTED,3).(FINISHED,4)\r\nSetVar(date_format,\"DD.MM.YYYY HH:MI\")\r\nSetVar(this_page,\"@1voting_view\")\r\n\r\nDiv(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(\"@1votings\").WhereId(#vID#).Columns(\"id,voting->rating,voting->name,voting->volume,voting->quorum,voting->type_participants,voting->type,voting->count_type_voters,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended,status,creator->account\").Vars(instance)\r\n        SetVar(type_decision,#instance_voting_type_decision#)\r\n        SetVar(type_participants,#instance_voting_type_participants#)\r\n\r\n        SetVar(isVotingAllowed,0)\r\n        SetVar(isStartProcessing,0)\r\n        If(Or(#type_participants#==1,#type_participants#==2,#type_participants#==3,#type_participants#==4,#type_participants#==6)){\r\n            DBFind(\"@1votings_participants\").Where({\"voting_id\": \"#vID#\", \"member->account\": \"#account_id#\", \"decision\": 0, \"ecosystem\": \"#ecosystem_id#\"}).Columns(\"id\").Vars(flag_participant)\r\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\r\n                DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"recipient->account\": \"#account_id#\", \"page_name\": \"#this_page#\", \"page_params->voting_id\": \"#vID#\", \"closed\": 0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\r\n                If(#notificcc_id#>0){\r\n                    SetVar(isVotingAllowed,1)\r\n                    SetVar(notific_id,#notificcc_id#)\r\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==0)){\r\n                        SetVar(isStartProcessing,1)\r\n                    }\r\n                }.Else{\r\n                    DBFind(\"@1votings_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"member->account\": \"#account_id#\", \"voting_id\": \"#vID#\"}).Columns(\"id,decision_date\").Vars(md)\r\n                    If(And(#md_id#>0, #md_decision_date#==0)){\r\n                        SetVar(isVotingAllowed,1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#type_participants#==5){\r\n            DBFind(\"@1votings_participants\").Where({\"voting_id\": \"#vID#\", \"member->role_id\": \"#role_id#\", \"decision\": 0, \"ecosystem\": \"#ecosystem_id#\"}).Columns(\"id\").Vars(flag_participant)\r\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\r\n                DBFind(\"@1notifications\").Where({\"$or\": [{\"date_start_processing\": 0}, {\"processing_info->account\": \"#account_id#\"}], \"ecosystem\": \"#ecosystem_id#\", \"recipient->role_id\": \"#role_id#\", \"page_name\": \"#this_page#\", \"page_params->voting_id\": \"#vID#\", \"closed\": 0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\r\n                If(#notificcc_id#>0){\r\n                    SetVar(isVotingAllowed,1)\r\n                    SetVar(notific_id,#notificcc_id#)\r\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==0)){\r\n                        SetVar(isStartProcessing,1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Div(row mt-sm){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-primary){\r\n                    Input(Type: hidden, Name: VotingId, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name# (#instance_id#))\r\n                        Div(row mt-sm){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #type_decision#))\r\n                            }\r\n                        }\r\n                        If(#instance_voting_description# != \"\"){\r\n                            Div(row){\r\n                                Div(col-md-6 text-right){\r\n                                    Div(Class: t5 text-muted m0, Body: LangRes(@1description))\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 text-bold m0 mb, Body: $@1voting_subject$)\r\n                        If(Or(#type_decision#==1,#type_decision#==2)){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1role)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#instance_optional_role_id#\"}).Columns(\"id,role_name\").Vars(prefix)\r\n                                        #prefix_role_name# (LangRes(@1id): #prefix_id#)\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1vacancies)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        #instance_optional_role_vacancies#\r\n                                    }.Else{\r\n                                        Span(Class: text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1candidates)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        #instance_optional_number_candidates#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            DBFind(\"@1votings_subject\", src_voting_subject).Where({\"voting_id\": \"#vID#\"}).Order(\"id\").Columns(\"id,subject->account,subject->member_name\").Custom(_address){\r\n                                #subject.account#\r\n                            }.Custom(_member){\r\n                                LinkPage(Class: text-primary t6 text-bold, Page: @1profile_view, PageParams: \"v_account=#subject.account#\"){\r\n                                    #subject.member_name#\r\n                                }\r\n                            }.Custom(_voting){\r\n                                If(#isStartProcessing#==1){\r\n                                    Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"NotificId=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                }.Else{\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Button(Body: LangRes(@1vote), Class: btn btn-success, Page: #this_page#, PageParams: \"vID=#vID#\", Contract: @1VotingCandidateAccept, Params: \"CandidateAccount=#subject.account#,RoleId=#role_id#\")\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Table(src_voting_subject, \"=_member,=_address,=_voting\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#type_decision#==1){\r\n                                            If(#instance_creator_account#==#account_id#){\r\n                                                Button(Class: btn btn-link, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                    Strong(LangRes(@1subject_voting_edit))\r\n                                                }.Popup(60, $@1subject_voting$)\r\n                                            }.Else{\r\n                                                DBFind(\"@1votings_subject\").Where({\"voting_id\": \"#vID#\", \"subject->account\": \"#account_id#\"}).Columns(\"id\").Vars(already_candidate)\r\n                                                If(#already_candidate_id#>0){\r\n                                                    SetVar(hidden,hidden)\r\n                                                }.Else{\r\n                                                    SetVar(hidden,)\r\n                                                }\r\n                                                Div(#hidden#){\r\n                                                    Button(Body: $@1can_apply_voting$, Class: btn btn-link, Page: #this_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectCandidates, Params: \"VotingId=#vID#,MemberAccount=#account_id#\")\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        If(#instance_creator_account#==#account_id#){\r\n                                            If(#type_decision#==2){\r\n                                                Button(Class: btn btn-link, Page: @1voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                    Strong(LangRes(@1subject_voting_edit))\r\n                                                }.Popup(60, $@1subject_voting$)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==3){\r\n                            DBFind(\"@1votings_subject\", src_voting_subject).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,subject->text,subject->hash,results->percent_accepted\").Vars(subject)\r\n                            Div(row t6 mt-lg){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_text#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item t6 text-muted){\r\n                                        If(#subject_id# > 0){\r\n                                            Hash: #subject_subject_hash#\r\n                                        }.Else{\r\n                                            Hash: LangRes(@1empty)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#instance_creator_account#==#account_id#){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(@1subject_voting_edit))\r\n                                            }.Popup(60, $@1subject_voting$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"NotificId=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==4){\r\n                            DBFind(\"@1votings_subject\", src_voting_subject).Where({\"voting_id\": \"#vID#\"}).Columns(\"id,subject->contract_accept,subject->contract_accept_params,subject->contract_reject,subject->contract_reject_params,results->percent_accepted\").Vars(subject)\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_subject_contract_accept#){\r\n                                        #subject_subject_contract_accept#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#subject_subject_contract_accept#){\r\n                                Div(row t6){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1arguments)\r\n                                    }\r\n                                    Div(col-md-6 text-left arguments){\r\n                                        If(Or(#subject_subject_contract_accept_params#==\"\",#subject_subject_contract_accept_params#=={})){\r\n                                            Span(Class: text-muted, Body: LangRes(@1no))\r\n                                        }.Else{\r\n                                            #subject_subject_contract_accept_params#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6 mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_subject_contract_reject#){\r\n                                        #subject_subject_contract_reject#\r\n                                    }.Else{\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#subject_subject_contract_reject#){\r\n                                Div(row t6){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1arguments)\r\n                                    }\r\n                                    Div(col-md-6 text-left arguments){\r\n                                        If(Or(#subject_subject_contract_reject_params#==\"\",#subject_subject_contract_reject_params#=={})){\r\n                                            Span(Class: text-muted, Body: LangRes(@1no))\r\n                                        }.Else{\r\n                                            #subject_subject_contract_reject_params#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#instance_creator_account#==#account_id#){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(@1subject_voting_edit))\r\n                                            }.Popup(60, $@1subject_voting$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-4 col-sm-offset-4 col-lg-4 col-lg-offset-4){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"NotificId=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center t6){\r\n                        P(Class: h5 text-bold m0 mb, Body: $@1voting$)\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1status)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#instance_status#))\r\n                                Div(#status_class#){\r\n                                    If(And(#instance_status# == #INVALID#, Or(#instance_flags_full_data# == 0, #instance_progress_number_participants# == 0))){\r\n                                        LangRes(@1not_filled)\r\n                                    }.Else{\r\n                                        AppParam(Ecosystem: 1, App: #application_id#, Name: voting_statuses, Index: #instance_status#)\r\n                                    }\r\n                                    If(#instance_flags_full_data#==0){\r\n                                        Div(Class: text-muted){(LangRes(@1voting_subject_not_filled))}\r\n                                    }\r\n                                    If(#instance_progress_number_participants#==0){\r\n                                        Div(Class: text-muted){(LangRes(@1voting_no_participants))}\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1vote_count_type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_count_type_voters#==1){\r\n                                    $@1number_votes$\r\n                                }.Else{\r\n                                    $@1percent_votes$\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_rating)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_rating#==1){\r\n                                    $@1yes$ Span(Class:text-muted, Body: ($@1voting_rating_desc$))\r\n                                }.Else{\r\n                                    $@1no$ Span(Class:text-muted, Body: ($@1voting_rating_not_used$))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1filled)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    Span(Class: text-success, Body: LangRes(@1yes))\r\n                                }.Else{\r\n                                    Span(Class: text-danger, Body: LangRes(@1no))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1decision)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    LangRes(@1not_enough_votes)\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    Span(Class:text-danger, Body: LangRes(@1rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    LangRes(@1no)\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    Span(Class:text-success, Body: LangRes(@1accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1date_start)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(Or(#instance_status#==#STARTED#,#instance_status#==#FINISHED#)){\r\n                                SetVar(date_started_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_started_class#){\r\n                                DateTime(DateTime: #instance_date_started#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1date_end)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(#instance_status#==#FINISHED#){\r\n                                SetVar(date_ended_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_ended_class#){\r\n                                DateTime(DateTime: #instance_date_ended#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_quorum)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_count_type_voters#==1){\r\n                                    #instance_voting_quorum#\r\n                                }.Else{\r\n                                    #instance_voting_quorum#%\r\n                                }\r\n                            }\r\n                        }\r\n                        If(And(#instance_voting_count_type_voters#!=1,#type_decision#!=1,#type_decision#!=2)){\r\n                            Div(row){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voting_volume)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #instance_voting_volume#%\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1participants)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    #instance_progress_number_participants#\r\n                                }.Else{\r\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\r\n                                }\r\n                                If(#instance_voting_type#==1){\r\n                                    If(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#)){\r\n                                        If(#instance_creator_account#==#account_id#){\r\n                                            Button(Class: btn-xs btn-link text-bold ml, Page: @1voting_invite, PageParams: \"vID=#vID#\"){\r\n                                                LangRes(@1participants_add)\r\n                                            }.Popup(60, $@1participants_add$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }.Style(margin-top: -3px;)\r\n                        }\r\n                    }\r\n                    If(Or(#instance_optional_contract_accept#!=\"\",#instance_optional_contract_reject#!=\"\")){\r\n                        Div(list-group-item text-center){\r\n                            P(Class: h5 m0 mb){\r\n                                Span(Class: text-bold, Body: $@1params$)\r\n                                Span(Class: text-normal text-muted ml, Body: $@1optional$)\r\n                            }\r\n                            Div(row mt t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                    Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_optional_contract_accept#){\r\n                                Div(row t6){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1arguments)\r\n                                        Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                                    }\r\n                                    Div(col-md-6 text-left arguments){\r\n                                        If(Or(#instance_optional_contract_accept_params#==\"\",#instance_optional_contract_accept_params#=={})){\r\n                                            Span(Class: text-muted, Body: LangRes(@1no))\r\n                                        }.Else{\r\n                                            #instance_optional_contract_accept_params#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                    Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_optional_contract_reject#){\r\n                                Div(row t6){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1arguments)\r\n                                        Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                                    }\r\n                                    Div(col-md-6 text-left arguments){\r\n                                        If(Or(#instance_optional_contract_reject_params#==\"\",#instance_optional_contract_reject_params#=={})){\r\n                                            Span(Class: text-muted, Body: LangRes(@1no))\r\n                                        }.Else{\r\n                                            #instance_optional_contract_reject_params#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Include(@1voting_charts)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n    .arguments {word-wrap: break-word;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_wizard",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, \"@1voting_wizard\")\r\nSetVar(back_page, \"@1voting_list\")\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nDBFind(\"@1buffer_data\").Where({\"key\": \"voting_wizard_buffer\", \"account\": \"#account_id#\", \"ecosystem\": \"#ecosystem_id#\"}).Columns(\"value->save_time,value->voting_name,value->voting_type,value->type_participants,value->type_decision,value->volume,value->quorum,value->rating,value->count_type_voters,value->description,value->interval,value->start_date,value->start_time,value->end_date,value->end_time,value->member_participants,value->role_participants,value->group_participants,value->execute_contract,value->contract_accept_name,value->contract_accept_params,value->contract_reject_name,value->contract_reject_params,value->text_document,value->candidates,value->apply,value->role_id,value->vacancies\").Vars(buffer)\r\n\r\nIf(#stage# == \"\"){\r\n    If(#buffer_value_save_time# == \"\"){\r\n        SetVar(stage, 1)\r\n    }.Else{\r\n        SetVar(stage, 0)\r\n    }\r\n}\r\nSetVar(debug, 0)\r\nSetVar(square, \"fa fa-circle-o mr-sm\")\r\nSetVar(square-filled, \"fa fa-dot-circle-o mr-sm\")\r\n\r\nForm(){\r\n    If(#stage# == 0){\r\n        Div(text-center){\r\n            Div(Body: LangRes(@1voting_wizard_draft_message))\r\n            Div(h6 m0 text-muted){$@1last_save$: DateTime(#buffer_value_save_time#, \"HH:MI DD.MM.YYYY\")}\r\n            Data(src_autosave, \"id,name\"){\r\n                yes,$@1voting_wizard_use_draft$\r\n                no,$@1start_over$\r\n            }\r\n            RadioGroup(Name: LoadAutosave, Source: src_autosave, NameColumn: name, ValueColumn: id)\r\n        }\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"stage=1\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Body: LangRes(@1cancel), Class: btn btn-default pull-right, Page: #back_page#)\r\n\r\n    }.ElseIf(#stage# == 1){\r\n        Div(row){\r\n            Div(col-md-3 mt-lg text-right){\r\n                Label(){\r\n                    LangRes(@1voting_subject)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                AppParam(Ecosystem: 1, App: #application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                RadioGroup(Name: TypeDecision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id, Value: #buffer_value_type_decision#)\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=2\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right fa fa-pause, Page: #back_page#)\r\n        Div(progress-wrapper pull-right mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(#stage# == 2){\r\n        If(#val_contract_accept_name# != \"\"){\r\n            SetVar(buffer_value_contract_accept_name, #val_contract_accept_name#)\r\n        }\r\n        If(#val_contract_accept_params# != \"\"){\r\n            SetVar(buffer_value_contract_accept_params, #val_contract_accept_params#)\r\n        }\r\n        If(#val_contract_reject_name# != \"\"){\r\n            SetVar(buffer_value_contract_reject_name, #val_contract_reject_name#)\r\n        }\r\n        If(#val_contract_reject_params# != \"\"){\r\n            SetVar(buffer_value_contract_reject_params, #val_contract_reject_params#)\r\n        }\r\n\r\n\r\n        If(#buffer_value_type_decision# == 1){\r\n            If(#val_role_id# != \"\"){\r\n                SetVar(buffer_value_role_id, #val_role_id#)\r\n            }\r\n            If(#val_role_vacancies# != \"\"){\r\n                SetVar(buffer_value_vacancies, #val_role_vacancies#)\r\n            }\r\n            If(#val_execute_contract# != \"\"){\r\n                SetVar(buffer_value_execute_contract, #val_execute_contract#)\r\n            }\r\n            If(And(#apply# == \"\", #buffer_value_apply# == 1)){\r\n                SetVar(apply, 1)\r\n            }\r\n\r\n            DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"role_type\": 2, \"deleted\": 0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n            If(#elective_roles_count# > 0){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1candidates))\r\n                            Span(Class: text-danger, Body: *)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Div(input-group){\r\n                            If(#apply# == 1){\r\n                                Input(Name: applied, Disabled: 1, Value: $@1applied_already$)\r\n                                Div(input-group-btn){\r\n                                    Button(Class: btn bg-gray-lighter buttons fa fa-undo, Page: #this_page#, PageParams: \"stage=2,apply=0,val_role_id=Val(RoleId),val_role_vacancies=Val(Vacancies),val_execute_contract=Val(ExecuteContract),val_contract_accept_name=Val(ContractAcceptName),val_contract_accept_params=Val(ContractAcceptParams),val_contract_reject_name=Val(ContractRejectName),val_contract_reject_params=Val(ContractRejectParams)\").Popup(50, $@1voting_wizard$)\r\n                                }\r\n                            }.Else{\r\n                                Input(Name: can_apply_voting, Disabled: 1, Value: $@1can_apply_voting$)\r\n                                Div(input-group-btn){\r\n                                    Button(Body: LangRes(@1apply), Class: btn bg-gray-lighter buttons, Page: #this_page#, PageParams: \"stage=2,apply=1,val_role_id=Val(RoleId),val_role_vacancies=Val(Vacancies),val_execute_contract=Val(ExecuteContract),val_contract_accept_name=Val(ContractAcceptName),val_contract_accept_params=Val(ContractAcceptParams),val_contract_reject_name=Val(ContractRejectName),val_contract_reject_params=Val(ContractRejectParams)\").Popup(50, $@1voting_wizard$)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#apply# == 1){\r\n                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account_id#\"}).Vars(my)\r\n                    If(#my_member_name# == \"\"){\r\n                        SetVar(my_member_name, #account_id#)\r\n                    }\r\n                    Data(src_voting_subject,\"id,name\"){\r\n                        #account_id#,#my_member_name#\r\n                    }.Custom(_address){\r\n                        #account#\r\n                    }.Custom(_member){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\"){\r\n                            Span(Body: #name#)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Data(src_voting_subject,\"id,name\"){}\r\n                }\r\n                If(#apply# == 1){\r\n                    Div(row){\r\n                        Div(col-sm-9 col-sm-offset-3){\r\n                            Table(src_voting_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                        }\r\n                    }\r\n                }\r\n                Div(form-group){\r\n                    Div(row mt-lg){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1role))\r\n                                Span(Class: text-danger, Body: *)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 text-left){\r\n                            Select(Name: RoleId, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #buffer_value_role_id#)\r\n                        }\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1vacancies))\r\n                                Span(Class: text-danger, Body: *)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 text-left){\r\n                            Input(Name: Vacancies, Type: Number, Value: #buffer_value_vacancies#)\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(row){\r\n                    Div(col-md-12 text-center h4){\r\n                        P(Class: m0, Body: LangRes(@1elective_roles_not_found))\r\n                        Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"back_page=#back_page#\"){\r\n                            Span(Class: h4, Body: LangRes(@1create_role))\r\n                        }.Popup(50, $@1edit_role$)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }.ElseIf(#buffer_value_type_decision# == 2){\r\n            If(#val_role_id# != \"\"){\r\n                SetVar(buffer_value_role_id, #val_role_id#)\r\n            }\r\n            If(#val_role_vacancies# != \"\"){\r\n                SetVar(buffer_value_vacancies, #val_role_vacancies#)\r\n            }\r\n            If(#val_execute_contract# != \"\"){\r\n                SetVar(buffer_value_execute_contract, #val_execute_contract#)\r\n            }\r\n            If(#new_candidate# == \"\"){\r\n                SetVar(new_candidate, 0)\r\n            }\r\n            If(#candidates# == \"\"){\r\n                If(#buffer_value_candidates# != \"\"){\r\n                    SetVar(candidates, #buffer_value_candidates#)\r\n                }.Else{\r\n                    SetVar(candidates, 0)\r\n                }\r\n            }\r\n            If(#new_candidate# != 0){\r\n                If(#candidates# == 0){\r\n                    SetVar(candidates, \"#new_candidate#\")\r\n                }.Else{\r\n                    SetVar(candidates, \"#candidates#,#new_candidate#\")\r\n                }\r\n            }\r\n\r\n            DBFind(\"@1keys\", src_subject).Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": {\"$in\": [#candidates#]}, \"deleted\": 0}).Custom(_address){\r\n                #account#\r\n            }.Custom(_member){\r\n                DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Count(have_name).Vars(participant)\r\n                If(#have_name# > 0){\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #participant_member_name#)\r\n                }.Else{\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #account#)\r\n                }\r\n            }\r\n\r\n            DBFind(\"@1keys\", src_accounts).Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"account\": {\"$neq\": \"#guest_account#\"}}, {\"account\": {\"$nin\": [#candidates#]}}], \"deleted\": 0}).Columns(\"account\").Count(members_count).Custom(_name){\r\n                DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Columns(\"account,member_name\").Count(have_name).Vars(m)\r\n                #account#\r\n                If(#have_name# > 0){\r\n                    \" (#m_member_name#)\"\r\n                }\r\n            }\r\n\r\n            DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"role_type\": 2, \"deleted\": 0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n            If(#elective_roles_count# > 0){\r\n                Div(form-group){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1candidates)).(Class: text-danger, Body: *)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Div(input-group){\r\n                                If(#members_count# > 0){\r\n                                    Select(Name: MemberAccount, Source: src_accounts, NameColumn: _name, ValueColumn: account)\r\n                                    Div(input-group-btn){\r\n                                        Button(Class: btn bg-gray-lighter fa fa-plus buttons, Page: #this_page#, PageParams: \"stage=2,new_candidate=Val(MemberAccount),candidates=#candidates#,val_role_id=Val(RoleId),val_role_vacancies=Val(Vacancies),val_execute_contract=Val(ExecuteContract),val_contract_accept_name=Val(ContractAcceptName),val_contract_accept_params=Val(ContractAcceptParams),val_contract_reject_name=Val(ContractRejectName),val_contract_reject_params=Val(ContractRejectParams)\").Popup(50, $@1voting_wizard$)\r\n                                        Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=2,candidates=0,val_role_id=Val(RoleId),val_role_vacancies=Val(Vacancies),val_execute_contract=Val(ExecuteContract),val_contract_accept_name=Val(ContractAcceptName),val_contract_accept_params=Val(ContractAcceptParams),val_contract_reject_name=Val(ContractRejectName),val_contract_reject_params=Val(ContractRejectParams)\").Popup(50, $@1voting_wizard$)\r\n                                    }\r\n                                }.Else{\r\n                                    Input(Class: mb, Disabled: 1, Value: \"$@1voting_all_members_added$\")\r\n                                    Div(input-group-btn input-group-top){\r\n                                        Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=2,candidates=0,val_role_id=Val(RoleId),val_role_vacancies=Val(Vacancies),val_execute_contract=Val(ExecuteContract),val_contract_accept_name=Val(ContractAcceptName),val_contract_accept_params=Val(ContractAcceptParams),val_contract_reject_name=Val(ContractRejectName),val_contract_reject_params=Val(ContractRejectParams)\").Popup(50, $@1voting_wizard$)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(Or(#members_count# > 0, #candidates# != 0)){\r\n                        Div(row){\r\n                            Div(col-sm-9 col-sm-offset-3){\r\n                                Table(src_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(form-group){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1role)).(Class: text-danger, Body: *)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mb-sm text-left){\r\n                            Select(Name: RoleId, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #buffer_value_role_id#)\r\n                        }\r\n                    }\r\n\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body: *)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: Vacancies, Class: form-control, Type: Number, Value: #buffer_value_vacancies#)\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(row){\r\n                    Div(col-md-12 text-center h4){\r\n                        P(Class: m0, Body: LangRes(@1elective_roles_not_found))\r\n                        Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"back_page=#back_page#\"){\r\n                            Span(Class: h4, Body: LangRes(@1create_role))\r\n                        }.Popup(50, $@1edit_role$)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }.ElseIf(#buffer_value_type_decision# == 3){\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1text_document))\r\n                            Span(Class: text-danger, Body: *)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: TextDocument, Type: textarea, Value: #buffer_value_text_document#).Style(resize: vertical;)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        If(Or(And(#buffer_value_type_decision# == 1, #elective_roles_count# > 0), And(#buffer_value_type_decision# == 2, #elective_roles_count# > 0), #buffer_value_type_decision# == 3)){\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_execute))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Data(src_execute, \"id,name\"){\r\n                            no,$@1no$\r\n                            yes,$@1yes$\r\n                        }\r\n                        Select(Name: ExecuteContract, Source: src_execute, NameColumn: name, ValueColumn: id, Value: #buffer_value_execute_contract#)\r\n                    }\r\n                }\r\n            }\r\n        }.ElseIf(#buffer_value_type_decision# == 4){\r\n            Input(Name: ExecuteContract, Type: \"hidden\", Value: \"yes\")\r\n        }\r\n\r\n        Div(){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                        If(#buffer_value_type_decision# == 4){\r\n                            Span(Class: text-danger, Body: *)\r\n                        }\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: ContractAcceptName, Value: #buffer_value_contract_accept_name#).Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: ContractAcceptName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_accept_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: ContractAcceptParams, Value: #buffer_value_contract_accept_params#)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                        If(#buffer_value_type_decision# == 4){\r\n                            Span(Class: text-danger, Body: *)\r\n                        }\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: ContractRejectName, Value: #buffer_value_contract_reject_name#).Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: ContractRejectName, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_reject_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: ContractRejectParams, Value: #buffer_value_contract_reject_params#)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }.Show(ExecuteContract=yes)\r\n\r\n        If(#buffer_value_type_decision# == 1){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=3\", Contract: @1VotingWizardBuffer, Params: \"Apply=#apply#,RoleId=Val(RoleId),Vacancies=Val(Vacancies),ExecuteContract=Val(ExecuteContract)\").Popup(50, $@1voting_wizard$)\r\n        }.ElseIf(#buffer_value_type_decision# == 2){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=3\", Contract: @1VotingWizardBuffer, Params: \"Candidates=#candidates#,RoleId=Val(RoleId),Vacancies=Val(Vacancies),ExecuteContract=Val(ExecuteContract)\").Popup(50, $@1voting_wizard$)\r\n        }.Else{\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=3\", Contract: @1VotingWizardBuffer, Params: \"ExecuteContract=Val(ExecuteContract)\").Popup(50, $@1voting_wizard$)\r\n        }\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=1\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt-sm mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n    }.ElseIf(#stage# == 3){\r\n        Div(row){\r\n            Div(col-md-3 mt-lg text-right){\r\n                Label(){\r\n                    LangRes(@1participants)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\n                RadioGroup(Name: TypeParticipants, Source: type_voting_participants, NameColumn: name, ValueColumn: id, Value: #buffer_value_type_participants#)\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=4\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=2\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(And(#stage# == 4, #buffer_value_type_participants# != 1)){\r\n        If(#new_participant# == \"\"){\r\n            SetVar(new_participant, 0)\r\n        }\r\n        If(#member_participants# == \"\"){\r\n            If(#buffer_value_member_participants# != \"\"){\r\n                SetVar(member_participants, #buffer_value_member_participants#)\r\n            }.Else{\r\n                SetVar(member_participants, 0)\r\n            }\r\n        }\r\n        If(#role_participants# == \"\"){\r\n            If(#buffer_value_role_participants# != \"\"){\r\n                SetVar(role_participants, #buffer_value_role_participants#)\r\n            }.Else{\r\n                SetVar(role_participants, 0)\r\n            }\r\n        }\r\n        If(#group_participants# == \"\"){\r\n            If(#buffer_value_group_participants# != \"\"){\r\n                SetVar(group_participants, #buffer_value_group_participants#)\r\n            }.Else{\r\n                SetVar(group_participants, 0)\r\n            }\r\n        }\r\n\r\n        If(#buffer_value_type_participants# == 2){\r\n            If(#new_participant# != 0){\r\n                If(#member_participants# == 0){\r\n                    SetVar(member_participants, #new_participant#)\r\n                }.Else{\r\n                    SetVar(member_participants, \"#member_participants#,#new_participant#\")\r\n                }\r\n            }\r\n            DBFind(\"@1keys\", src_participants).Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": {\"$in\": [#member_participants#]}, \"deleted\": 0}).Count(participants_count).Custom(_id){\r\n                #account#\r\n            }.Custom(_name){\r\n                DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Count(have_name).Vars(participant)\r\n                If(#have_name# > 0){\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #participant_member_name#)\r\n                }.Else{\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #account#)\r\n                }\r\n            }\r\n        }.ElseIf(#buffer_value_type_participants# == 6){\r\n            If(#new_participant# != 0){\r\n                If(#group_participants# == 0){\r\n                    SetVar(group_participants, #new_participant#)\r\n                }.Else{\r\n                    SetVar(group_participants, \"#group_participants#,#new_participant#\")\r\n                }\r\n            }\r\n            If(#group_participants# != 0){\r\n                DBFind(\"@1groups_participants\", src_participants).Where({\"ecosystem\": \"#ecosystem_id#\", \"groups_info->id\": {\"$in\": [#group_participants#]}}).Columns(\"member->account,groups_info->id\").Count(participants_count).Custom(_id){\r\n                    #member.account#\r\n                }.Custom(_name){\r\n                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#member.account#\"}).Count(have_name).Vars(participant)\r\n                    If(#have_name# > 0){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #participant_member_name#)\r\n                    }.Else{\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #account#)\r\n                    }\r\n                }\r\n            }\r\n        }.ElseIf(#buffer_value_type_participants# > 2){\r\n            If(#new_participant# != 0){\r\n                If(#role_participants# == 0){\r\n                    SetVar(role_participants, #new_participant#)\r\n                }.Else{\r\n                    SetVar(role_participants, \"#role_participants#,#new_participant#\")\r\n                }\r\n            }\r\n            If(And(Or(#buffer_value_type_participants# == 3, #buffer_value_type_participants# == 4), #role_participants# != 0)){\r\n                DBFind(\"@1roles_participants\", src_participants).Where({\"ecosystem\": \"#ecosystem_id#\", \"role->id\": {\"$in\": [#role_participants#]}}).Columns(\"member->account,role->id\").Count(participants_count).Custom(_id){\r\n                    #member.account#\r\n                }.Custom(_name){\r\n                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#member.account#\"}).Count(have_name).Vars(participant)\r\n                    If(#have_name# > 0){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #participant_member_name#)\r\n                    }.Else{\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#account#\", Body: #account#)\r\n                    }\r\n                }.Custom(_sent){\r\n                    $@1voting_role_added$\r\n                }.Custom(_member_roles){\r\n                    DBFind(\"@1roles\").Columns(\"id,role_name,image_id\").WhereId(#role.id#).Vars(rl)\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                        If(#rl_image_id# > 0){\r\n                            Image(Src: Binary().ById(#rl_image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                            #rl_role_name#\r\n                        }.Else{\r\n                            Div(){\r\n                                Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\r\n                            }.Style(display:flex; align-items:center;)\r\n                        }\r\n                    }\r\n                }\r\n            }.ElseIf(And(#buffer_value_type_participants# == 5, #role_participants# != 0)){\r\n                DBFind(\"@1roles\", src_participants).Columns(\"id,role_name,image_id\").Where({\"id\": {\"$in\": [#role_participants#]}}).Count(participants_count).Custom(_sent){\r\n                    $@1voting_role_added$\r\n                }.Custom(_member_roles){\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\r\n                        If(#image_id# > 0){\r\n                            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                            #role_name#\r\n                        }.Else{\r\n                            Div(){\r\n                                Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\r\n                            }.Style(display:flex; align-items:center;)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        If(#participants_count# > 0){\r\n            Div(list-group-item mb-lg){\r\n                If(#buffer_value_type_participants# == 5){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent\")\r\n                }.ElseIf(#buffer_value_type_participants# == 4){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent,$@1member$=_name,=_id,\")\r\n                }.Else{\r\n                    Table(src_participants, \"$@1member$=_name,=_id\")\r\n                }\r\n            }\r\n        }\r\n        If(#buffer_value_type_participants# != 1){\r\n            Div(row){\r\n                If(#buffer_value_type_participants# == 2){\r\n                    DBFind(\"@1keys\", src_keys).Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"account\": {\"$neq\": \"#guest_account#\"}}, {\"account\": {\"$nin\": [#member_participants#]}}], \"deleted\": 0}).Columns(\"account\").Count(keys_count).Custom(_name){\r\n                        SetVar(m_member_name,)\r\n                        DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Columns(\"account,member_name\").Count(have_name).Vars(m)\r\n                        #account#\r\n                        If(#have_name# > 0){\r\n                            \" (#m_member_name#)\"\r\n                        }\r\n                    }\r\n                    SetVar(source, \"src_keys\")\r\n                    SetVar(value, \"account\")\r\n                    SetVar(select_label, $@1member$)\r\n                    SetVar(hint, $@1select_member$)\r\n                }.ElseIf(#buffer_value_type_participants# == 6){\r\n                    DBFind(\"@1groups\", src_groups).Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0, \"id\": {\"$nin\": [#group_participants#]}}).Count(groups_count).Columns(\"id,group_name\").Custom(_name){\r\n                        Span(#group_name#)\r\n                    }\r\n                    SetVar(source, \"src_groups\")\r\n                    SetVar(value, \"id\")\r\n                    SetVar(select_label, $@1group$)\r\n                    SetVar(hint, $@1select_group$)\r\n                }.ElseIf(#buffer_value_type_participants# > 2){\r\n                    DBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0, \"id\": {\"$nin\": [#role_participants#]}}).Count(roles_count).Columns(\"id,role_name\").Custom(_name){\r\n                        Span(#role_name#)\r\n                    }\r\n                    SetVar(source, \"src_roles\")\r\n                    SetVar(value, \"id\")\r\n                    SetVar(select_label, $@1role$)\r\n                    SetVar(hint, $@1select_role$)\r\n                }\r\n                Div(col-md-2 mt-sm text-right){\r\n                    Label(){\r\n                        Span(#select_label#)\r\n                        Span(*, text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-10 text-left){\r\n                    If(#participants_count# == \"\"){\r\n                        SetVar(participants_count, 0)\r\n                    }\r\n                    If(#roles_count# == \"\"){\r\n                        SetVar(roles_count, 0)\r\n                    }\r\n                    If(#groups_count# == \"\"){\r\n                        SetVar(groups_count, 0)\r\n                    }\r\n                    If(Or(And(#buffer_value_type_participants# == 2, #keys_count# > 0), And(#buffer_value_type_participants# == 3, #participants_count# == 0), And(#buffer_value_type_participants# == 6, #participants_count# == 0), And(#buffer_value_type_participants# > 3, #roles_count# > 0))){\r\n                        Div(input-group){\r\n                            Select(Name: VarId, Source: #source#, NameColumn: _name, ValueColumn: #value#)\r\n                            Div(input-group-btn){\r\n                                Button(Class: btn bg-gray-lighter fa fa-plus buttons, Page: #this_page#, PageParams: \"stage=4,new_participant=Val(VarId),member_participants=#member_participants#,role_participants=#role_participants#,group_participants=#group_participants#\").Popup(50, $@1voting_wizard$)\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0,group_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                        Div(Class: m0 h6 text-muted, Body: #hint#)\r\n                    }.ElseIf(#buffer_value_type_participants# == 3){\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_one_role_allowed$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0,group_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }.ElseIf(#buffer_value_type_participants# == 6){\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_one_group_allowed$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0,group_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }.ElseIf(#buffer_value_type_participants# > 3){\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_all_roles_added$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0,group_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_all_members_added$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0,group_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=5\", Contract: @1VotingWizardBuffer, Params: \"MemberParticipants=#member_participants#,RoleParticipants=#role_participants#,GroupParticipants=#group_participants#\").Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=3\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt-sm mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(Or(#stage# == 5, And(#stage# == 4, #buffer_value_type_participants# == 1))){\r\n        If(#count_type_voters# == \"\"){\r\n            SetVar(count_type_voters, 0)\r\n        }\r\n        If(#buffer_value_volume# == \"\"){\r\n            SetVar(buffer_value_volume, 51)\r\n        }\r\n        If(#buffer_value_rating# == \"\"){\r\n            SetVar(buffer_value_rating, \"false\")\r\n        }\r\n        If(And(#buffer_value_type_decision# != 1, #buffer_value_type_decision# != 2)){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Data(type_voters,\"id,name\"){\r\n                        0,$@1percent_votes$\r\n                        1,$@1number_votes$\r\n                    }\r\n                    Select(Name: CountTypeVoters, Source: type_voters, NameColumn: name, ValueColumn: id, Value: #buffer_value_count_type_voters#)\r\n                }\r\n            }\r\n        }.Else{\r\n            Input(Name: CountTypeVoters, Type: hidden, Value: 0)\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1voting_quorum)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(m0 h6 text-muted){\r\n                    If(#buffer_value_quorum# != \"\"){\r\n                        Input(Name: Quorum, Type: number, Value: #buffer_value_quorum#)\r\n                    }.Else{\r\n                        Input(Name: Quorum, Type: number, Value: 30)\r\n                    }\r\n                    $@1voting_quorum_desc$\r\n                }.Show(CountTypeVoters=0)\r\n                Div(m0 h6 text-muted){\r\n                    If(#buffer_value_quorum# != \"\"){\r\n                        Input(Name: Quorum, Type: number, Value: #buffer_value_quorum#)\r\n                    }.Else{\r\n                        Input(Name: Quorum, Type: number, Value: 3)\r\n                    }\r\n                    $@1voting_quorum_number_desc$\r\n                }.Show(CountTypeVoters=1)\r\n            }\r\n        }\r\n        If(#buffer_value_type_participants# != 5){\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_rating)\r\n                    }\r\n                }\r\n                Div(col-md-9 mt-sm text-left){\r\n                    Input(Name: rating_switch, Placeholder: $@1voting_rating_desc$, Type: checkbox, Value: #buffer_value_rating#, Class: m0 text-muted)\r\n                }\r\n            }\r\n        }.Else{\r\n            Input(Name: rating_switch, Type: hidden, Value: \"false\")\r\n        }\r\n        If(And(#buffer_value_type_decision# != 1, #buffer_value_type_decision# != 2)){\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_volume)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: Volume, Type: number, Value: #buffer_value_volume#)\r\n                    Div(m0 h6 text-muted){\r\n                        $@1voting_volume_desc$\r\n                    }\r\n                }\r\n            }.Show(CountTypeVoters=0)\r\n        }\r\n        If(#buffer_value_type_participants# == 1){\r\n            SetVar(previous_stage_button, 3)\r\n        }.Else{\r\n            SetVar(previous_stage_button, 4)\r\n        }\r\n        Div(){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=6\", Contract: @1VotingWizardBuffer, Params: \"Rating=true\").Popup(50, $@1voting_wizard$)\r\n        }.Show(rating_switch=true)\r\n        Div(){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=6\", Contract: @1VotingWizardBuffer, Params: \"Rating=false\").Popup(50, $@1voting_wizard$)\r\n        }.Hide(rating_switch=true)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=#previous_stage_button#\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt-sm mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(#stage# == 6){\r\n        If(#buffer_value_start_time# == \"\"){\r\n            SetVar(buffer_value_start_time, \"00:00\")\r\n        }\r\n        If(#buffer_value_end_time# == \"\"){\r\n            SetVar(buffer_value_end_time, \"00:00\")\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1date_start)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(row){\r\n                    Div(col-md-6){\r\n                        Input(Name: StartDate, Type: date, Value: #buffer_value_start_date#)\r\n                    }\r\n                    Div(col-md-6){\r\n                        Input(Name: StartTime, Type: time, Value: #buffer_value_start_time#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1date_end)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(row){\r\n                    Div(col-md-6){\r\n                        Input(Name: EndDate, Type: date, Value: #buffer_value_end_date#)\r\n                    }\r\n                    Div(col-md-6){\r\n                        Input(Name: EndTime, Type: time, Value: #buffer_value_end_time#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right mt fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=7\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right mt fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=5\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(#stage# == 7){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1voting_title)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Name, Value: \"New voting\")\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1description)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Description, Type: textarea).Style(resize:vertical)\r\n            }\r\n        }\r\n        Input(Name: Type, Type: hidden, Value: 1)\r\n        Button(Class: btn btn-primary pull-right mt fa fa-play, Page: #back_page#, Contract: @1VotingWizardCreate, Params: \"TypeDecision=#buffer_value_type_decision#,CountTypeVoters=#buffer_value_count_type_voters#,TypeParticipants=#buffer_value_type_participants#,MemberParticipants=#buffer_value_member_participants#,RoleParticipants=#buffer_value_role_participants#,GroupParticipants=#buffer_value_group_participants#,Volume=#buffer_value_volume#,Quorum=#buffer_value_quorum#,Rating=#buffer_value_rating#,StartDate=#buffer_value_start_date#,StartTime=#buffer_value_start_time#,EndDate=#buffer_value_end_date#,EndTime=#buffer_value_end_time#,Name=Val(Name),Description=Val(Description),Apply=#buffer_value_apply#,Candidates=#buffer_value_candidates#,RoleId=#buffer_value_role_id#,Vacancies=#buffer_value_vacancies#,ExecuteContract=#buffer_value_execute_contract#,ContractAcceptName=#buffer_value_contract_accept_name#,ContractAcceptParams=#buffer_value_contract_accept_params#,ContractRejectName=#buffer_value_contract_reject_name#,ContractRejectParams=#buffer_value_contract_reject_params#,TextDocument=#buffer_value_text_document#\")\r\n        Button(Class: btn btn-default pull-right mt fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=6\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)}\r\n    }\r\n}.Style(\r\n    .progress-wrapper{line-height: 33px;}\r\n    .input-group-top{vertical-align: top;}\r\n    .buttons{\r\n        border: 1px solid #dde6e9;\r\n        padding: 6px 16px;\r\n    }\r\n)\r\nIf(#debug# == 1){\r\n    Div(Class: h6 text-muted){\r\n        Div(Body: stage = #stage#)\r\n        Div(Body: type_decision = #buffer_value_type_decision#)\r\n        Div(Body: type_participants = #buffer_value_type_participants#)\r\n        Div(Body: count_type_voters = #buffer_value_count_type_voters#)\r\n        Div(Body: volume = #buffer_value_volume#)\r\n        Div(Body: quorum = #buffer_value_quorum#)\r\n        Div(Body: rating = #buffer_value_rating#)\r\n        Div(Body: start_date = #buffer_value_start_date#)\r\n        Div(Body: start_time = #buffer_value_start_time#)\r\n        Div(Body: end_date = #buffer_value_end_date#)\r\n        Div(Body: end_time = #buffer_value_end_time#)\r\n        Div(Body: voting_name = #buffer_value_voting_name#)\r\n        Div(Body: description = #buffer_value_description#)\r\n\r\n        Div(Body: member_participants = #buffer_value_member_participants#)\r\n        Div(Body: role_participants = #buffer_value_role_participants#)\r\n        Div(Body: group_participants = #buffer_value_group_participants#)\r\n\r\n        Div(Body: execute_contract = #buffer_value_execute_contract#)\r\n        Div(Body: contract_accept_name = #buffer_value_contract_accept_name#)\r\n        Div(Body: contract_accept_params = #buffer_value_contract_accept_params#)\r\n        Div(Body: contract_reject_name = #buffer_value_contract_reject_name#)\r\n        Div(Body: contract_reject_params = #buffer_value_contract_reject_params#)\r\n\r\n        Div(Body: text_document = #buffer_value_text_document#)\r\n\r\n        Div(Body: candidates = #buffer_value_candidates#)\r\n        Div(Body: apply = #buffer_value_apply#)\r\n        Div(Body: role_id = #buffer_value_role_id#)\r\n        Div(Body: vacancies = #buffer_value_vacancies#)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TokensLockoutMember",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensLockoutMember {\r\n    data {\r\n        MemberAccount string\r\n        Value int\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1VotingRunTokenRefund\", \"@1TokensRefundAccept\", \"@1TokensRefundReject\", \"@1BlockMember\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name == prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getPermission()\r\n\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $MemberAccount, \"deleted\": 0}).One(\"account\") {\r\n            warning LangRes(\"@1account_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($Value) < 0 || Int($Value) > 1 {\r\n            warning LangRes(\"@1value_between_0_and_1\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"account\": $MemberAccount, \"deleted\": 0}, {\"blocked\": $Value})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "BufferManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract BufferManager {\r\n    data {\r\n        Action string\r\n        Key string\r\n        Val string \"optional\"\r\n    }\r\n\r\n    func decodeArray(s string) array {\r\n        var ar array\r\n        if HasPrefix($buf[\"value\"], \"[\") {\r\n            ar = JSONDecode($buf[\"value\"])\r\n        }\r\n        return ar\r\n    }\r\n\r\n    action {\r\n        $emptyVal = JSONEncode(\"\")\r\n        $buf = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"key\": $Key, \"account\": $account_id}).Row()\r\n        if !$buf {\r\n            var buf map, id int\r\n            id = DBInsert(\"@1buffer_data\", {ecosystem: $ecosystem_id, key: $Key, value: $emptyVal, account: $account_id})\r\n            buf[\"id\"] = Str(id)\r\n            buf[\"value\"] = \"\"\r\n            buf[\"account\"] = Str($account_id)\r\n            buf[\"key\"] = Str($Key)\r\n            $buf = buf\r\n        }\r\n        var id int\r\n        id = Int($buf[\"id\"])\r\n        if $Action == \"clean\" {\r\n            DBUpdate(\"@1buffer_data\", id, {value:$emptyVal})\r\n        }\r\n        if $Action == \"set\" {\r\n            DBUpdate(\"@1buffer_data\", id, {value:$Val})\r\n        }\r\n        if $Action == \"array_add_value\" {\r\n            var ar array enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            ar = Append(ar, $Val)\r\n            enc = JSONEncode(ar)\r\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\r\n        }\r\n        if $Action == \"array_remove_value\" {\r\n            var ar arNew array i int enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            while i < Len(ar){\r\n                if ar[i] != $Val{\r\n                    arNew = Append(arNew, ar[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n            enc = JSONEncode(arNew)\r\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "BufferFileUpload",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract BufferFileUpload {\r\n    data {\r\n        AppId int\r\n        BufferKey string\r\n        FileName string \"optional\"\r\n        FileData file\r\n    }\r\n\r\n    conditions {\r\n        var app_id int\r\n        app_id = DBFind(\"@1applications\").Where({\"id\": $AppId, \"deleted\": 0}).One(\"id\")\r\n        if !app_id {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        if $BufferKey == \"\" {\r\n            warning LangRes(\"@1buffer_key_empty\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var buffer_data map\r\n        if $FileName != \"\" {\r\n            buffer_data[\"binary_id\"] = @1UploadFile(\"Name,Data,ApplicationId\", $FileName, $FileData, Int($AppId))\r\n        } else {\r\n            buffer_data[\"binary_id\"] = @1UploadFile(\"Data,ApplicationId\", $FileData, Int($AppId))\r\n        }\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", $BufferKey, JSONEncode(buffer_data))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CNConnectionRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CNConnectionRequest {\r\n    data {\r\n        TcpAddress string\r\n        ApiAddress string\r\n        PubKey string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1contract_first_ecosystem_only\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"tcp_address\"] = $TcpAddress\r\n        m[\"api_address\"] = $ApiAddress\r\n        m[\"pub_key\"] = $PubKey\r\n        m[\"description\"] = $Description\r\n        m[\"comment\"] = $Comment\r\n        m[\"date_created\"] = $block_time\r\n        m[\"deleted\"] = 0\r\n        DBInsert(\"@1cn_connection_requests\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CNConnectionRequestDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CNConnectionRequestDelete {\r\n    data {\r\n        RequestId int\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var roleConsortiumMember int\r\n        roleConsortiumMember = getRoleId(\"role_consortium_member\")\r\n        if !RoleAccess(roleConsortiumMember) {\r\n            warning LangRes(\"@1consortium_members_only\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1cn_connection_requests\", $RequestId, {\"deleted\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAccessCheck {\r\n    data {\r\n        Rid int\r\n    }\r\n\r\n    conditions {\r\n        var role map\r\n        role = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $Rid}).Columns(\"id,role_name,deleted,roles_access,role_type,creator->account\").Row()\r\n        if !role {\r\n            warning Sprintf(\"%v: \" + LangRes(\"@1role_not_found\", \"en\"), $this_contract)\r\n        }\r\n\r\n        if role[\"creator.account\"] == $account_id {\r\n            return\r\n        }\r\n\r\n        var rids array\r\n        rids = JSONDecode(role[\"roles_access\"])\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n            warning Sprintf(LangRes(\"@1role_change_no_permission\", \"en\"), role[\"role_name\"])\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeleteMember",
            "Conditions": "ContractConditions(\"@1AdminCondition\")",
            "Value": "contract DeleteMember {\r\n    data {\r\n        MemberAccount string\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1DeleteMember\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name == prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"@1AdminCondition\")\r\n\r\n        getPermission()\r\n\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $MemberAccount}).One(\"account\"){\r\n            warning LangRes(\"@1account_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"account\": $MemberAccount}, {\"deleted\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAssign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAssign {\r\n    data {\r\n        Rid int\r\n        MemberAccount string\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $role = DBFind(\"@1roles\").Where({\"id\": $Rid}).Columns(\"id,deleted,role_type,role_name,image_id,creator->account\").Row()\r\n        if Int($role[\"role_type\"]) == 2 {\r\n            warning LangRes(\"@1elective_role_voting_only\", \"en\")\r\n        }\r\n        if !$role {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $MemberAccount, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1account_not_found\", \"en\")\r\n        }\r\n\r\n        if $role[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1role_deleted_request_impossible\", \"en\")\r\n        }\r\n\r\n        var specRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev_contract = $stack[Len($stack) - 2]\r\n        }\r\n        specRules[\"@1DelegateRefresh\"] = 1\r\n        specRules[\"@1InvestorRefresh\"] = 1\r\n\r\n        if specRules[prev_contract] != 1 {\r\n            @1RolesAccessCheck(\"Rid\", $Rid)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $Rid, \"member->account\": $MemberAccount, \"deleted\": 0}).One(\"id\") {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n        var role member appointer map\r\n        role[\"id\"] = $role[\"id\"]\r\n        role[\"type\"] = $role[\"role_type\"]\r\n        role[\"name\"] = $role[\"role_name\"]\r\n        role[\"image_id\"] = $role[\"image_id\"]\r\n\r\n        member = getMemberInfo($MemberAccount)\r\n        appointer = getMemberInfo($account_id)\r\n        var m map\r\n        m[\"role\"] = role\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = $block_time\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1roles_participants\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeployBasicPermissions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DeployBasicPermissions {\r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    action {\r\n        var TableName ColumnName InsertPerm UpdatePerm ReadPerm NewColPerm string\r\n\r\n        //====================================CN CONNECTION REQUESTS============================================================\r\n        TableName  = `cn_connection_requests`\r\n        InsertPerm = `ContractAccess(\"@1CNConnectionRequest\")`\r\n        UpdatePerm = `ContractAccess(\"@1CNConnectionRequestDelete\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `api_address`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `comment`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_created`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1CNConnectionRequestDelete\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `description`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `pub_key`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `tcp_address`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================GROUPS============================================================================\r\n        TableName  = `groups`\r\n        InsertPerm = `ContractAccess(\"@1GroupsCreate\")`\r\n        UpdatePerm = `ContractAccess(\"@1GroupsCreate\",\"@1GroupsDelete\",\"@1GroupAccessManager\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `creator`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_created`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_deleted`\r\n            UpdatePerm = `ContractAccess(\"@1GroupsDelete\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1GroupsDelete\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `group_access`\r\n            UpdatePerm = `ContractAccess(\"@1GroupAccessManager\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `group_info`\r\n            UpdatePerm = `ContractAccess(\"@1GroupsCreate\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `group_name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `group_type`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `image_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================GROUPS PARTICIPANTS===============================================================\r\n        TableName  = `groups_participants`\r\n        InsertPerm = `ContractAccess(\"@1GroupsAssign\")`\r\n        UpdatePerm = `ContractAccess(\"@1GroupsUnassign\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `appointed`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_created`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_deleted`\r\n            UpdatePerm = `ContractAccess(\"@1GroupsUnassign\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1GroupsUnassign\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `groups_info`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `member`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================TOKENS REFUND=====================================================================\r\n        TableName  = `tokens_refund`\r\n        InsertPerm = `ContractAccess(\"@1VotingRunTokenRefund\")`\r\n        UpdatePerm = `ContractAccess(\"@1TokensRefundAccept\",\"@1TokensRefundReject\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `amount`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `attacker_account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `blocked_at`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `closed_at`\r\n            UpdatePerm = `ContractAccess(\"@1TokensRefundAccept\",\"@1TokensRefundReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `consortium_member_account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `note`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `result`\r\n            UpdatePerm = `ContractAccess(\"@1TokensRefundAccept\",\"@1TokensRefundReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `status`\r\n            UpdatePerm = `ContractAccess(\"@1TokensRefundAccept\",\"@1TokensRefundReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `victim_account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================VOTING TEMPLATES==================================================================\r\n        TableName  = `voting_templates`\r\n        InsertPerm = `ContractAccess(\"@1VotingTemplateCreate\",\"@1DeployVotingTemplates\")`\r\n        UpdatePerm = `false`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `optional`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `subject`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `voting`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================VOTINGS===========================================================================\r\n        TableName  = `votings`\r\n        InsertPerm = `ContractAccess(\"@1VotingCreate\")`\r\n        UpdatePerm = `ContractAccess(\"@1VotingDecisionCheck\",\"@1VotingDelete\",\"@1VotingInvite\",\"@1VotingNotificationSend\",\"@1VotingStatusUpdate\",\"@1VotingSubjectCandidates\",\"@1VotingSubjectCheck\",\"@1VotingSubjectDocument\",\"@1VotingSubjectContract\",\"@1VotingSubjectSettings\",\"@1VotingUpdate\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `creator`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_ended`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_started`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1VotingDelete\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `flags`\r\n            UpdatePerm = `ContractAccess(\"@1VotingDecisionCheck\",\"@1VotingNotificationSend\",\"@1VotingStatusUpdate\",\"@1VotingSubjectCheck\", \"@1VotingUpdate\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `optional`\r\n            UpdatePerm = `ContractAccess(\"@1VotingSubjectCandidates\",\"@1VotingSubjectDocument\",\"@1VotingSubjectContract\",\"@1VotingSubjectSettings\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `progress`\r\n            UpdatePerm = `ContractAccess(\"@1VotingUpdate\",\"@1VotingInvite\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `status`\r\n            UpdatePerm = `ContractAccess(\"@1VotingStatusUpdate\",\"@1VotingUpdate\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `voting`\r\n            UpdatePerm = `ContractAccess(\"@1VotingInvite\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================VOTINGS PARTICIPANTS==============================================================\r\n        TableName  = `votings_participants`\r\n        InsertPerm = `ContractAccess(\"@1VotingInvite\")`\r\n        UpdatePerm = `ContractAccess(\"@1VotingDecisionReject\",\"@1VotingDecisionAccept\",\"@1VotingCandidateAccept\",\"@1VotingStatusUpdate\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `decision`\r\n            UpdatePerm = `ContractAccess(\"@1VotingCandidateAccept\",\"@1VotingDecisionAccept\",\"@1VotingDecisionReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `decision_date`\r\n            UpdatePerm = `ContractAccess(\"@1VotingCandidateAccept\",\"@1VotingDecisionAccept\",\"@1VotingDecisionReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `member`\r\n            UpdatePerm = `ContractAccess(\"@1VotingCandidateAccept\",\"@1VotingDecisionAccept\",\"@1VotingDecisionReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `rating`\r\n            UpdatePerm = `ContractAccess(\"@1VotingStatusUpdate\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `voting_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n\r\n        //====================================VOTINGS SUBJECT===================================================================\r\n        TableName  = `votings_subject`\r\n        InsertPerm = `ContractAccess(\"@1VotingSubjectCandidates\",\"@1VotingSubjectContract\",\"@1VotingSubjectDocument\")`\r\n        UpdatePerm = `ContractAccess(\"@1VotingCandidateAccept\",\"@1VotingDecisionAccept\",\"@1VotingDecisionReject\",\"@1VotingSubjectContract\",\"@1VotingSubjectDocument\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `number_accept`\r\n            UpdatePerm = `ContractAccess(\"@1VotingCandidateAccept\",\"@1VotingDecisionAccept\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `results`\r\n            UpdatePerm = `ContractAccess(\"@1VotingCandidateAccept\",\"@1VotingDecisionAccept\",\"@1VotingDecisionReject\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `subject`\r\n            UpdatePerm = `ContractAccess(\"@1VotingSubjectContract\",\"@1VotingSubjectDocument\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `voting_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //======================================================================================================================\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAccessManager {\r\n    data {\r\n        Action string\r\n        Rid int\r\n        ManagerRid string \"optional\"\r\n        Name string \"optional\"\r\n        Type int \"optional\"\r\n    }\r\n\r\n    func updateAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        DBUpdate(\"@1roles\", $Rid, {\"roles_access\": roles_access})\r\n    }\r\n\r\n    func updateBufferAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        var filled map\r\n        filled[\"roles_access\"] = roles_access\r\n        filled[\"role_name\"] = $Name\r\n        filled[\"role_type\"] = $Type\r\n\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, \"account\": $account_id, \"key\": \"roles_access\", \"value\": filled})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": filled})\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ManagerRid = Int($ManagerRid)\r\n        if $Rid > 0 {\r\n            @1RolesAccessCheck(\"Rid\", $Rid)\r\n\r\n            $role = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $Rid}).Columns(\"id,roles_access\").Row()\r\n            if !$role {\r\n                warning LangRes(\"@1role_not_found\", \"en\")\r\n            }\r\n            if $ManagerRid > 0 {\r\n                if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $ManagerRid}).One(\"id\") {\r\n                    warning LangRes(\"@1role_not_found\", \"en\")\r\n                }\r\n            }\r\n            var ids array, i int\r\n            $ids = ids\r\n            ids = JSONDecode($role[\"roles_access\"])\r\n            while i < Len(ids){\r\n                if ids[i] > 0 {\r\n                    $ids = Append($ids, ids[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"key\": \"roles_access\"}).Columns(\"id,value,value->roles_access\").Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value.roles_access\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Rid == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $Action == \"clean\" {\r\n            updateAccess([])\r\n        }\r\n        if $ManagerRid > 0 {\r\n            var i int, idsNew array\r\n            if $Action == \"remove\" {\r\n                while i < Len($ids) {\r\n                    if $ids[i] != $ManagerRid {\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if $Rid == 0 {\r\n                    updateBufferAccess(idsNew)\r\n                } else {\r\n                    updateAccess(idsNew)\r\n                }\r\n            }\r\n            if $Action == \"add\" {\r\n                var double bool\r\n                while i < Len($ids) {\r\n                    if $ids[i] == $ManagerRid {\r\n                        double = true\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $Rid == 0 {\r\n                    updateBufferAccess($ids)\r\n                } else {\r\n                    updateAccess($ids)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeploySections",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DeploySections {\r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    action {\r\n        // section Admin\r\n        var roles_access string section_admin section_developer int\r\n        section_admin = 2\r\n        roles_access = DBFind(\"sections\").Where({\"id\": section_admin}).One(\"roles_access\")\r\n\r\n        if !Contains(roles_access, \"1\") {\r\n            SectionRoles(\"Id,Rid,Operation\", section_admin, 1, \"add\")\r\n        }\r\n        if !Contains(roles_access, \"2\") {\r\n            SectionRoles(\"Id,Rid,Operation\", section_admin, 2, \"add\")\r\n        }\r\n\r\n        // section Developer\r\n        section_developer = 3\r\n        roles_access = DBFind(\"sections\").Where({\"id\": section_developer}).One(\"roles_access\")\r\n\r\n        if !Contains(roles_access, \"1\") {\r\n            SectionRoles(\"Id,Rid,Operation\", section_developer, 1, \"add\")\r\n        }\r\n        if !Contains(roles_access, \"2\") {\r\n            SectionRoles(\"Id,Rid,Operation\", section_developer, 2, \"add\")\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeploySystemPermissions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DeploySystemPermissions {\r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    action {\r\n        var TableName ColumnName InsertPerm UpdatePerm ReadPerm NewColPerm string\r\n\r\n        //====================================APP_PARAMS======================================================================\r\n        TableName  = `app_params`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `app_id`\r\n            UpdatePerm = `ContractAccess(\"@1ItemChangeAppId\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditAppParam\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1EditAppParam\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================APPLICATIONS====================================================================\r\n        TableName  = `applications`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditApplication\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1DelApplication\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `uuid`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================BAD_BLOCKS======================================================================\r\n        TableName  = `bad_blocks`\r\n        InsertPerm = `ContractAccess(\"@1NewBadBlock\")`\r\n        UpdatePerm = `ContractAccess(\"@1NewBadBlock\", \"@1CheckNodesBan\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `block_id`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `block_time`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `consumer_node_id`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `producer_node_id`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `reason`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================BINARIES========================================================================\r\n        TableName  = `binaries`\r\n        InsertPerm = `ContractAccess(\"@1UploadBinary\")`\r\n        UpdatePerm = `ContractAccess(\"@1UploadBinary\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `app_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `data`\r\n            UpdatePerm = `ContractAccess(\"@1UploadBinary\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `hash`\r\n            UpdatePerm = `ContractAccess(\"@1UploadBinary\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `mime_type`\r\n            UpdatePerm = `ContractAccess(\"@1UploadBinary\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================BLOCKS==========================================================================\r\n        TableName  = `blocks`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `app_id`\r\n            UpdatePerm = `ContractAccess(\"@1ItemChangeAppId\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditBlock\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1EditBlock\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================BUFFER_DATA=====================================================================\r\n        TableName  = `buffer_data`\r\n        InsertPerm = `true`\r\n        UpdatePerm = `true`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `key`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `true`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================CONTRACTS=======================================================================\r\n        TableName  = `contracts`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `app_id`\r\n            UpdatePerm = `ContractAccess(\"@1ItemChangeAppId\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `token_id`\r\n            UpdatePerm = `ContractAccess(\"@1EditContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1EditContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `wallet_id`\r\n            UpdatePerm = `ContractAccess(\"@1BindWallet\", \"@1UnbindWallet\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================DELAYED_CONTRACTS===============================================================\r\n        TableName  = `delayed_contracts`\r\n        InsertPerm = `ContractConditions(\"@1FullNodeCondition\")`\r\n        UpdatePerm = `ContractConditions(\"@1FullNodeCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `block_id`\r\n            UpdatePerm = `ContractAccess(\"@1CallDelayedContract\",\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `contract`\r\n            UpdatePerm = `ContractAccess(\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `counter`\r\n            UpdatePerm = `ContractAccess(\"@1CallDelayedContract\",\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `every_block`\r\n            UpdatePerm = `ContractAccess(\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `key_id`\r\n            UpdatePerm = `ContractAccess(\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `limit`\r\n            UpdatePerm = `ContractAccess(\"@1EditDelayedContract\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================ECOSYSTEMS======================================================================\r\n        TableName  = `ecosystems`\r\n        InsertPerm = `ContractAccess(\"@1NewEcosystem\")`\r\n        UpdatePerm = `ContractAccess(\"@1EditEcosystemName\",\"@1VotingVesAccept\",\"@1EcManageInfo\",\"@1TeCreate\",\"@1TeChange\",\"@1TeBurn\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `emission_amount`\r\n            UpdatePerm = `ContractAccess(\"@1TeCreate\",\"@1TeBurn\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `info`\r\n            UpdatePerm = `ContractAccess(\"@1EcManageInfo\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `is_valued`\r\n            UpdatePerm = `ContractAccess(\"@1VotingVesAccept\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `ContractAccess(\"@1EditEcosystemName\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `token_title`\r\n            UpdatePerm = `ContractAccess(\"@1TeCreate\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `type_emission`\r\n            UpdatePerm = `ContractAccess(\"@1TeCreate\",\"@1TeChange\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `type_withdraw`\r\n            UpdatePerm = `ContractAccess(\"@1TeCreate\",\"@1TeChange\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================HISTORY=========================================================================\r\n        TableName  = `history`\r\n        InsertPerm = `ContractAccess(\"@1TokensTransfer\",\"@1TeCreate\",\"@1TeBurn\")`\r\n        UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `amount`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `block_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `comment`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `created_at`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `recipient_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `sender_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `txhash`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `type`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================KEYS============================================================================\r\n        TableName  = `keys`\r\n        InsertPerm = `true`\r\n        UpdatePerm = `ContractAccess(\"@1TokensTransfer\",\"@1TokensLockoutMember\",\"@1MultiwalletCreate\",\"@1TeCreate\",\"@1TeBurn\",\"@1TokensDecDeposit\",\"@1TokensIncDeposit\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `pub`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `amount`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `maxpay`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deposit`\r\n            UpdatePerm = `ContractAccess(\"@1TokensDecDeposit\",\"@1TokensIncDeposit\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `multi`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\",\"@1FullNodeCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `blocked`\r\n            UpdatePerm = `ContractAccess(\"@1TokensLockoutMember\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================LANGUAGES=======================================================================\r\n        TableName  = `languages`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditLang\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `ContractAccess(\"@1EditLang\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `res`\r\n            UpdatePerm = `ContractAccess(\"@1EditLang\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================MEMBERS=========================================================================\r\n        TableName  = `members`\r\n        InsertPerm = `ContractAccess(\"@1ProfileEdit\")`\r\n        UpdatePerm = `ContractAccess(\"@1ProfileEdit\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `account`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `image_id`\r\n            UpdatePerm = `ContractAccess(\"@1ProfileEdit\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `member_info`\r\n            UpdatePerm = `ContractAccess(\"@1ProfileEdit\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `member_name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================MENU============================================================================\r\n        TableName  = `menu`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditMenu\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `title`\r\n            UpdatePerm = `ContractAccess(\"@1EditMenu\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1EditMenu\",\"@1AppendMenu\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================METRICS=========================================================================\r\n        TableName  = `metrics`\r\n        InsertPerm = `ContractAccess(\"@1UpdateMetrics\")`\r\n        UpdatePerm = `ContractAccess(\"@1UpdateMetrics\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `key`\r\n            UpdatePerm = `ContractAccess(\"@1UpdateMetrics\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `metric`\r\n            UpdatePerm = `ContractAccess(\"@1UpdateMetrics\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `time`\r\n            UpdatePerm = `ContractAccess(\"@1UpdateMetrics\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1UpdateMetrics\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================NODE_BAN_LOGS===================================================================\r\n        TableName  = `node_ban_logs`\r\n        InsertPerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n        UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `ban_time`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `banned_at`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `node_id`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `reason`\r\n            UpdatePerm = `ContractAccess(\"@1CheckNodesBan\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================NOTIFICATIONS===================================================================\r\n        TableName  = `notifications`\r\n        InsertPerm = `ContractAccess(\"@1NotificationsSend\", \"@1CheckNodesBan\", \"@1NotificationsBroadcast\")`\r\n        UpdatePerm = `ContractAccess(\"@1NotificationsSend\", \"@1NotificationsClose\", \"@1NotificationsProcess\", \"@1NotificationsUpdateParams\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `closed`\r\n            UpdatePerm = `ContractAccess(\"@1NotificationsClose\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_closed`\r\n            UpdatePerm = `ContractAccess(\"@1NotificationsClose\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_created`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_start_processing`\r\n            UpdatePerm = `ContractAccess(\"@1NotificationsClose\",\"@1NotificationsProcess\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `notification`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `page_name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `page_params`\r\n            UpdatePerm = `ContractAccess(\"@1NotificationsUpdateParams\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `processing_info`\r\n            UpdatePerm = `ContractAccess(\"@1NotificationsClose\",\"@1NotificationsProcess\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `recipient`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `sender`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================PAGES===========================================================================\r\n        TableName  = `pages`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `app_id`\r\n            UpdatePerm = `ContractAccess(\"@1ItemChangeAppId\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditPage\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `menu`\r\n            UpdatePerm = `ContractAccess(\"@1EditPage\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `validate_count`\r\n            UpdatePerm = `ContractAccess(\"@1EditPage\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `validate_mode`\r\n            UpdatePerm = `ContractAccess(\"@1EditPage\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1EditPage\",\"@1AppendPage\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================PARAMETERS======================================================================\r\n        TableName  = `parameters`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1EditParameter\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `permissions`\r\n            UpdatePerm = `ContractConditions(\"@1AdminCondition\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1EditParameter\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================ROLES===========================================================================\r\n        TableName  = `roles`\r\n        InsertPerm = `ContractAccess(\"@1RolesCreate\",\"@1DeployRoles\")`\r\n        UpdatePerm = `ContractAccess(\"@1RolesAccessManager\",\"@1RolesDelete\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `company_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `creator`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_created`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_deleted`\r\n            UpdatePerm = `ContractAccess(\"@1RolesDelete\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `default_page`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1RolesDelete\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `image_id`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `role_name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `role_type`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `roles_access`\r\n            UpdatePerm = `ContractAccess(\"@1RolesAccessManager\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================ROLES_PARTICIPANTS==============================================================\r\n        TableName  = `roles_participants`\r\n        InsertPerm = `ContractAccess(\"@1RolesAssign\",\"@1VotingDecisionCheck\",\"@1DeployRoles\")`\r\n        UpdatePerm = `ContractAccess(\"@1RolesUnassign\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `appointed`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_created`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `date_deleted`\r\n            UpdatePerm = `ContractAccess(\"@1RolesUnassign\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `deleted`\r\n            UpdatePerm = `ContractAccess(\"@1RolesUnassign\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `member`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `role`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================SECTIONS========================================================================\r\n        TableName  = `sections`\r\n        InsertPerm = `ContractConditions(\"DeveloperCondition\")`\r\n        UpdatePerm = `ContractConditions(\"DeveloperCondition\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `ecosystem`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `page`\r\n            UpdatePerm = `ContractAccess(\"@1EditSection\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `roles_access`\r\n            UpdatePerm = `ContractAccess(\"@1SectionRoles\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `status`\r\n            UpdatePerm = `ContractAccess(\"@1EditSection\",\"@1NewSection\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `title`\r\n            UpdatePerm = `ContractAccess(\"@1EditSection\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `urlname`\r\n            UpdatePerm = `ContractAccess(\"@1EditSection\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================SYSTEM_PARAMETERS===============================================================\r\n        TableName  = `system_parameters`\r\n        InsertPerm = `false`\r\n        UpdatePerm = `ContractAccess(\"@1UpdateSysParam\")`\r\n        NewColPerm = `ContractConditions(\"@1AdminCondition\")`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `conditions`\r\n            UpdatePerm = `ContractAccess(\"@1UpdateSysParam\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `value`\r\n            UpdatePerm = `ContractAccess(\"@1UpdateSysParam\")`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n\r\n        //====================================TIME_ZONES===============================================================\r\n        TableName  = `time_zones`\r\n        InsertPerm = `false`\r\n        UpdatePerm = `false`\r\n        NewColPerm = `false`\r\n        ReadPerm   = `true`\r\n        EditTable(\"Name,InsertPerm,UpdatePerm,ReadPerm,NewColumnPerm\", TableName, InsertPerm, UpdatePerm, ReadPerm, NewColPerm)\r\n\r\n            ColumnName = `name`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n\r\n            ColumnName = `offset`\r\n            UpdatePerm = `false`\r\n            ReadPerm   = `true`\r\n            EditColumn(\"TableName,Name,UpdatePerm,ReadPerm\", TableName, ColumnName, UpdatePerm, ReadPerm)\r\n        //====================================================================================================================\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeployVotingTemplates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DeployVotingTemplates {\r\n\r\n    func applyTemplate(m map, param string) {\r\n        var templateId paramId int\r\n        templateId = DBInsert(\"@1voting_templates\", m)\r\n\r\n        paramId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": param, \"ecosystem\": $ecosystem_id}).One(\"id\"))\r\n        if paramId > 0 {\r\n            @1EditAppParam(\"Id,Value\", paramId, templateId)\r\n        }\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    func installSystem() {\r\n        var template map\r\n\r\n        // Platform parameter\r\n        template[\"voting->name\"] = \"Voting for Platform Parameter\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 75\r\n        template[\"voting->quorum\"] = 75\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consortiumMemberRoleId\r\n        template[\"subject->contract_accept\"] = \"@1UpdateSysParam\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_platformparams\")\r\n\r\n        // Consortium Network Connection\r\n        template[\"voting->name\"] = \"Voting for Consortium Network Connection\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 75\r\n        template[\"voting->quorum\"] = 75\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consortiumMemberRoleId\r\n        template[\"subject->contract_accept\"] = \"@1UpdateSysParam\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_cn_connection\")\r\n\r\n        // Valued ecosystem\r\n        template[\"voting->name\"] = \"Voting for Valued Ecosystem\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consortiumMemberRoleId\r\n        template[\"subject->contract_accept\"] = \"VotingVesAccept\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_ves\")\r\n\r\n        // Token refund\r\n        template[\"voting->name\"] = \"Voting for Token Refund\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consortiumMemberRoleId\r\n        template[\"subject->contract_accept\"] = \"TokensRefundAccept\"\r\n        template[\"subject->contract_reject\"] = \"TokensRefundReject\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_tokenrefund\")\r\n\r\n        // Change parameter of the ecosystem\r\n        template[\"voting->name\"] = \"Voting for Ecosystem Parameter\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 75\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consortiumMemberRoleId\r\n        template[\"subject->contract_accept\"] = \"@1EditParameter\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_ecosysparams\")\r\n    }\r\n\r\n    func installCustom() {\r\n        var template map\r\n\r\n        // A decision by a simple majority of votes\r\n        template[\"voting->name\"] = \"Voting for Decision (simple majority of votes)\"\r\n        template[\"voting->type\"] = 1\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 3\r\n        template[\"voting->type_participants\"] = 1\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = 0\r\n        template[\"subject->contract_accept\"] = \"\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = $ecosystem_id\r\n        applyTemplate(template, \"voting_template_decision\")\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        $consortiumMemberRoleId = getRoleId(\"role_consortium_member\")\r\n    }\r\n\r\n    action {\r\n        var arr_templates array count_templates int\r\n        arr_templates = DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id})\r\n        count_templates = Len(arr_templates)\r\n\r\n        if count_templates == 0 {\r\n            if $ecosystem_id == 1 {\r\n                installSystem()\r\n            }\r\n            installCustom()      \r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "FormStateSave",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract FormStateSave {\r\n    data {\r\n        FormName string\r\n        ParamNames string\r\n        Param1 string \"optional\"\r\n        Param2 string \"optional\"\r\n        Param3 string \"optional\"\r\n        Param4 string \"optional\"\r\n        Param5 string \"optional\"\r\n        Param6 string \"optional\"\r\n        Param7 string \"optional\"\r\n        Param8 string \"optional\"\r\n        Param9 string \"optional\"\r\n        Param10 string \"optional\"\r\n        Param11 string \"optional\"\r\n        Param12 string \"optional\"\r\n        Param13 string \"optional\"\r\n        Param14 string \"optional\"\r\n        Param15 string \"optional\"\r\n        Param16 string \"optional\"\r\n        Param17 string \"optional\"\r\n        Param18 string \"optional\"\r\n        Param19 string \"optional\"\r\n        Param20 string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if $FormName == \"\" {\r\n            warning LangRes(\"@1form_state_name_needed\", \"en\")\r\n        }\r\n        if $ParamNames == \"\" {\r\n            warning LangRes(\"@1form_state_param_names_needed\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var val_array array\r\n        val_array = [$Param1,$Param2,$Param3,$Param4,$Param5,$Param6,$Param7,$Param8,$Param9,$Param10,$Param11,$Param12,$Param13,$Param14,$Param15,$Param16,$Param17,$Param18,$Param19,$Param20]\r\n        $ParamName = Split($ParamNames, \";\")\r\n        var buffer_data map, i int\r\n        i = 0\r\n        while i < Len($ParamName) {\r\n            buffer_data[$ParamName[i]] = val_array[i]\r\n            i = i + 1\r\n        }\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", $FormName, JSONEncode(buffer_data))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAccessCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAccessCheck {\r\n    data {\r\n        GroupId int\r\n    }\r\n\r\n    conditions {\r\n        var group map\r\n        group = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": $GroupId}).Columns(\"id,group_name,deleted,group_access,creator->account\").Row()\r\n        if !group {\r\n            warning Sprintf(\"%v: \" + \"group not found\", $this_contract)\r\n        }\r\n\r\n        if group[\"creator.account\"] == $account_id {\r\n            return\r\n        }\r\n\r\n        var gr_ids array\r\n        gr_ids = JSONDecode(group[\"group_access\"])\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": gr_ids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n            warning Sprintf(LangRes(\"@1group_change_no_permission\", \"en\"), group[\"group_name\"])\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsProcess",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsProcess {\r\n    data {\r\n        NotificId int\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $NotificId}).Columns(\"recipient->role_id,sender->type,date_start_processing\").Row()\r\n        if !$notify {\r\n            warning LangRes(\"@1notification_not_found\", \"en\")\r\n        }\r\n\r\n        if $notify[\"sender.type\"] == 2 {\r\n            if Int($notify[\"date_start_processing\"]) != 0 {\r\n                warning LangRes(\"@1notification_processing_started_already\", \"en\")\r\n            }\r\n            var rid string\r\n            rid = Int($notify[\"recipient.role_id\"])\r\n            if rid > 0{\r\n                if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": rid, \"member->account\": $account_id, \"deleted\": 0}).One(\"id\") {\r\n                    warning LangRes(\"@1notification_not_part_of_role\", \"en\")\r\n                }\r\n            }\r\n        } else {\r\n            if $notify[\"sender.type\"] != 1 {\r\n                warning LangRes(\"@1notification_type_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var model map\r\n        model[\"processing_info\"] = getMemberInfo($account_id)\r\n        model[\"date_start_processing\"] = $block_time\r\n        DBUpdate(\"@1notifications\", $NotificId, model)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsSend {\r\n    data {\r\n        MemberAccount string \"optional\"\r\n        Rid int \"optional\"\r\n        GroupId int \"optional\"\r\n        Closure int \"optional\"\r\n        Sender int\r\n        Icon string \"optional\"\r\n        Header string\r\n        Body string \"optional\"\r\n        Page string\r\n        Params string // json encoded expected\r\n        CurrentRid int \"optional\"\r\n        EcosystemId int \"optional\"\r\n        Popup string \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(account string, ecoId int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": ecoId, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Where({\"ecosystem\": ecoId, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    func sendNotify(recipient map) {\r\n        var notification map\r\n        notification[\"header\"] = $Header\r\n        notification[\"type\"] = $notify_type\r\n        notification[\"icon\"] = $Icon\r\n        notification[\"body\"] = $Body\r\n        if $Popup == \"true\" || $Popup == \"1\" {\r\n            notification[\"popup\"] = 1\r\n        } else {\r\n            notification[\"popup\"] = 0\r\n        }\r\n        var sender map\r\n        if $Sender == 1 && $senderMember {\r\n            // send from member\r\n            sender[\"type\"] = $Sender\r\n            sender[\"account\"] = $senderMember[\"account\"]\r\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\r\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\r\n        } else {\r\n            if $Sender == 2 && $senderRole {\r\n                // send from role\r\n                sender[\"type\"] = $Sender\r\n                sender[\"role_id\"] = $senderRole[\"id\"]\r\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\r\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\r\n            }\r\n        }\r\n        var model map\r\n        model[\"recipient\"] = recipient\r\n        model[\"sender\"] = sender\r\n        model[\"notification\"] = notification\r\n        model[\"page_name\"] = $Page\r\n        model[\"page_params\"] = $Params\r\n        model[\"date_created\"] = $block_time\r\n        model[\"ecosystem\"] = $EcosystemId\r\n        DBInsert(\"@1notifications\", model)\r\n    }\r\n\r\n    func sendToRole(roleId, ecoId int) {\r\n        var role recipient map\r\n        role = DBFind(\"@1roles\").Where({\"ecosystem\": ecoId, \"id\": roleId}).Row()\r\n        recipient[\"role_id\"] = role[\"id\"]\r\n        recipient[\"role_name\"] = role[\"role_name\"]\r\n        recipient[\"image_id\"] = role[\"image_id\"]\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    conditions {\r\n        if $EcosystemId == 0 {\r\n            $EcosystemId = $ecosystem_id\r\n        }\r\n        if Size($Icon) < 1 {\r\n            $Icon = \"icon-envelope\"\r\n        }\r\n        if $MemberAccount && $MemberAccount != \"0\" {\r\n            if !DBFind(\"@1keys\").Where({\"ecosystem\": $EcosystemId, \"account\": $MemberAccount, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1account_not_found\", \"en\")\r\n            }\r\n            $notify_type = 1\r\n        } elif $Rid > 0 {\r\n            $notify_type = 2\r\n            if !DBFind(\"@1roles\").Where({\"ecosystem\": $EcosystemId, \"id\": $Rid}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_role_not_found\", \"en\")\r\n            }\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $EcosystemId, \"role->id\": $Rid, \"deleted\": 0}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_role_no_members\", \"en\")\r\n            }\r\n        } elif $GroupId > 0 {\r\n            $notify_type = 1\r\n            if !DBFind(\"@1groups\").Where({\"ecosystem\": $EcosystemId, \"id\": $GroupId}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_group_not_found\", \"en\")\r\n            }\r\n            if !DBFind(\"@1groups_participants\").Where({\"ecosystem\": $EcosystemId, \"groups_info->id\": $GroupId, \"deleted\": 0}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_group_no_members\", \"en\")\r\n            }\r\n        } else {\r\n            warning $this_contract + \": \" + LangRes(\"@1notification_type_not_defined\", \"en\")\r\n        }\r\n        $senderMember = nil\r\n        $senderRole = nil\r\n        if $Sender == 1 {\r\n            $senderMember = getMemberInfo($account_id, $ecosystem_id)\r\n        } elif $Sender == 2 {\r\n            if !RoleAccess($CurrentRid) {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n            $senderRole = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $CurrentRid}).Row()\r\n            if !$senderRole {\r\n                warning $this_contract + \": \" + LangRes(\"@1sender_role_not_found\", \"en\")\r\n            }\r\n        } else {\r\n            warning $this_contract + \": \" + LangRes(\"@1sender_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $MemberAccount && $MemberAccount != \"0\" {\r\n            sendNotify(getMemberInfo($MemberAccount, $EcosystemId))\r\n            UpdateNotifications($EcosystemId, $MemberAccount)\r\n        } elif $Rid > 0 {\r\n            if $Closure == 1 {\r\n                // Single closure: one begins the process - the others do not see\r\n                sendToRole($Rid, $EcosystemId)\r\n                UpdateRolesNotifications($EcosystemId, Int($Rid))\r\n            } else {\r\n                // Multiple closure: to each his own notification\r\n                $notify_type = 1\r\n                var participants array\r\n                participants = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $EcosystemId, \"role->id\": $Rid, \"deleted\": 0}).Columns(\"member->account\")\r\n                var i int\r\n                while i < Len(participants) {\r\n                    var p map\r\n                    p = participants[i]\r\n                    sendNotify(getMemberInfo(p[\"member.account\"], $EcosystemId))\r\n                    UpdateNotifications($EcosystemId, p[\"member.account\"])\r\n                    i = i + 1\r\n                }\r\n            }\r\n        } elif $GroupId > 0 {\r\n            var participants array\r\n            participants = DBFind(\"@1groups_participants\").Where({\"ecosystem\": $EcosystemId, \"groups_info->id\": $GroupId, \"deleted\": 0}).Columns(\"member->account\")\r\n            var i int\r\n            while i < Len(participants) {\r\n                var p map\r\n                p = participants[i]\r\n                sendNotify(getMemberInfo(p[\"member.account\"], $EcosystemId))\r\n                UpdateNotifications($EcosystemId, p[\"member.account\"])\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupAccessManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupAccessManager {\r\n    data {\r\n        Action string\r\n        ManagerRid string \"optional\"\r\n        GroupId int \"optional\"\r\n        GroupName string \"optional\"\r\n        GroupType int \"optional\"\r\n        GroupInfo string \"optional\"\r\n    }\r\n\r\n    func updateAccess(ra array) {\r\n        var group_access string\r\n        group_access = JSONEncode(ra)\r\n        DBUpdate(\"@1groups\", $GroupId, {\"group_access\": group_access})\r\n    }\r\n\r\n    func updateBufferAccess(ra array) {\r\n        var groups_access string\r\n        groups_access = JSONEncode(ra)\r\n        var filled map\r\n        filled[\"groups_access\"] = groups_access\r\n        filled[\"group_name\"] = $GroupName\r\n        filled[\"group_type\"] = $GroupType\r\n        filled[\"group_information\"] = $GroupInfo\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"key\": \"group_access\", \"value\": filled})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": filled})\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ManagerRid = Int($ManagerRid)\r\n        if $GroupId > 0 {\r\n            @1GroupsAccessCheck(\"GroupId\", $GroupId)\r\n            $role = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": $GroupId}).Columns(\"id,group_access\").Row()\r\n            if !$role {\r\n                warning LangRes(\"@1group\" \"@1not_founded\", \"en\")\r\n            }\r\n            if $ManagerRid > 0 {\r\n                if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $ManagerRid}).One(\"id\") {\r\n                    warning LangRes(\"@1role_not_found\", \"en\")\r\n                }\r\n            }\r\n            var ids array, i int\r\n            $ids = ids\r\n            ids = JSONDecode($role[\"group_access\"])\r\n            while i < Len(ids){\r\n                if ids[i] > 0 {\r\n                    $ids = Append($ids, ids[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value.groups_access\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $GroupId == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $ManagerRid > 0 {\r\n            var i int idsNew array\r\n            if $Action == \"remove\" {\r\n                while i < Len($ids) {\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if $GroupId == 0 {\r\n                    updateBufferAccess(idsNew)\r\n                } else {\r\n                    updateAccess(idsNew)\r\n                }\r\n            }\r\n            if $Action == \"add\" {\r\n                var double bool\r\n                while i < Len($ids) {\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $GroupId == 0 {\r\n                    updateBufferAccess($ids)\r\n                } else {\r\n                    updateAccess($ids)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAssign {\r\n    data {\r\n        GroupId int\r\n        MemberAccount string\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Columns(\"id\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $group = DBFind(\"@1groups\").Where({\"id\": $GroupId}).Columns(\"id,deleted,group_type,group_name,image_id,creator->account\").Row()\r\n        if !$group {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $MemberAccount, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1account_not_found\", \"en\")\r\n        }\r\n        if Int($group[\"deleted\"]) == 1 {\r\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\r\n        }\r\n        if Int($group[\"group_type\"]) != 1 {\r\n            @1GroupsAccessCheck(\"GroupId\", $GroupId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": $GroupId, \"member->account\": $MemberAccount, \"deleted\": 0}).One(\"id\") {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n\r\n        var group member appointer map\r\n        group[\"id\"] = $group[\"id\"]\r\n        group[\"type\"] = $group[\"group_type\"]\r\n        group[\"name\"] = $group[\"group_name\"]\r\n        group[\"image_id\"] = $group[\"image_id\"]\r\n        member = getMemberInfo($MemberAccount)\r\n        appointer = getMemberInfo($account_id)\r\n\r\n        var m map\r\n        m[\"groups_info\"] = group\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = $block_time\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1groups_participants\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssignList",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAssignList {\r\n    data {\r\n        Keys string\r\n        GroupId int\r\n    }\r\n\r\n    func addPub(pub_key string) {\r\n        if HasPrefix(pub_key, \"04\") {\r\n            pub_key = Substr(pub_key, 2, Size(pub_key) - 2)\r\n        }\r\n        if Size(pub_key) < 128 {\r\n            warning LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size(pub_key) > 128 {\r\n            warning LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        var account_key int account string\r\n        account_key = PubToID(pub_key)\r\n        if account_key == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n        account = IdToAddress(account_key)\r\n        $check_user = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0})\r\n        if !$check_user {\r\n            warning Sprintf(\"%v: \" + \"key not found\", pub_key)\r\n        }\r\n\r\n        @1GroupsAssign(\"GroupId,MemberAccount\", $GroupId, account)\r\n    }\r\n\r\n    conditions {\r\n        if $Keys == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n        $Keys = Replace($Keys, \" \", \"\")\r\n        $Keys = Replace($Keys, \"\\n\", \"\")\r\n        $Keys = Replace($Keys, \"\\r\", \"\")\r\n    }\r\n\r\n    action {\r\n        if Contains($Keys, \",\") {\r\n            var pub_array array i int\r\n            pub_array = Split($Keys, \",\")\r\n            while i < Len(pub_array) {\r\n                var pub_key string\r\n                pub_key = Str(pub_array[i])\r\n                addPub(pub_key)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            addPub($Keys)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsCreate {\r\n    data {\r\n        GroupName string \"optional\"\r\n        GroupType int \"optional\"\r\n        GroupInfo string \"optional\"\r\n        GroupId int \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Columns(\"id\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $GroupId == 0 {\r\n            if $GroupName == \"\" {\r\n                info LangRes(\"@1group_name_cannot_be_empty\", \"en\")\r\n            }\r\n            if $GroupType == 0 {\r\n                info LangRes(\"@1group_type_error\", \"en\")\r\n            }\r\n        }\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        $check_access = AppParam(Int($system_app_id), \"role_creates_groups\", $ecosystem_id)\r\n        if $check_access != \"\" {\r\n            var rids array\r\n            rids = JSONDecode(\"[\" + $check_access + \"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        } else {\r\n            var admin_id string\r\n            admin_id = AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id)\r\n            var rids array\r\n            rids = JSONDecode(\"[\" + admin_id + \"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $GroupName == DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"group_name\": $GroupName}).One(\"group_name\") {\r\n            warning LangRes(\"@1group_name_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $GroupId == 0 {\r\n            var roles_access_arr array, buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\r\n            if buffer {\r\n                roles_access_arr = JSONDecode(buffer[\"value.groups_access\"])\r\n                var filled map\r\n                filled[\"groups_access\"] = []\r\n                filled[\"group_name\"] = \"\"\r\n                filled[\"group_type\"] = \"\"\r\n                filled[\"group_information\"] = \"\"\r\n                DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": filled})\r\n            }\r\n\r\n            var m map\r\n            m[\"creator\"] = getMemberInfo($account_id)\r\n            m[\"group_name\"] = $GroupName\r\n            m[\"group_type\"] = $GroupType\r\n            m[\"date_created\"] = $block_time\r\n            m[\"group_access\"] = JSONEncode(roles_access_arr)\r\n            m[\"group_info\"] = $GroupInfo\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            DBInsert(\"@1groups\", m)\r\n        } else {\r\n            var m map\r\n            m[\"group_info\"] = $GroupInfo\r\n            DBUpdate(\"@1groups\",$GroupId, m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsUnassign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsUnassign {\r\n    data {\r\n        RowId int\r\n    }\r\n\r\n    conditions {\r\n        var assigned map\r\n        assigned = DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"id\": $RowId, \"deleted\": 0}).Columns(\"id,ecosystem,deleted,groups_info->id,member->account\").Row()\r\n        if !assigned {\r\n            warning LangRes(\"@1group_participant_not_found\", \"en\")\r\n        }\r\n\r\n        var buffer_id int group map\r\n        buffer_id = Int(assigned[\"groups_info.id\"])\r\n\r\n        group = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).Row()\r\n        $groupId = Int(group[\"id\"])\r\n        $groupType = Int(group[\"group_type\"])\r\n\r\n        if $groupId == 0 {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if $groupType == 1 {\r\n            if assigned[\"member.account\"] != $account_id {\r\n                @1GroupsAccessCheck(\"GroupId\", $groupId)\r\n            }\r\n        } else {\r\n            @1GroupsAccessCheck(\"GroupId\", $groupId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"deleted\"] = 1\r\n        m[\"date_deleted\"] = $block_time\r\n        DBUpdate(\"@1groups_participants\", $RowId, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsDelete {\r\n    data {\r\n        GroupId int\r\n        Ops string\r\n    }\r\n\r\n    conditions {\r\n        @1GroupsAccessCheck(\"GroupId\", $GroupId)\r\n    }\r\n\r\n    action {\r\n        // delete all participants\r\n        var participants array i int\r\n        participants = DBFind(\"@1groups_participants\").Where({\"groups_info->id\": $GroupId, \"deleted\": 0}).Columns(\"id\")\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            @1GroupsUnassign(\"RowId\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        var m map\r\n        if $Ops == \"D\" {\r\n            m[\"deleted\"] = 1\r\n            m[\"date_deleted\"] = $block_time\r\n        }\r\n        if $Ops == \"R\" {\r\n            m[\"deleted\"] = 0\r\n        }\r\n        DBUpdate(\"@1groups\", $GroupId, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeployRoles",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DeployRoles {\r\n\r\n    func updateAppParam(name string, value int, appId int) {\r\n        var app_param map\r\n        app_param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": appId, \"name\": name}).Row()\r\n        if app_param {\r\n            var params map\r\n            params[\"Id\"] = Int(app_param[\"id\"])\r\n            params[\"Value\"] = value\r\n            params[\"Conditions\"] = \"ContractConditions(\\\"@1AdminCondition\\\")\"\r\n            CallContract(\"@1EditAppParam\", params)\r\n        } else {\r\n            var params map\r\n            params[\"ApplicationId\"] = appId\r\n            params[\"Name\"] = name\r\n            params[\"Value\"] = value\r\n            params[\"Conditions\"] = \"ContractConditions(\\\"@1AdminCondition\\\")\"\r\n            CallContract(\"@1NewAppParam\", params)\r\n        }\r\n    }\r\n\r\n    func addRole(name string, managerId int, roleType int) int{\r\n        var m map id int\r\n        m[\"role_name\"] = name\r\n        m[\"role_type\"] = roleType\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        id = DBFind(\"@1roles\").Where(m).One(\"id\")\r\n        if id == nil {\r\n            m[\"default_page\"] = \"\"\r\n            m[\"deleted\"] = 0\r\n            m[\"creator->image_id\"] = 0\r\n            m[\"creator->member_name\"] = \"founder\"\r\n            m[\"creator->account\"] = $account_id\r\n            m[\"date_created\"] = $block_time\r\n            if managerId > 0 {\r\n                m[\"roles_access\"] = Sprintf(\"[%v]\", managerId)\r\n            } else {\r\n                m[\"roles_access\"] = \"[]\"\r\n            }\r\n            id = DBInsert(\"@1roles\", m)\r\n        }\r\n        return Int(id)\r\n    }\r\n\r\n    func addParticipant(roleId int){\r\n        var m map\r\n        m = DBFind(\"@1roles\").Where({\"id\": roleId}).Columns(\"role_name,role_type\").Row()\r\n        if m != nil {\r\n            var participant map\r\n            participant[\"role->id\"] = roleId\r\n            participant[\"member->account\"] = $account_id\r\n            participant[\"ecosystem\"] = $ecosystem_id\r\n            participant[\"deleted\"] = 0\r\n\r\n            if !DBFind(\"@1roles_participants\").Where(participant).One(\"id\") {\r\n                participant[\"member->member_name\"] = \"founder\"\r\n                participant[\"member->image_id\"] = 0\r\n                participant[\"role->type\"] = m[\"role_type\"]\r\n                participant[\"role->name\"] = m[\"role_name\"]\r\n                participant[\"role->image_id\"] = 0\r\n                participant[\"date_created\"] = $block_time\r\n                DBInsert(\"@1roles_participants\", participant)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n        $app_system_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\"))\r\n    }\r\n\r\n    action {\r\n        var roleId managerId int\r\n        managerId = addRole(\"Admin\", 0, 3)\r\n        @1RolesAccessManager(\"Action,Rid,ManagerRid\", \"add\", managerId, managerId)\r\n        addParticipant(managerId)\r\n        updateAppParam(\"role_admin\", managerId, $app_system_id)\r\n        updateAppParam(\"role_creates_roles\", managerId, $app_system_id)\r\n\r\n        roleId = addRole(\"Developer\", managerId, 3)\r\n        addParticipant(roleId)\r\n        updateAppParam(\"role_developer\", roleId, $app_system_id)\r\n\r\n        if $ecosystem_id == 1 {\r\n            roleId = addRole(\"Consortium Member\", managerId, 3)\r\n            addParticipant(roleId)\r\n            updateAppParam(\"role_consortium_member\", roleId, $app_system_id)\r\n\r\n            roleId = addRole(\"Sidechain Node\", managerId, 3)\r\n            addParticipant(roleId)\r\n            updateAppParam(\"role_sidechain_node\", roleId, $app_system_id)\r\n\r\n            roleId = addRole(\"Investor with Voting Rights\", managerId, 3)\r\n            updateAppParam(\"role_investor_with_voting_rights\", roleId, $app_system_id)\r\n\r\n            roleId = addRole(\"Delegate\", managerId, 3)\r\n            updateAppParam(\"role_delegate\", roleId, $app_system_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipAdd",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipAdd {\r\n    data {\r\n        Keys string\r\n    }\r\n\r\n    func addPub(pub string) {\r\n        pub = Replace(pub, \" \", \"\")\r\n        if Size(pub) < 128 {\r\n            warning LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size(pub) > 130 {\r\n            warning LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        var account_key int account string\r\n        account_key = PubToID(pub)\r\n        if account_key == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n        account = IdToAddress(account_key)\r\n        $check_user = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0})\r\n        if $check_user {\r\n            warning LangRes(\"@1wallet_already_exists\", \"en\")\r\n        }\r\n        var pub_bytes bytes\r\n        pub_bytes = HexToPub(pub)\r\n        DBInsert(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"id\": account_key, \"account\": account, \"pub\": pub_bytes, \"deleted\": 0})\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        if $Keys == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n        $Keys = Replace($Keys, \" \", \"\")\r\n        $Keys = Replace($Keys, \"\\n\", \"\")\r\n        $Keys = Replace($Keys, \"\\r\", \"\")\r\n\r\n        var admin_id int\r\n        admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n\r\n        if !RoleAccess(admin_id) {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        if $ecosystem_id == 1 {\r\n            warning LangRes(\"@1impossible_for_platform_ecosystem\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Contains($Keys, \",\") {\r\n            var pub_array array\r\n            pub_array = Split($Keys, \",\")\r\n\r\n            var i int\r\n            while i < Len(pub_array) {\r\n                var pub_key string\r\n                pub_key = Str(pub_array[i])\r\n                addPub(pub_key)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            addPub($Keys)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsClose",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsClose {\r\n    data {\r\n        NotificId int\r\n    }\r\n\r\n    func getPermission() int {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensRefundAccept\", \"@1TokensRefundReject\", \"@1VotingDecisionCheck\", \"@1VotingDelete\", \"@1QAnswer\", \"@1QOperations\", \"@1ErrandDelete\", \"@1GroupRequestDecide\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n        return result\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $NotificId}).Columns(\"id,date_start_processing,processing_info->account,closed,notification->type,recipient->account,recipient->role_id\").Row()\r\n        if !$notify {\r\n            warning LangRes(\"@1notification_not_found\", \"en\")\r\n        }\r\n\r\n        // checking the type of notification\r\n        if $notify[\"notification.type\"] != 1 && $notify[\"notification.type\"] != 2 {\r\n            warning LangRes(\"@1notification_type_not_found\", \"en\")\r\n        }\r\n\r\n        // getting permission\r\n        var flag_permission int\r\n        flag_permission = getPermission()\r\n\r\n        // checking personal notification\r\n        if $notify[\"notification.type\"] == 1 && flag_permission == 0 {\r\n            if $notify[\"recipient.account\"] != $account_id {\r\n                warning LangRes(\"@1notification_another_member\", \"en\")\r\n            }\r\n        }\r\n\r\n        // checking role notification\r\n        if $notify[\"notification.type\"] == 2 && flag_permission == 0 {\r\n            if $notify[\"date_start_processing\"] == 0 {\r\n                warning LangRes(\"@1notification_processing_not_started\", \"en\")\r\n            }\r\n\r\n            if $notify[\"processing_info.account\"] != $account_id {\r\n                warning LangRes(\"@1notice_processing_started_another_member\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $notify[\"closed\"] > 0 {\r\n            return\r\n        }\r\n        if $notify[\"notification.type\"] == 1 {\r\n            @1NotificationsProcess(\"NotificId\", $NotificId)\r\n        }\r\n        var m map\r\n        m[\"date_closed\"] = $block_time\r\n        m[\"closed\"] = 1\r\n        DBUpdate(\"@1notifications\", $NotificId, m)\r\n\r\n        if $notify[\"notification.type\"] == 1 {\r\n            UpdateNotifications($ecosystem_id, $notify[\"recipient.account\"])\r\n        } else {\r\n            UpdateRolesNotifications($ecosystem_id, Int($notify[\"recipient.role_id\"]))\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestMembership",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupRequestMembership {\r\n    data {\r\n        GroupId int\r\n    }\r\n\r\n    conditions {\r\n        $group = DBFind(\"@1groups\").Where({\"id\": $GroupId}).Columns(\"id,deleted,group_type,group_name,image_id,creator->account,group_access,group_name\").Row()\r\n        if !$group {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1account_not_found\", \"en\")\r\n        }\r\n        if $group[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\r\n        }\r\n        $check_join = DBFind(\"@1groups_participants\").Where({\"deleted\": 0, \"member->account\": $account_id, \"groups_info->id\": $GroupId, \"ecosystem\": $ecosystem_id}).Columns(\"id,deleted,member,member->account,groups_info,groups_info->id,ecosystem\").One(\"id\")\r\n        if $check_join {\r\n            warning LangRes(\"@1already_group\", \"en\")\r\n        }\r\n        $check_send_notific = DBFind(\"@1notifications\").Where({\"sender->account\": $account_id, \"page_params->gr_id\": $GroupId, \"closed\": 0, \"ecosystem\": $ecosystem_id}).Columns(\"id,closed,ecosystem,sender,sender->account,page_params->gr_id\").One(\"id\")\r\n        if $check_send_notific {\r\n            info LangRes(\"@1request_to_group\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var gr_ids array i int icon header body page ecoName string\r\n\r\n        var params map\r\n        params[\"gr_id\"] = $GroupId\r\n        params[\"account\"] = $account_id\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"New request\"\r\n        body = \"New request to the group \" + Str($group[\"group_name\"])\r\n        page = \"@1groups_request_view\"\r\n\r\n        gr_ids = JSONDecode($group[\"group_access\"])\r\n        if Len(gr_ids) > 0 {\r\n            while i < Len(gr_ids) {\r\n                var id_role int\r\n                id_role = Int(gr_ids[i])\r\n                @1NotificationsSend(\"Rid,Sender,Icon,Header,Body,Page,Params,EcosystemId,Closure\", id_role, 1, icon, header, body, page, params, $ecosystem_id, 1)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $creator_id = $group[\"creator.account\"]\r\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params,EcosystemId\", $creator_id, 1, icon, header, body, page, params, $ecosystem_id)\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MetricsUpdate {\r\n    data {\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n\r\n    func mapping(items array) map {\r\n        var mapout map, i int\r\n        while i < Len(items) {\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i = i + 1\r\n        }\r\n        return mapout\r\n    }\r\n\r\n    conditions {\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = Int(Substr(BlockTime(), 0, 4))\r\n        if $Interval > (current_year - 1970) * 365 {\r\n            warning LangRes(\"@1interval_too_big\", \"en\")\r\n        }\r\n        $interval = Sprintf(LangRes(\"@1x_days\", \"en\"), $Interval)\r\n    }\r\n\r\n    action {\r\n        var pages members txs array metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n\r\n        var i lenPages int\r\n        lenPages = Len(pages)\r\n        while i < lenPages {\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(LangRes(\"@1pages\", \"en\") + \": %v, \" + LangRes(\"@1members\", \"en\") + \": %v, \" + LangRes(\"@1tx\", \"en\") + \": %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i = i + 1\r\n        }\r\n\r\n        if lenPages > 0 {\r\n            @1BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsBroadcast",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsBroadcast {\r\n    data {\r\n        RoleId int\r\n        Header string\r\n        Body string\r\n        Popup string \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $RoleId != 1 {\r\n            warning LangRes(\"@1admin_only_action\", \"en\")\r\n        }\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1first_ecosystem_admin_only_action\", \"en\")\r\n        }\r\n        $ecos = DBFind(\"@1ecosystems\").Columns(\"id\")\r\n        $lenEcos = Len($ecos)\r\n        if $lenEcos == 1 {\r\n            warning LangRes(\"@1other_ecosystems_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i lenIds int eco map ids array sender recipient params note map\r\n        sender = getMemberInfo($account_id)\r\n        sender[\"type\"] = 1\r\n        note[\"header\"] = $Header\r\n        note[\"type\"] = 1\r\n        note[\"icon\"] = \"icon-envelope\"\r\n        note[\"body\"] = $Body\r\n        if $Popup == \"true\" || $Popup == \"1\" {\r\n            note[\"popup\"] = 1\r\n        } else {\r\n            note[\"popup\"] = 0\r\n        }\r\n\r\n        while i < $lenEcos {\r\n            eco = $ecos[i]\r\n            var ecoId int\r\n            ecoId = Int(eco[\"id\"])\r\n            if ecoId != 1 {\r\n                $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": ecoId, \"name\": \"System\"}).One(\"id\")\r\n                var adminRoleId int\r\n                adminRoleId = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n                ids = DBFind(\"@1roles_participants\").Where({\"ecosystem\": ecoId, \"role->id\": adminRoleId, \"role->type\": 3}).Columns(\"member->account\")\r\n                lenIds = Len(ids)\r\n                var i_ids int\r\n                while i_ids < lenIds {\r\n                    recipient = ids[i_ids]\r\n                    recipient = getMemberInfo(recipient[\"member.account\"])\r\n                    var m map\r\n                    m[\"recipient\"] = recipient\r\n                    m[\"sender\"] = sender\r\n                    m[\"notification\"] = note\r\n                    m[\"page_name\"] = \"@1notifications_show\"\r\n                    m[\"page_params\"] = params\r\n                    m[\"date_created\"] = $block_time\r\n                    m[\"ecosystem\"] = ecoId\r\n                    DBInsert(\"@1notifications\", m)\r\n                    i_ids = i_ids + 1\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestDecide",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupRequestDecide {\r\n    data {\r\n        NotificId int\r\n        Accept int\r\n    }\r\n\r\n    conditions {\r\n        $notific = DBFind(\"@1notifications\").WhereId($NotificId).Columns(\"id,closed,page_params->gr_id,page_params->account,sender,sender->account,recipient,recipient->role_id\").Row()\r\n        if $notific[\"closed\"] == 1 {\r\n            warning LangRes(\"@1request_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        $gr_id = Int($notific[\"page_params.gr_id\"])\r\n        $account = Int($notific[\"page_params.account\"])\r\n        if $Accept == 1 {\r\n            @1GroupsAssign(\"GroupId,MemberAccount\", $gr_id, $account)\r\n        }\r\n        var params map\r\n        params[\"gr_id\"] = $gr_id\r\n        if $Accept == 1 {\r\n            params[\"decide\"] = 1\r\n        } else {\r\n            params[\"decide\"] = -1\r\n        }\r\n        var icon header body page ecoName string member i int\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"Request to group\"\r\n        body = \"Solution for your request\"\r\n        page = \"@1groups_request_view\"\r\n        member = $notific[\"sender.account\"]\r\n        if $notific[\"recipient.role_id\"] > 0 {\r\n            var check_send_notific array v map i int\r\n            check_send_notific = DBFind(\"@1notifications\").Columns(\"id,closed,ecosystem,sender,sender->account,page_params->gr_id,page_params->account\").Where({\"sender->account\": member, \"page_params->gr_id\": $gr_id, \"page_params->account\": member, \"closed\": 0, \"ecosystem\": $ecosystem_id})\r\n            while i < Len(check_send_notific) {\r\n                v = check_send_notific[i]\r\n                @1NotificationsProcess(\"NotificId\", Int(v[\"id\"]))\r\n                @1NotificationsClose(\"NotificId\", Int(v[\"id\"]))\r\n                i = i + 1\r\n            }\r\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params,EcosystemId,CurrentRid\", member, 2, icon, header, body, page, params, $ecosystem_id, Int($notific[\"recipient.role_id\"]))\r\n        } else{\r\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params,EcosystemId\", member, 1, icon, header, body, page, params, $ecosystem_id)\r\n            @1NotificationsClose(\"NotificId\", $NotificId)\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipDecide {\r\n    data {\r\n        NotificId int\r\n        Accept int\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        $request = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $NotificId}).Columns(\"id,closed,sender->account,page_params->ecosystem_id,page_params->ecosystem_sender\").Row()\r\n        var ecoId int\r\n        ecoId = Int($request[\"page_params.ecosystem_id\"])\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning LangRes(\"@1request_processed_already\", \"en\")\r\n        }\r\n\r\n        var admin_id int\r\n        admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n        if !RoleAccess(admin_id) {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if $Accept == 1 {\r\n            params[\"status\"] = 1\r\n            var pub account string eco_id account_key int\r\n            account = $request[\"sender.account\"]\r\n            account_key = AddressToId(account)\r\n            eco_id = Int($request[\"page_params.ecosystem_id\"])\r\n            pub = DBFind(\"@1keys\").Where({\"ecosystem\": 1, \"account\": account, \"deleted\": 0}).One(\"pub\")\r\n            DBInsert(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"id\": account_key, \"account\": account, \"pub\": pub, \"deleted\": 0})\r\n        } else {\r\n            params[\"status\"] = 0\r\n        }\r\n\r\n        var icon header body page ecoName ecoId string\r\n        ecoId = $request[\"page_params.ecosystem_id\"]\r\n        ecoName = DBFind(\"@1ecosystems\").Where({\"id\": ecoId}).One(\"name\")\r\n        icon = \"icon icon-user-follow\"\r\n        header = LangRes(\"@1request_approved\", \"en\")\r\n        body = Sprintf(LangRes(\"@1ecosystem_request_approved\", \"en\"), ecoName, ecoId)\r\n        page = \"@1membership_user_view\"\r\n\r\n        @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params,EcosystemId\", $request[\"sender.account\"], 1, icon, header, body, page, params, Int($request[\"page_params.ecosystem_sender\"]))\r\n        @1NotificationsProcess(\"NotificId\", $NotificId)\r\n        @1NotificationsClose(\"NotificId\", $NotificId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipRequest {\r\n    data {\r\n        EcosystemId int\r\n    }\r\n\r\n    conditions {\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1contract_first_ecosystem_only\", \"en\")\r\n        }\r\n\r\n        if $EcosystemId == 1 {\r\n            warning LangRes(\"@1impossible_for_platform_ecosystem\", \"en\")\r\n        }\r\n\r\n        if !DBFind(\"@1ecosystems\").Where({\"id\": $EcosystemId}).One(\"id\"){\r\n            warning Sprintf(LangRes(\"@1template_eco_not_exist\", \"en\"), $EcosystemId)\r\n        }\r\n\r\n        if DBFind(\"@1keys\").Where({\"ecosystem\": $EcosystemId, \"account\": $account_id, \"deleted\": 0}) {\r\n            warning LangRes(\"@1member_added_before\", \"en\")\r\n        }\r\n\r\n        $free_membership = Int(DBFind(\"@1parameters\").Where({\"ecosystem\": $EcosystemId, \"name\": \"free_membership\"}).One(\"value\"))\r\n        if $free_membership == 0 {\r\n            if DBFind(\"@1notifications\").Where({\"ecosystem\": $EcosystemId, \"page_params->ecosystem_id\": $EcosystemId, \"sender->account\": $account_id, \"closed\": 0, \"page_name\": \"@1membership_admin_view\"}).Row(){\r\n                warning LangRes(\"@1request_sent_already\", \"en\")\r\n            }\r\n\r\n            $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $EcosystemId, \"name\": \"System\"}).One(\"id\")\r\n            $admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $EcosystemId))\r\n            \r\n            if $admin_id == 0 {\r\n                warning LangRes(\"@1recipient_role_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $free_membership == 0 {\r\n            var notific_params map\r\n            notific_params[\"ecosystem_id\"] = $EcosystemId\r\n            notific_params[\"ecosystem_sender\"] = $ecosystem_id\r\n\r\n            @1NotificationsSend(\"Rid,Sender,Icon,Header,Body,Page,Params,Closure,EcosystemId\", $admin_id, 1, \"icon icon-user-follow\", LangRes(\"@1membership_request_new\", \"en\"), LangRes(\"@1details_view\", \"en\"), \"@1membership_admin_view\", notific_params,1,$EcosystemId)\r\n        }\r\n        if $free_membership == 1 {\r\n            var pub string account_key int\r\n            account_key = AddressToId($account_id)\r\n            pub = DBFind(\"@1keys\").Where({\"ecosystem\": 1, \"account\": $account_id, \"deleted\": 0}).One(\"pub\")\r\n            DBInsert(\"@1keys\", {\"ecosystem\": $EcosystemId, \"id\": account_key, \"account\": $account_id, \"pub\": pub, \"deleted\": 0})\r\n\r\n            var params map\r\n            params[\"ecosystem_id\"] = $EcosystemId\r\n            params[\"status\"] = 1\r\n\r\n            var icon header body page ecoName string\r\n            ecoName = DBFind(\"@1ecosystems\").Where({\"id\": $EcosystemId}).One(\"name\")\r\n            icon = \"icon icon-user-follow\"\r\n            header = LangRes(\"@1request_approved\", \"en\")\r\n            body = Sprintf(LangRes(\"@1ecosystem_request_approved\", \"en\"), ecoName, $EcosystemId)\r\n            page = \"@1membership_user_view\"\r\n\r\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params,EcosystemId\", $account_id, 1, icon, header, body, page, params, $ecosystem_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsUpdateParams",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsUpdateParams {\r\n    data {\r\n        Params map\r\n        NotificId int\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1ErrandDecision\", \"@1ErrandStatusUpdate\", \"@1ErrandDelete\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            if prevContract == array_permissions[i] {\r\n                return\r\n            }\r\n            i = i + 1\r\n        }\r\n        warning LangRes(\"@1access_denied\", \"en\")\r\n    }\r\n\r\n    conditions {\r\n        getPermission() //getting permission to run\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1notifications\",$NotificId,$Params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "PlatformAppsSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract PlatformAppsSettings {\r\n    data {\r\n        RoleAdmin int\r\n        RoleConsortiumMember int\r\n        RoleDelegate int\r\n        RoleDeveloper int\r\n        RoleInvestor int\r\n        RoleCreatesRoles int\r\n    }\r\n \r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    func updateParam(name string, value int) {\r\n        if value > 0 {\r\n            var param paramsNew map\r\n            if $app_id > 0 {\r\n                param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": $app_id, \"name\": name}).Row()\r\n                if param {\r\n                    paramsNew[\"Id\"] = Int(param[\"id\"])\r\n                    paramsNew[\"Value\"] = Str(value)\r\n                    paramsNew[\"Conditions\"] = param[\"conditions\"]\r\n                    CallContract(\"@1EditAppParam\", paramsNew)\r\n                } else {\r\n                    paramsNew[\"ApplicationId\"] = $app_id\r\n                    paramsNew[\"Name\"] = name\r\n                    paramsNew[\"Value\"] = Str(value)\r\n                    paramsNew[\"Conditions\"] = \"ContractConditions(\\\"AdminCondition\\\")\"\r\n                    CallContract(\"@1NewAppParam\", paramsNew)\r\n                }\r\n            } else {\r\n                warning LangRes(\"@1app_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        updateParam(\"role_admin\", $RoleAdmin)\r\n        updateParam(\"role_consortium_member\", $RoleConsortiumMember)\r\n        updateParam(\"role_delegate\", $RoleDelegate)\r\n        updateParam(\"role_developer\", $RoleDeveloper)\r\n        updateParam(\"role_investor_with_voting_rights\", $RoleInvestor)\r\n        updateParam(\"role_creates_roles\", $RoleCreatesRoles)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEdit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ProfileEdit {\r\n    data {\r\n        Name string\r\n        Info string \"optional\"\r\n        ImageId string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id}).Row()\r\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\", \"deleted\": 0}).One(\"id\")\r\n        $ImageId = Int($ImageId)\r\n\r\n        if !$Name {\r\n            warning LangRes(\"@1member_name_empty\", \"en\")\r\n        }\r\n        if !$member {\r\n            // check member_name\r\n            if DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"member_name\": $Name}).One(\"id\") {\r\n                warning LangRes(\"@1member_name_taken\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $ImageId > 0 {\r\n            $Data = DBFind(\"@1binaries\").Where({\"ecosystem\": $ecosystem_id, \"id\": $ImageId}).One(\"data\")\r\n            $ImageId = @1UploadBinary(\"Name,Data,ApplicationId\", \"avatar\", $Data, Int($app_id))\r\n        }\r\n\r\n        var m map\r\n        m[\"member_info\"] = {information: $Info}\r\n        m[\"image_id\"] = $ImageId\r\n\r\n        if $member {\r\n            DBUpdateExt(\"@1members\", {\"ecosystem\": $ecosystem_id, \"account\": $account_id}, m)\r\n        } else {\r\n            m[\"account\"] = $account_id\r\n            m[\"member_name\"] = $Name\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            DBInsert(\"@1members\", m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RoleConditions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RoleConditions {\r\n    data {\r\n        Role string\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->name\": $Role, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n            warning Sprintf(LangRes(\"@1x_role_only_action\", \"en\"), $Role)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesUnassign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesUnassign {\r\n    data {\r\n        RowId int\r\n    }\r\n\r\n    conditions {\r\n        var assigned map roleId int\r\n        assigned = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"id\": $RowId, \"deleted\": 0}).Columns(\"id,role->id\").Row()\r\n        if !assigned {\r\n            warning LangRes(\"@1role_participant_not_found\", \"en\")\r\n        }\r\n        var buffer_id int\r\n        buffer_id = Int(assigned[\"role.id\"])\r\n        roleId = Int(DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).One(\"id\"))\r\n        if roleId == 0 {\r\n            warning LangRes(\"@1role_not_found_in_registry\", \"en\")\r\n        }\r\n\r\n        var specialRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev_contract = $stack[Len($stack) - 2]\r\n        }\r\n        specialRules[\"@1DelegateRefresh\"] = 1\r\n        specialRules[\"@1InvestorRefresh\"] = 1\r\n\r\n        if specialRules[prev_contract] != 1 {\r\n            @1RolesAccessCheck(\"Rid\", roleId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"deleted\"] = $block_time\r\n        m[\"date_deleted\"] = $block_time\r\n        DBUpdate(\"@1roles_participants\", $RowId, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Deploy",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract Deploy {\r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    action {\r\n        DeploySystemPermissions()\r\n        DeployBasicPermissions()\r\n        DeployRoles()\r\n        DeploySections()\r\n        DeployVotingTemplates()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DelegateRefresh {\r\n\r\n    func notInArray(val string, arr array) bool {\r\n        var i int\r\n        // info arr\r\n        while i < Len(arr) {\r\n            if val == arr[i] {\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var roleId int\r\n        roleId = getRoleId(\"role_delegate\")\r\n        $role = DBFind(\"@1roles\").Where({\"id\": roleId, \"deleted\": 0}).Row()\r\n        if !$role {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\r\n        ecosystems = DBFind(\"@1ecosystems\").Columns(\"id\")\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"@1parameters\").Where({\"name\": \"delegate_account\", \"ecosystem\": ecoId}).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"@1parameters\").Where({\"name\": \"founder_account\", \"ecosystem\": ecoId}).Row()\r\n            }\r\n\r\n            if notInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        rid = Int($role[\"id\"])\r\n        currentDelegates = DBFind(\"@1roles_participants\").Where({\"role->id\": rid, \"deleted\": 0}).Columns(\"id,member->account\")\r\n        var delegate map id int\r\n        i = 0\r\n        while i < Len(currentDelegates) {\r\n            delegate = currentDelegates[i]\r\n            var memberKey string\r\n            memberKey = Str(AddressToId(delegate[\"member.account\"]))\r\n            if notInArray(memberKey, delegateIds){\r\n                id = Int(delegate[\"id\"])\r\n                @1RolesUnassign(\"RowId\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        var key map delegateId int\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            delegateId = Int(delegateIds[i])\r\n            var delegateAccount string\r\n            delegateAccount = IdToAddress(delegateId)\r\n            key = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": delegateAccount, \"deleted\": 0}).Row()\r\n            if key {\r\n                // check role dup\r\n                if !DBFind(\"@1roles_participants\").Where({\"member->account\": delegateAccount, \"role->id\": rid, \"deleted\": 0}).Row(){\r\n                    @1RolesAssign(\"Rid,MemberAccount\", rid, delegateAccount)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesCreate {\r\n    data {\r\n        Name string\r\n        Type int\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        // system role\r\n        if $Type == 3 {\r\n            warning LangRes(\"@1system_role_can_not_create\", \"en\")\r\n        }\r\n\r\n         // check role_creates_roles\r\n        $check_access = AppParam(Int($system_app_id), \"role_creates_roles\", $ecosystem_id)\r\n        if $check_access && Str($check_access) != \"0\" {\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+$check_access+\"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        } else {\r\n            var admin_id string\r\n            admin_id = AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id)\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+admin_id+\"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $Name == DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"role_name\": $Name}).One(\"role_name\") {\r\n            warning LangRes(\"@1role_exists\", \"en\")\r\n        }\r\n        if Size($Name) < 3 || Size($Name) > 30 {\r\n            warning LangRes(\"@1name\", \"en\") + \" \" + LangRes(\"@1validate_role_name\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var roles_access_arr array, buffer map\r\n        buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"key\": \"roles_access\"}).Columns(\"id,value,value->roles_access\").Row()\r\n        if buffer {\r\n            roles_access_arr = JSONDecode(buffer[\"value.roles_access\"])\r\n            var filled map\r\n            filled[\"roles_access\"] = []\r\n            filled[\"role_name\"] = \"\"\r\n            filled[\"role_type\"] = \"\"\r\n            DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": filled})\r\n        }\r\n        var m map\r\n        m[\"creator\"] = getMemberInfo($account_id)\r\n        m[\"role_name\"] = $Name\r\n        m[\"role_type\"] = $Type\r\n        m[\"date_created\"] = $block_time\r\n        m[\"roles_access\"] = JSONEncode(roles_access_arr)\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        $result = DBInsert(\"@1roles\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract InvestorRefresh {\r\n    data {\r\n        RoleId int\r\n    }\r\n\r\n    func notInArray(val string, arr array) bool {\r\n        var i lenArr int\r\n        lenArr = Len(arr)\r\n        while i < lenArr {\r\n            if val == Str(arr[i]) {\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n\r\n    func getParamInt(id int, name string) int {\r\n        var param int\r\n        param = Int(AppParam(id, name, 1))\r\n        if param == 0 {\r\n            warning Sprintf(LangRes(\"@1application_parameter_not_set\", \"en\"), name)\r\n        }\r\n        return param\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\", \"deleted\": 0}).One(\"id\"))\r\n        if appId == 0 {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n\r\n        var roleConsortiumMemberId roleInvestorId string\r\n\r\n        roleConsortiumMemberId = getRoleId(\"role_consortium_member\")\r\n        if !RoleAccess(roleConsortiumMemberId) {\r\n            warning LangRes(\"@1consortium_members_only\", \"en\")\r\n        }\r\n\r\n        roleInvestorId = getRoleId(\"role_investor_with_voting_rights\")\r\n        $roleId = Int(DBFind(\"@1roles\").Where({\"id\": roleInvestorId, \"deleted\": 0}).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning LangRes(\"@1investor_role_not_found_or_removed\", \"en\")\r\n        }\r\n\r\n        $limitInvestors = getParamInt(appId, \"investors_number\")\r\n    }\r\n\r\n    action {\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0}).Columns(\"account\").Order({\"amount\": \"-1\", \"id\": \"-1\"}).Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"@1roles_participants\").Where({\"role->id\": $roleId, \"deleted\": 0}).Columns(\"member->account\")\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"account\"]\r\n            i = i + 1\r\n        }\r\n        i = 0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.account\"]\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old investors\r\n        var assigned map mid string\r\n        i = 0\r\n        while i < Len(assignedIds) {\r\n            if notInArray(assignedIds[i], investorsIds){\r\n                mid = assignedIds[i]\r\n                assigned = DBFind(\"@1roles_participants\").Where({\"member->account\": mid, \"role->id\": $roleId}).Row()\r\n                if assigned {\r\n                    @1RolesUnassign(\"RowId\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // add new investors\r\n        i = 0\r\n        while i < Len(investorsIds) {\r\n            if notInArray(investorsIds[i], assignedIds){\r\n                var account string\r\n                account = investorsIds[i]\r\n                if DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row(){\r\n                    @1RolesAssign(\"Rid,MemberAccount\", $roleId, account)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRequest {\r\n    data {\r\n        Rid int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"@1roles\").WhereId($Rid).One(\"id\") {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1roles_participants\").Where({\"role->id\": $Rid, \"member->account\": $account_id, \"deleted\": 0}).One(\"id\") {\r\n            warning LangRes(\"@1role_you_added_already\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"page_name\": \"@1roles_request_view\", \"page_params->rid\": $Rid, \"sender->account\": $account_id, \"closed\": 0}).One(\"id\") {\r\n            warning LangRes(\"@1request_sent_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"rid\"] = $Rid\r\n\r\n        var founder_id int founder_account string\r\n        founder_id = Int(EcosysParam(\"founder_account\"))\r\n        founder_account = IdToAddress(founder_id)\r\n\r\n        @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", founder_account, 1, \"fa-bars\", LangRes(\"@1roles\", \"en\"), LangRes(\"@1new_request_received\", \"en\"), \"@1roles_request_view\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequestDecision",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRequestDecision {\r\n    data {\r\n        Decision int\r\n        NotificId int\r\n        Rid int \"optional\"\r\n        MemberAccount string \"optional\"\r\n    }\r\n\r\n    conditions {}\r\n\r\n    action {\r\n        if $Decision == 1 {\r\n            @1RolesAssign(\"Rid,MemberAccount\", $Rid, $MemberAccount)\r\n        }\r\n\r\n        if $NotificId > 0 {\r\n            @1NotificationsClose(\"NotificId\", $NotificId)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRestore",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRestore {\r\n    data {\r\n        Rid int\r\n    }\r\n\r\n    conditions {\r\n        @1RolesAccessCheck(\"Rid\", $Rid)\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1roles\", $Rid, {deleted:0})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesDelete {\r\n    data {\r\n        Rid int\r\n        Ops string\r\n    }\r\n\r\n    conditions {\r\n        @1RolesAccessCheck(\"Rid\", $Rid)\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"@1roles_participants\").Where({\"role->id\": $Rid, \"deleted\": 0}).Columns(\"id\")\r\n\r\n        // delete all participants\r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            @1RolesUnassign(\"RowId\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n        var m map\r\n        if $Ops == \"D\" {\r\n            m[\"deleted\"] = 1\r\n            m[\"date_deleted\"] = $block_time\r\n        }\r\n        if $Ops == \"R\" {\r\n            m[\"deleted\"] = 0\r\n        }\r\n        DBUpdate(\"@1roles\", $Rid, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensDecDeposit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensDecDeposit {\r\n    data {\r\n        MemberAccount string\r\n        Amount money\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1InvestTransfer\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name == prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1deposit_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n    \r\n    conditions {\r\n        getPermission()   //getting permission to run\r\n    }\r\n\r\n    action {\r\n        var s map\r\n        s[\"-deposit\"] = $Amount\r\n        DBUpdateExt(\"@1keys\", {\"account\": $MemberAccount, \"deleted\": 0}, s)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensIncDeposit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensIncDeposit {\r\n    data {\r\n        Amount money\r\n    }\r\n\r\n    conditions {\r\n        $amount = DBFind(\"@1keys\").Where({\"account\": $account_id, \"deleted\": 0}).Row()\r\n        if Money($Amount) > (Money($amount[\"amount\"]) - Money($amount[\"deposit\"])){\r\n            warning LangRes(\"@1insufficient_funds\", \"en\")\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var s map\r\n        s[\"+deposit\"] = $Amount\r\n        DBUpdateExt(\"@1keys\", {\"account\": $account_id, \"deleted\": 0}, s)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "BlockMember",
            "Conditions": "ContractConditions(\"@1AdminCondition\")",
            "Value": "contract BlockMember {\r\n    data {\r\n        MemberAccount string\r\n        Value int\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"@1AdminCondition\")\r\n    }\r\n\r\n    action {\r\n        @1TokensLockoutMember(\"MemberAccount,Value\", $MemberAccount, $Value)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensTransfer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensTransfer {\r\n    data {\r\n        Amount money\r\n        SenderAccount string\r\n        RecipientAccount string\r\n        Comment string \"optional\"\r\n        Ecosystem int \"optional\"\r\n    }\r\n\r\n    func getEcosystem() {\r\n        $e_id = Int($Ecosystem)\r\n        if $e_id == 0 {\r\n            $e_id = $ecosystem_id\r\n        } else {\r\n            if !DBFind(\"@1ecosystems\").Where({\"id\": $e_id}).One(\"id\") {\r\n                warning Sprintf(LangRes(\"@1ecosystem_not_found\", \"en\"), $e_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensSend\", \"@1PoaTokensSend\", \"@1TokensRefundAccept\", \"@1ExCancel\", \"@1ExCancelOrder\",\"@1ExCancelOrders\", \"@1ExMatching\", \"@1ExMatchingOTC\", \"@1ExOrder\", \"@1InvestTransfer\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name == prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1tokens_transfer_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkSender() {\r\n        var sender_map map check_dep money\r\n        sender_map = DBFind(\"@1keys\").Where({\"ecosystem\": $e_id, \"account\": $SenderAccount, \"deleted\": 0}).Row()\r\n\r\n        if !sender_map {\r\n            warning Sprintf(LangRes(\"@1sender_x_invalid\", \"en\"), $SenderAccount)\r\n        }\r\n        if Int(sender_map[\"blocked\"]) != 0 {\r\n            warning LangRes(\"@1sender_blocked\", \"en\")\r\n        }\r\n        if Int(sender_map[\"deleted\"]) != 0 {\r\n            warning LangRes(\"@1sender_deleted\", \"en\")\r\n        }\r\n        if Money(sender_map[\"amount\"]) < $Amount {\r\n            warning LangRes(\"@1amount_less_than_needed\", \"en\")\r\n        }\r\n        check_dep = Money(sender_map[\"amount\"]) - Money(sender_map[\"deposit\"])\r\n        if Money(check_dep) < $Amount {\r\n            warning LangRes(\"@1amount_less_than_needed\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkRecipient() {\r\n        var recipient_map map\r\n        recipient_map = DBFind(\"@1keys\").Where({\"ecosystem\": $e_id, \"account\": $RecipientAccount, \"deleted\": 0}).Row()\r\n\r\n        if !recipient_map {\r\n            warning Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $RecipientAccount)\r\n        }\r\n        if Int(recipient_map[\"blocked\"]) != 0 {\r\n            warning LangRes(\"@1recipient_blocked\", \"en\")\r\n        }\r\n        if Int(recipient_map[\"deleted\"]) != 0 {\r\n            warning LangRes(\"@1recipient_deleted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getEcosystem()    //getting an ecosystem number\r\n        getPermission()   //getting permission to run\r\n        checkSender()     //check the sender\r\n        checkRecipient()  //check the recipient\r\n\r\n        //check amount\r\n        if $Amount == 0 {\r\n            warning LangRes(\"@1amount_zero\", \"en\")\r\n        }\r\n        if $Amount < 0 {\r\n            warning LangRes(\"@1amount_less_zero\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $e_id, \"account\": $SenderAccount, \"deleted\": 0}, {\"-amount\": $Amount})\r\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $e_id, \"account\": $RecipientAccount, \"deleted\": 0}, {\"+amount\": $Amount})\r\n\r\n        var m map\r\n        m[\"sender_id\"] = AddressToId($SenderAccount)\r\n        m[\"recipient_id\"] = AddressToId($RecipientAccount)\r\n        m[\"amount\"] = $Amount\r\n        m[\"comment\"] = $Comment\r\n        m[\"block_id\"] = $block\r\n        m[\"txhash\"] = $txhash\r\n        m[\"ecosystem\"] = $e_id\r\n        m[\"type\"] = 3\r\n        m[\"created_at\"] = $block_time\r\n        DBInsert(\"@1history\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefundReject {\r\n    data {\r\n        RefundId int\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingDecisionCheck\" {\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n        \r\n        $tokenrefund = DBFind(\"@1tokens_refund\").Where({\"id\": $RefundId}).Row()\r\n        if !$tokenrefund {\r\n            warning LangRes(\"@1tokens_refund_not_found\", \"en\")\r\n        }\r\n\r\n        $RecipientAccount = $tokenrefund[\"victim_account\"]\r\n        $SenderAccount = $tokenrefund[\"attacker_account\"]\r\n        $amount = Money($tokenrefund[\"amount\"])\r\n        $votingID = Int($tokenrefund[\"voting_id\"])\r\n    }\r\n\r\n    action {\r\n        if $tokenrefund[\"result\"] == 0 {\r\n            TokensLockoutMember(\"MemberAccount,Value\", $RecipientAccount, 0)\r\n            TokensLockoutMember(\"MemberAccount,Value\", $SenderAccount, 0)\r\n\r\n            var m map\r\n            m[\"status\"] = 2\r\n            m[\"result\"] = 1\r\n            m[\"closed_at\"] = $block_time\r\n            DBUpdate(\"@1tokens_refund\", Int($RefundId), m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefundAccept {\r\n    data {\r\n        RefundId int\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingDecisionCheck\"{\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        $tokenrefund = DBFind(\"@1tokens_refund\").Where({\"id\": $RefundId}).Row()\r\n        if !$tokenrefund {\r\n            warning LangRes(\"@1tokens_refund_not_found\", \"en\")\r\n        }\r\n\r\n        $RecipientAccount = $tokenrefund[\"victim_account\"]\r\n        $SenderAccount = $tokenrefund[\"attacker_account\"]\r\n        $amount = Money($tokenrefund[\"amount\"])\r\n        $votingID = Int($tokenrefund[\"voting_id\"])\r\n\r\n        if $amount <= 0 {\r\n            warning LangRes(\"@1amount_less_equal_zero\", \"en\")\r\n        }\r\n        \r\n        var sender map\r\n        sender = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $SenderAccount, \"deleted\": 0}).Row()\r\n        if !sender {\r\n            warning LangRes(\"@1sender_invalid\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $RecipientAccount, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1recipient_invalid\", \"en\")\r\n        }\r\n        if sender[\"amount\"] < $amount {\r\n            warning Sprintf(LangRes(\"@1sender_amount_not_enough\", \"en\"), sender[\"amount\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $tokenrefund[\"result\"] == 0 {\r\n            TokensLockoutMember(\"MemberAccount,Value\", $RecipientAccount, 0)\r\n            TokensLockoutMember(\"MemberAccount,Value\", $SenderAccount, 0)\r\n\r\n            @1TokensTransfer(\"Amount,SenderAccount,RecipientAccount,Comment\", $amount, $SenderAccount, $RecipientAccount, \"Refund tokens\")\r\n\r\n            var m map\r\n            m[\"status\"] = 2\r\n            m[\"result\"] = 2\r\n            m[\"closed_at\"] = $block_time\r\n            DBUpdate(\"@1tokens_refund\", Int($RefundId), m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensSend {\r\n    data {\r\n        Amount money\r\n        Recipient string\r\n        Comment string \"optional\"\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensSend\", \"@1TsKeyApprove\", \"@1TsTransferSeller\", \"@1CreditingSignAccept\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1tokens_transfer_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getPermission()\r\n    }\r\n\r\n    action {\r\n        @1TokensTransfer(\"Amount,SenderAccount,RecipientAccount,Comment,Ecosystem\", $Amount, $account_id, $Recipient, $Comment, $ecosystem_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionCheck {\r\n    data {\r\n        VotingId int\r\n    }\r\n\r\n    func runContract(cont, p string) {\r\n        if Size(cont) > 0 {\r\n            var params map\r\n            if Size(p) > 0 {\r\n                params = JSONToMap(p)\r\n            }\r\n            CallContract(cont, params)\r\n        }\r\n    }\r\n\r\n    func closeNotes() {\r\n        var notes array i int\r\n        notes = DBFind(\"@1notifications\").Where({\"closed\": 0, \"ecosystem\": $ecosystem_id, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $VotingId})\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            @1NotificationsClose(\"NotificId\", Int(note[\"id\"]))\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ACCEPT = 1\r\n        $REJECT = -1\r\n\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId}).Columns(\"voting->name,voting->count_type_voters,voting->type,voting->volume,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status\").Row()\r\n        $type_decision = Int($voting[\"voting.type_decision\"])\r\n        $volume = $voting[\"voting.volume\"]\r\n\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingUpdate\" {\r\n            if Int($voting[\"status\"]) != $FINISHED {\r\n                warning LangRes(\"@1voting_not_expired\", \"en\")\r\n            }\r\n        }\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).One(\"id\")\r\n        if !$subject_id {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flag_decision i int\r\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\r\n        if $voting[\"flags.success\"] == $ACCEPT { //now enough participants to make a decision\r\n            if $type_decision == 1 || $type_decision == 2 {\r\n                var candidates_added_count int\r\n                candidates_added_count = 0 // candidates who have already been added\r\n                flag_decision = $REJECT // none of the candidates has been added yet\r\n\r\n                var subjects array\r\n                subjects = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"results\": {\"$gt\": 0}}).Order({\"results\": \"-1\"}).Columns(\"subject->account,subject->member_name\")\r\n                i = 0\r\n                while i < Len(subjects) {\r\n                    var subject map\r\n                    subject = subjects[i]\r\n\r\n                    // if there are still vacancies\r\n                    if candidates_added_count < Int($voting[\"optional.role_vacancies\"]) {\r\n                        // added candidate to the role\r\n                        var buffer_id int role map\r\n                        buffer_id = Int($voting[\"optional.role_id\"])\r\n                        role = DBFind(\"@1roles\").Columns(\"id,role_type,role_name,image_id\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).Row()\r\n                        if role {\r\n                            var member assignedMember map mid rid string\r\n                            member[\"account\"] = subject[\"subject.account\"]\r\n                            mid = member[\"account\"]\r\n                            rid = role[\"id\"]\r\n                            assignedMember = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->account\": mid, \"role->id\": rid, \"deleted\": 0}).Row()\r\n\r\n                            if !assignedMember {\r\n                                member[\"member_name\"] = subject[\"subject.member_name\"]\r\n\r\n                                var rolePart appointed m map\r\n                                rolePart[\"id\"] = role[\"id\"]\r\n                                rolePart[\"type\"] = role[\"role_type\"]\r\n                                rolePart[\"name\"] = role[\"role_name\"]\r\n                                rolePart[\"image_id\"] = role[\"image_id\"]\r\n                                appointed[\"voting_id\"] = $VotingId\r\n                                appointed[\"voting_name\"] = $voting[\"voting.name\"]\r\n\r\n                                // add a candidate to the role\r\n                                m[\"role\"] = rolePart\r\n                                m[\"member\"] = member\r\n                                m[\"appointed\"] = appointed\r\n                                m[\"date_created\"] = $block_time\r\n                                m[\"ecosystem\"] = $ecosystem_id\r\n                                DBInsert(\"@1roles_participants\", m)\r\n\r\n                                candidates_added_count = candidates_added_count + 1\r\n\r\n                                // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                flag_decision = $ACCEPT\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n\r\n            if $type_decision == 3 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Columns(\"id,results->percent_accepted,results->percent_rejected\").Row()\r\n                if subject {\r\n                    var percent_accepted percent_rejected float\r\n                    percent_accepted = Float(subject[\"results.percent_accepted\"])\r\n                    percent_rejected = Float(subject[\"results.percent_rejected\"])\r\n                    if ( Int($voting[\"voting.count_type_voters\"]) == 0 && percent_accepted >= Float($volume)   ) ||\r\n                       ( Int($voting[\"voting.count_type_voters\"]) == 1 && percent_accepted >  percent_rejected ) {\r\n                        flag_decision = $ACCEPT\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 4 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Columns(\"id,results->percent_accepted,results->percent_rejected,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Row()\r\n                if subject {\r\n                    var percent_accepted percent_rejected float\r\n                    percent_accepted = Float(subject[\"results.percent_accepted\"])\r\n                    percent_rejected = Float(subject[\"results.percent_rejected\"])\r\n                    if ( Int($voting[\"voting.count_type_voters\"]) == 0 && percent_accepted >= Float($volume)   ) ||\r\n                       ( Int($voting[\"voting.count_type_voters\"]) == 1 && percent_accepted >  percent_rejected ) {\r\n                        flag_decision = $ACCEPT\r\n                        runContract(subject[\"subject.contract_accept\"], subject[\"subject.contract_accept_params\"])\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                        runContract(subject[\"subject.contract_reject\"], subject[\"subject.contract_reject_params\"])\r\n                    }\r\n                }\r\n            }\r\n\r\n            if flag_decision == $ACCEPT {\r\n                runContract($voting[\"optional.contract_accept\"], $voting[\"optional.contract_accept_params\"])\r\n            }\r\n            if flag_decision == $REJECT {\r\n                runContract($voting[\"optional.contract_reject\"], $voting[\"optional.contract_reject_params\"])\r\n            }\r\n\r\n            closeNotes()\r\n        }\r\n\r\n        DBUpdate(\"@1votings\", $VotingId, {\"flags->decision\": flag_decision})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingStatusUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingStatusUpdate {\r\n    data {}\r\n\r\n    func notificationSend(voting map) {\r\n        var title string id i lenVoters int voters array\r\n        $page_name = \"@1voting_view\"\r\n        title = voting[\"voting.name\"]\r\n        id = Int(voting[\"id\"])\r\n        if voting[\"voting.type_participants\"] == 5 {\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->role_id\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": id, \"decision\": 0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter roleId params map\r\n                voter = voters[i]\r\n                roleId = Int(voter[\"member.role_id\"])\r\n                params[\"voting_id\"] = id\r\n                @1NotificationsSend(\"Rid,Sender,Icon,Header,Body,Page,Params,Closure\", roleId, 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), title, $page_name, params, 1)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->account\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": id, \"decision\": 0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter memberAccount params map\r\n                voter = voters[i]\r\n                memberAccount = voter[\"member.account\"]\r\n                params[\"voting_id\"] = id\r\n                @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", memberAccount, 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), title, $page_name, params)\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    func updateRatings(voting map) {\r\n        if voting[\"voting.rating\"] == 1 && voting[\"voting.type_participants\"] != 5 {\r\n            var id i lenVoters int voters array\r\n            id = Int(voting[\"id\"])\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"id,member->account\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": id})\r\n            lenVoters = Len(voters)\r\n\r\n            while i < lenVoters {\r\n                var voter map memberAccount string\r\n                voter = voters[i]\r\n                memberAccount = voter[\"member.account\"]\r\n\r\n                var where rating map\r\n                where[$rating_wallet] = memberAccount\r\n                where[\"ecosystem\"] = $ecosystem_id\r\n                if GetColumnType($rating_table, $rating_amount) != \"\" {\r\n                    rating = DBFind($rating_table).Columns($request_columns).Where(where).Row()\r\n                }\r\n\r\n                var rating_amount_i int rating_amount_f float\r\n                rating_amount_f = Float(rating[$rating_amount]) * Float($rating_weight)\r\n                if rating_amount_f < 1.0 {\r\n                    rating_amount_f = 1.0\r\n                }\r\n                rating_amount_f = 1 + Log(rating_amount_f)\r\n                rating_amount_i = Int(rating_amount_f * 1000)\r\n\r\n                DBUpdate(\"@1votings_participants\", Int(voter[\"id\"]), {rating: rating_amount_i})\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    func changeVotings(from, to map) {\r\n        var votings array i lenVotings int v map\r\n        from[\"deleted\"] = 0\r\n        votings = DBFind(\"@1votings\").Columns(\"id,date_started,date_ended,voting->name,voting->type,voting->rating,voting->type_participants\").Where(from)\r\n\r\n        lenVotings = Len(votings)\r\n        while i < lenVotings {\r\n            v = votings[i]\r\n            if to[\"status\"] == $STARTED {\r\n                notificationSend(v)\r\n                updateRatings(v)\r\n                to[\"flags->notifics\"] = 1\r\n            }\r\n            DBUpdate(\"@1votings\", Int(v[\"id\"]), to)\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    func checkPrev(names array) {\r\n        var i lenNames int prev string\r\n        lenNames = Len(names)\r\n        prev = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        while i < lenNames {\r\n            if prev == names[i] {\r\n                return\r\n            }\r\n            i = i + 1\r\n        }\r\n        @1AdminCondition()\r\n    }\r\n\r\n    conditions {\r\n        checkPrev([\"@1VotingSubjectCheck\", \"@1VotingInvite\"])\r\n\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        var app_id int\r\n        app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $rating_table = AppParam(app_id, \"voting_rating_table\", $ecosystem_id)\r\n        $rating_wallet = AppParam(app_id, \"voting_rating_wallet\", $ecosystem_id)\r\n        $rating_amount = AppParam(app_id, \"voting_rating_amount\", $ecosystem_id)\r\n        $rating_weight = AppParam(app_id, \"voting_rating_weight\", $ecosystem_id)\r\n        $request_columns = \"id,\" + $rating_wallet + \",\" + $rating_amount\r\n    }\r\n\r\n    action {\r\n        //setting status INVALID\r\n        changeVotings({\"status\": $WAITING, \"flags->full_data\": 0}, {\"status\": $INVALID})\r\n        changeVotings({\"status\": $WAITING, \"progress->number_participants\": 0}, {\"status\": $INVALID})\r\n        //setting status WAITING\r\n        changeVotings({\"status\": $INVALID, \"flags->full_data\": 1, \"progress->number_participants\": {\"$gt\": 0}}, {\"status\": $WAITING})\r\n        //setting status STARTED\r\n        changeVotings({\"status\": $INVALID, \"date_started\": {\"$lte\": $block_time}, \"flags->full_data\": 1, \"progress->number_participants\": {\"$gt\": 0}}, {\"status\": $STARTED})\r\n        changeVotings({\"status\": $WAITING, \"date_started\": {\"$lte\": $block_time}}, {\"status\": $STARTED})\r\n        //setting status FINISHED\r\n        changeVotings({\"status\": $STARTED, \"date_ended\": {\"$lte\": $block_time}}, {\"status\": $FINISHED})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingUpdate {\r\n    data {\r\n        VotingId int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100) / total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"status\": $STARTED}).Columns(\"flags,voting,progress,progress->number_voters,voting->count_type_voters\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1started_voting_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var progress voting map\r\n        progress = safeJsonToMap($voting[\"progress\"])\r\n        voting = safeJsonToMap($voting[\"voting\"])\r\n\r\n        var flag_success percent_success percent_voters number_voters quorum volume int\r\n        // increment count of voters\r\n        quorum = Int(voting[\"quorum\"])\r\n        volume = Int(voting[\"volume\"])\r\n        number_voters = Int(progress[\"number_voters\"]) + 1\r\n        if Int($voting[\"voting.count_type_voters\"]) == 0 {\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(percent_voters, quorum)\r\n        } else {\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(number_voters, quorum)\r\n        }\r\n\r\n        // update the flag of success\r\n        if percent_success == 100 {\r\n            flag_success = 1\r\n        }\r\n        progress[\"percent_voters\"] = percent_voters\r\n        progress[\"percent_success\"] = percent_success\r\n        progress[\"number_voters\"] = number_voters\r\n\r\n        var m map\r\n        m[\"progress\"] = progress\r\n        m[\"flags->success\"] = flag_success\r\n\r\n        if percent_success == 100 || percent_voters == 100 {\r\n            m[\"status\"] = $FINISHED\r\n            DBUpdate(\"@1votings\", $VotingId, m)\r\n            @1VotingDecisionCheck(\"VotingId\", $VotingId)\r\n        } else {\r\n            DBUpdate(\"@1votings\", $VotingId, m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCandidateAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingCandidateAccept {\r\n    data {\r\n        VotingId int\r\n        CandidateAccount string\r\n        RoleId int\r\n    }\r\n\r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->role_id\": $RoleId, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $VotingId, \"closed\": 0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"NotificId\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->account\": $account_id, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $VotingId, \"closed\": 0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"NotificId\", id)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId}).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"status\"] == $FINISHED || $block_time > Int($voting[\"date_ended\"]) {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"subject->account\": $CandidateAccount}).Columns(\"id,number_accept,results\").Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($voting[\"voting.type_participants\"]) != 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": $account_id, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": 0, \"member->role_id\": $RoleId, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if !$participant {\r\n            warning LangRes(\"@1voting_not_participant\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->account\": $account_id, \"role->id\": $RoleId, \"deleted\": 0}).One(\"id\") {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            } else {\r\n                var member map\r\n                member[\"account\"] = $account_id\r\n                member[\"member_name\"] = $account_id\r\n                member[\"role_id\"] = $RoleId\r\n                var member_json string\r\n                member_json = JSONEncode(member)\r\n                DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), {\"member\": member_json})\r\n            }\r\n        }\r\n\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var m map\r\n            m[\"decision_date\"] = $block_time\r\n            m[\"decision\"] = AddressToId($CandidateAccount)\r\n            DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), m)\r\n\r\n            var p map\r\n            p[\"number_accept\"] = Int($subject[\"number_accept\"]) + 1\r\n            p[\"results\"] = Int($subject[\"results\"]) + Int($participant[\"rating\"])\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), p)\r\n\r\n            @1VotingUpdate(\"VotingId\", $VotingId)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionAccept {\r\n    data {\r\n        VotingId int\r\n        RoleId int\r\n    }\r\n\r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->role_id\": $RoleId, \"page_params->voting_id\": $VotingId, \"closed\": 0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"NotificId\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->account\": $account_id, \"page_params->voting_id\": $VotingId, \"closed\": 0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"NotificId\", id)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId}).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3 {\r\n            if $voting[\"voting.role_id\"] != $RoleId {\r\n                warning LangRes(\"@1voting_role_incorrect\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED || $block_time > Int($voting[\"date_ended\"]) {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Columns(\"id,number_accept,results->rating_accepted,results->rating_rejected\").Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($voting[\"voting.type_participants\"]) != 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": $account_id, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": 0, \"member->role_id\": $RoleId, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if !$participant {\r\n            warning LangRes(\"@1voting_not_participant\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->account\": $account_id, \"role->id\": $RoleId, \"deleted\": 0}).One(\"id\") {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            } else {\r\n                var member map\r\n                member[\"account\"] = $account_id\r\n                member[\"member_name\"] = $account_id\r\n                member[\"role_id\"] = $RoleId\r\n                var member_json string\r\n                member_json = JSONEncode(member)\r\n                DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), {\"member\": member_json})\r\n            }\r\n        }\r\n\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var m map\r\n            m[\"decision_date\"] = $block_time\r\n            m[\"decision\"] = 1\r\n            DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), m)\r\n\r\n            var p map\r\n            var rating_accepted rating_rejected summ_rating int\r\n            rating_accepted = Int($subject[\"results.rating_accepted\"]) + Int($participant[\"rating\"])\r\n            rating_rejected = Int($subject[\"results.rating_rejected\"])\r\n            summ_rating = rating_accepted + rating_rejected\r\n            var percent_accepted percent_rejected float\r\n            percent_accepted = (Float(rating_accepted)*Float(100))/Float(summ_rating)\r\n            percent_rejected = (Float(rating_rejected)*Float(100))/Float(summ_rating)\r\n            p[\"results->rating_accepted\"] = rating_accepted\r\n            p[\"results->rating_rejected\"] = rating_rejected\r\n            p[\"results->percent_accepted\"] = percent_accepted\r\n            p[\"results->percent_rejected\"] = percent_rejected\r\n            p[\"number_accept\"] = Int($subject[\"number_accept\"]) + 1\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), p)\r\n\r\n            @1VotingUpdate(\"VotingId\", $VotingId)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDelete {\r\n    data {\r\n        VotingId int\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        var voting map\r\n        voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"creator->account\": $account_id, \"status\": $INVALID}).Columns(\"id\").Row()\r\n        if !voting {\r\n            warning LangRes(\"@1voting_delete_impossible\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1votings\", $VotingId, {deleted:$block_time})\r\n        var notes array\r\n        notes = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $VotingId})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map noteId int\r\n            note = notes[i]\r\n            noteId = Int(note[\"id\"])\r\n            @1NotificationsClose(\"NotificId\", noteId)\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingInvite",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingInvite {\r\n    data {\r\n        VotingId int\r\n        VarId string //0, account, role_id, group_id\r\n    }\r\n\r\n    func addVotingParticipant(votingId int, k_id string, r_id string) {\r\n        var m member role map\r\n\r\n        if k_id && k_id != \"0\" {\r\n            member[\"account\"] = k_id\r\n            member[\"member_name\"] = k_id\r\n        } else {\r\n            member[\"account\"] = 0\r\n        }\r\n\r\n        if r_id && r_id != \"0\" {\r\n            member[\"role_id\"] = r_id\r\n        }\r\n\r\n        m[\"member\"] = member\r\n        m[\"voting_id\"] = votingId\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        m[\"rating\"] = 1\r\n        DBInsert(\"@1votings_participants\", m)\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"status\": [{\"$neq\": $STARTED}, {\"$neq\": $FINISHED}]}).Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended,creator->account\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_expired_can_not_add_participants\", \"en\")\r\n        }\r\n        if $voting[\"creator.account\"] != $account_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        $type_participants = $voting[\"voting.type_participants\"]\r\n        $type_voting = $voting[\"voting.type\"]\r\n        $number_participants = Int($voting[\"progress.number_participants\"])\r\n\r\n        if $number_participants > 1 && $type_voting == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_add_participants\", \"en\")\r\n        }\r\n        var isAdded string\r\n        if $type_participants == 2 {\r\n            if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $VarId, \"deleted\": 0}).Row(){\r\n                warning LangRes(\"@1account_not_found\", \"en\")\r\n            }\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": $VarId}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1member_added_before\", \"en\")\r\n            }\r\n        }\r\n        if $type_participants == 3 {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1voting_one_role_allowed\", \"en\")\r\n            }\r\n            if Len(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $VarId, \"deleted\": 0})) == 0 {\r\n                warning LangRes(\"@1roles_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n        if $type_participants == 4 || $type_participants == 5 {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->role_id\": $VarId}).One(\"id\")\r\n            if isAdded {\r\n                if ($type_participants == 4){\r\n                    warning LangRes(\"@1role_members_added_before\", \"en\")\r\n                }\r\n                if ($type_participants == 5){\r\n                    warning LangRes(\"@1role_added_before\", \"en\")\r\n                }\r\n            }\r\n            if Len(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $VarId, \"deleted\": 0})) == 0 {\r\n                warning LangRes(\"@1roles_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n        if $type_participants == 6 {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1voting_one_group_allowed\", \"en\")\r\n            }\r\n            if Len(DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": $VarId, \"deleted\": 0})) == 0 {\r\n                warning LangRes(\"@1groups_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        if $type_participants == 1 { // everybody\r\n            var keys array guest_account string\r\n            guest_account = IdToAddress(Int($guest_key))\r\n            keys = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": {\"$neq\": guest_account}, \"deleted\": 0})\r\n            while i < Len(keys) {\r\n                var key map\r\n                key = keys[i]\r\n                addVotingParticipant($VotingId, key[\"account\"], \"0\")\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 2 { // manual\r\n            var key map\r\n            key = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $VarId, \"deleted\": 0}).Row()\r\n            addVotingParticipant($VotingId, key[\"account\"], \"0\")\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        if $type_participants == 3 { // one role\r\n            var roles array\r\n            roles = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $VarId, \"deleted\": 0}).Columns(\"member->account\").Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                addVotingParticipant($VotingId, role[\"member.account\"], \"0\")\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 4 { // all participants in the selected roles vote\r\n            var roles array\r\n            roles = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $VarId, \"deleted\": 0}).Columns(\"member->account\").Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                addVotingParticipant($VotingId, role[\"member.account\"], $VarId)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 5 { // one participant of the selected roles votes\r\n            var rl map\r\n            rl = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VarId}).Row()\r\n            addVotingParticipant($VotingId, \"0\", rl[\"id\"])\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        if $type_participants == 6 { // one group\r\n            var groups array\r\n            groups = DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": $VarId, \"deleted\": 0}).Columns(\"member->account\").Order(\"id\")\r\n            while i < Len(groups) {\r\n                var group m map\r\n                group = groups[i]\r\n                addVotingParticipant($VotingId, group[\"member.account\"], \"0\")\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n\r\n        var v map\r\n        if $type_participants == 3 {\r\n            v[\"voting->role_id\"] = $VarId\r\n        }\r\n        v[\"progress->number_participants\"] = $number_participants\r\n\r\n        DBUpdate(\"@1votings\", $VotingId, v)\r\n        @1VotingStatusUpdate()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNotificationSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingNotificationSend {\r\n    data {\r\n        VotingId int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 {\r\n            res = JSONToMap(m)\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting = DBFind(\"@1votings\").Columns(\"id,date_ended\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"date_ended\": [{\"$gt\": $block_time}]}).One(\"id\")\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_expired_can_not_notify\", \"en\")\r\n        }\r\n\r\n        $voting = DBFind(\"@1votings\").Columns(\"voting->name,creator->account,flags->notifics,flags,date_started\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"date_started\": [{\"$gt\": $block_time}]}).Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        if $voting[\"creator.account\"] != $account_id {\r\n            warning LangRes(\"@1voting_not_creator\", \"en\")\r\n        }\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            warning LangRes(\"@1notifications_sent_already\", \"en\")\r\n        }\r\n\r\n        $voting_name = $voting[\"voting.name\"]\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"@1votings_participants\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"decision\": 0})\r\n        var i int\r\n        while i < Len(participants) {\r\n            var participant member params map\r\n            participant = participants[i]\r\n            member = safeJsonToMap(participant[\"member\"])\r\n            params[\"voting_id\"] = $VotingId\r\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", member[\"account\"], 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), $voting_name, \"voting_view\", JSONEncode(params))\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        DBUpdate(\"@1votings\", $VotingId, {\"flags->notifics\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingCreate {\r\n    data {\r\n        Name string\r\n        Type int\r\n        TypeParticipants int\r\n        TypeDecision int\r\n\r\n        Quorum int\r\n        Rating string \"optional\"\r\n        Volume int \"optional\"\r\n        CountTypeVoters string \"optional\"\r\n        Description string \"optional\"\r\n        Interval string \"optional\"\r\n        StartDate string \"optional\"\r\n        StartTime string \"optional\"\r\n        EndDate string \"optional\"\r\n        EndTime string \"optional\"\r\n    }\r\n\r\n    func trimZeroTime(s string) string {\r\n        if Contains(s, \"T00:00:00Z\") {\r\n            s = Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n\r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5 {\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n\r\n    func isCalledFromPage() bool {\r\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\r\n    }\r\n\r\n    func fixDatetimes() {\r\n        $date_started = UnixDateTime(dateAddTime($StartDate, $StartTime))\r\n        $date_ended = UnixDateTime(dateAddTime($EndDate, $EndTime))\r\n\r\n        if $date_started == 0 || $date_ended == 0 { // invalid datetimes\r\n            if isCalledFromPage() {\r\n                var errs array\r\n                if Size($StartDate) < 10 {\r\n                    errs = Append(errs, \"starting date\")\r\n                }\r\n                if Size($StartTime) < 5 {\r\n                    errs = Append(errs, \"starting time\")\r\n                }\r\n                if Size($EndDate) < 10 {\r\n                    errs = Append(errs, \"ending date\")\r\n                }\r\n                if Size($EndTime) < 5 {\r\n                    errs = Append(errs, \"ending time\")\r\n                }\r\n                warning Sprintf(LangRes(\"@1voting_creation_error_x_unspecified\", \"en\"), Join(errs, \", \"))\r\n            } else {\r\n                $date_started = $block_time\r\n                $Interval = Int($Interval)\r\n                if $Interval == 0 {\r\n                    $Interval = 3\r\n                }\r\n                $date_ended = $date_started + 3600 * 24 * $Interval\r\n            }\r\n        }\r\n        if $date_started < $block_time {\r\n            warning LangRes(\"@1starting_date_invalid\", \"en\")\r\n        }\r\n        if $date_started >= $date_ended {\r\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        if (($TypeDecision == 1 || $TypeDecision == 2) && $CountTypeVoters == 1) {\r\n            info LangRes(\"@1voting_type_not_suitable\", \"en\")\r\n        }\r\n        if ($Quorum < 1) || ($Quorum > 100) {\r\n            warning Sprintf(LangRes(\"@1quorum_range_must_be\", \"en\"), $Quorum)\r\n        }\r\n        if $CountTypeVoters == 0 && $TypeDecision != 1 && $TypeDecision != 2 {\r\n            if ($Volume < 1) || ($Volume > 100) {\r\n                warning Sprintf(LangRes(\"@1volume_range_must_be\", \"en\"), $Volume)\r\n            }\r\n        }\r\n        if $CountTypeVoters == 1 {\r\n            if $Quorum < 1 {\r\n                info LangRes(\"@1voters_number_less_one\", \"en\")\r\n            }\r\n            $Volume = 0\r\n        }\r\n        if $Type == 2 {\r\n            var systemAllowed map\r\n            systemAllowed[\"@1VotingRunEditPlatformParam\"] = 1\r\n            systemAllowed[\"@1VotingRunNewCNConnection\"] = 1\r\n            systemAllowed[\"@1VotingRunRemoveCNConnection\"] = 1\r\n            systemAllowed[\"@1VotingRunVes\"] = 1\r\n            systemAllowed[\"@1VotingRunTokenRefund\"] = 1\r\n            systemAllowed[\"@1VotingRunEditEcosysParam\"] = 1\r\n            if systemAllowed[$stack[0]] != 1 {\r\n                warning Sprintf(LangRes(\"@1system_voting_can_not_start_from_x\", \"en\"), $stack[0])\r\n            }\r\n        }\r\n\r\n        $key = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"deleted\": 0}).Row()\r\n        if !$key {\r\n            warning LangRes(\"@1ecosystem_not_member\", \"en\")\r\n        }\r\n\r\n        fixDatetimes()\r\n    }\r\n\r\n    action {\r\n        var voting progress flags creator map votingId int\r\n        voting[\"name\"] = $Name\r\n        voting[\"type\"] = $Type\r\n        voting[\"description\"] = $Description\r\n        voting[\"type_participants\"] = $TypeParticipants\r\n        voting[\"type_decision\"] = $TypeDecision\r\n        voting[\"volume\"] = $Volume\r\n        voting[\"quorum\"] = $Quorum\r\n        voting[\"count_type_voters\"] = $CountTypeVoters\r\n        if $Rating == \"true\" || $Rating == \"1\" {\r\n            voting[\"rating\"] = 1\r\n        } else {\r\n            voting[\"rating\"] = 0\r\n        }\r\n\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        creator[\"account\"] = $account_id\r\n        creator[\"member_name\"] = $account_id\r\n        var m map\r\n        m[\"voting\"] = voting\r\n        m[\"progress\"] = progress\r\n        m[\"flags\"] = flags\r\n        m[\"creator\"] = creator\r\n        m[\"status\"] = $INVALID\r\n        m[\"date_started\"] = $date_started\r\n        m[\"date_ended\"] = $date_ended\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n\r\n        votingId = DBInsert(\"@1votings\", m)\r\n\r\n        // if all members are voting participants\r\n        if $TypeParticipants == 1 {\r\n            @1VotingInvite(\"VotingId,VarId\", votingId, 0)\r\n        }\r\n\r\n        var buffer_data map\r\n        buffer_data[\"voting_id\"] = votingId\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", \"voting\", JSONEncode(buffer_data))\r\n\r\n        $result = votingId\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectCheck {\r\n    data {\r\n        VotingId int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId}).Columns(\"id,optional,voting->type,voting->type_decision,flags\").Row()\r\n        if !$voting_map {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n\r\n        $type_decision = $voting_map[\"voting.type_decision\"]\r\n        if $type_decision < 1 || $type_decision > 4 {\r\n            warning LangRes(\"@1decision_type_invalid\", \"en\")\r\n        }\r\n\r\n        $subject_map = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Row()\r\n        if !$subject_map {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flags, subject map\r\n        flags = safeJsonToMap($voting_map[\"flags\"])\r\n        if $type_decision > 2 && $type_decision <= 4 {\r\n            subject = safeJsonToMap($subject_map[\"subject\"])\r\n        }\r\n\r\n        var fullData string\r\n\r\n        if $type_decision == 1 || $type_decision == 2 {\r\n            var optional map\r\n            optional = safeJsonToMap($voting_map[\"optional\"])\r\n\r\n            if Int(optional[\"number_candidates\"]) > 0 && Int(optional[\"role_vacancies\"]) > 0 && Int(optional[\"role_id\"]) > 0 {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 3 {\r\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 4 {\r\n            if subject[\"contract_accept\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if fullData == 1 {\r\n            DBUpdate(\"@1votings\", $VotingId, {\"flags->full_data\":fullData})\r\n            @1VotingStatusUpdate()\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectDocument",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectDocument {\r\n    data {\r\n        VotingId int\r\n        TextDocument string\r\n\r\n        OptContractAcceptName string \"optional\"\r\n        OptContractAcceptParams string \"optional\"\r\n        OptContractRejectName string \"optional\"\r\n        OptContractRejectParams string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"status\": [{\"$neq\": $STARTED}, {\"$neq\": $FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional,creator->account\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.account\"] != $account_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject[\"text\"] = $TextDocument\r\n        subject[\"hash\"] = Sha256($TextDocument)\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"subject\": subject})\r\n        }\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($OptContractAcceptParams)\r\n        reject_params = safeJsonToMap($OptContractRejectParams)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $OptContractAcceptName\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $OptContractRejectName\r\n        optional[\"contract_reject_params\"] = reject_params\r\n\r\n        DBUpdate(\"@1votings\", $VotingId, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"VotingId\", $VotingId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectSettings {\r\n    data {\r\n        VotingId int\r\n        RoleId int\r\n        Vacancies int\r\n\r\n        OptContractAcceptName string \"optional\"\r\n        OptContractAcceptParams string \"optional\"\r\n        OptContractRejectName string \"optional\"\r\n        OptContractRejectParams string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $Vacancies < 1 {\r\n            warning LangRes(\"@1vacancies_number_less_one\", \"en\")\r\n        }\r\n\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"status\": [{\"$neq\": $STARTED}, {\"$neq\": $FINISHED}]}).Columns(\"optional,voting->type,flags->full_data,creator->account\").Row()\r\n\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.account\"] != $account_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n        var role map\r\n        role = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $RoleId, \"deleted\": 0}).Row()\r\n        if !role {\r\n            warning LangRes(\"@1specified_role_not_found\", \"en\")\r\n        }\r\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\r\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\r\n            warning LangRes(\"@1role_not_elective_or_removed\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $OptContractAcceptName\r\n        optional[\"contract_accept_params\"] = safeJsonToMap($OptContractAcceptParams)\r\n        optional[\"contract_reject\"] = $OptContractRejectName\r\n        optional[\"contract_reject_params\"] = safeJsonToMap($OptContractRejectParams)\r\n        optional[\"role_id\"] = $RoleId\r\n        optional[\"role_vacancies\"] = $Vacancies\r\n\r\n        DBUpdate(\"@1votings\", $VotingId, {optional:optional})\r\n\r\n        $subject_map = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Row()\r\n        if $subject_map {\r\n            @1VotingSubjectCheck(\"VotingId\", $VotingId)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCandidates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectCandidates {\r\n    data {\r\n        VotingId int\r\n        MemberAccount string\r\n    }\r\n\r\n    func getMemberInfo(account string) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"account\": account}).Row()\r\n        if member {\r\n            res[\"account\"] = member[\"account\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Columns(\"id\").Where({\"ecosystem\": $ecosystem_id, \"account\": account, \"deleted\": 0}).Row() {\r\n                res[\"account\"] = account\r\n                res[\"member_name\"] = account\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId}).Columns(\"id,optional->number_candidates,voting->type,flags->full_data,status,creator->account,voting->type_decision\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.account\"] != $account_id {\r\n            if $voting[\"voting.type_decision\"] != 1 && $MemberAccount != $account_id {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $STARTED {\r\n            warning LangRes(\"@1voting_started_can_not_add_candidates\", \"en\")\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning LangRes(\"@1voting_finished_can_not_add_candidates\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if !$MemberAccount || $MemberAccount == \"0\" {\r\n            $MemberAccount = $account_id\r\n        }\r\n\r\n        if DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"subject->account\": $MemberAccount}).One(\"id\") {\r\n            warning LangRes(\"@1candidate_added_before\", \"en\")\r\n        }\r\n\r\n        $member = getMemberInfo($MemberAccount)\r\n        if !$member {\r\n            warning Sprintf(LangRes(\"@1account_not_found\", \"en\") + \" (%v)\", $MemberAccount)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id: $VotingId, subject: $member})\r\n        var m map\r\n        m[\"optional->number_candidates\"] = Int($voting[\"optional.number_candidates\"]) + 1\r\n        DBUpdate(\"@1votings\", $VotingId, m)\r\n        @1VotingSubjectCheck(\"VotingId\", $VotingId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectContract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectContract {\r\n    data {\r\n        VotingId int\r\n        ContractAcceptName string\r\n        ContractAcceptParams string \"optional\"\r\n        ContractRejectName string\r\n        ContractRejectParams string \"optional\"\r\n\r\n        OptContractAcceptName string \"optional\"\r\n        OptContractAcceptParams string \"optional\"\r\n        OptContractRejectName string \"optional\"\r\n        OptContractRejectParams string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId, \"status\": [{\"$neq\": $STARTED}, {\"$neq\": $FINISHED}]}).Columns(\"id,date_started,voting->type,flags->full_data,optional,creator->account\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.account\"] != $account_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var accept_params, reject_params map\r\n        accept_params = safeJsonToMap($ContractAcceptParams)\r\n        reject_params = safeJsonToMap($ContractRejectParams)\r\n\r\n        var subject map\r\n        subject[\"contract_accept\"] = $ContractAcceptName\r\n        subject[\"contract_accept_params\"] = accept_params\r\n        subject[\"contract_reject\"] = $ContractRejectName\r\n        subject[\"contract_reject_params\"] = reject_params\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {ecosystem:$ecosystem_id, voting_id:$VotingId, subject:subject})\r\n        }\r\n\r\n        var o_accept_params o_reject_params map\r\n        o_accept_params = safeJsonToMap($OptContractAcceptParams)\r\n        o_reject_params = safeJsonToMap($OptContractRejectParams)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        optional[\"contract_accept\"] = $OptContractAcceptName\r\n        optional[\"contract_accept_params\"] = o_accept_params\r\n        optional[\"contract_reject\"] = $OptContractRejectName\r\n        optional[\"contract_reject_params\"] = o_reject_params\r\n        DBUpdate(\"@1votings\", $VotingId, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"VotingId\", $VotingId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateRun",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplateRun {\r\n    data {\r\n        TemplateId int\r\n        Duration int\r\n\r\n        TextDocument string \"optional\"\r\n        ContractAcceptParams string \"optional\"\r\n        ContractRejectParams string \"optional\"\r\n    }\r\n\r\n    func checkInput(value, name string) {\r\n        if Size(value) == 0 || value == \"NULL\" {\r\n            warning Sprintf(LangRes(\"@1x_not_found\", \"en\"), name)\r\n        }\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1VotingRunEditPlatformParam\", \"@1VotingRunNewCNConnection\", \"@1VotingRunRemoveCNConnection\", \"@1VotingRunVes\", \"@1VotingRunTokenRefund\", \"@1VotingRunEditEcosysParam\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning Sprintf(LangRes(\"@1system_voting_can_not_start_from_x\", \"en\"), $stack[0])\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $template = DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id, \"id\": $TemplateId}).Columns(\"voting->count_type_voters,voting->name,voting->volume,voting->quorum,voting->type_decision,voting->type_participants,voting->type,voting->rating,subject->candidates,subject->vacancies,subject->voters,subject->contract_accept,subject->contract_reject,optional->contract_accept,optional->contract_reject,optional->init_contract,optional->contract_accept_params,optional->contract_reject_params,optional->init_contract_params\").Row()\r\n        if !$template {\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n\r\n        $v_name = Sprintf(\"%v [\" + LangRes(\"@1template_id\", \"en\") + \": %v]\", $template[\"voting.name\"], $TemplateId)\r\n        $v_count_type_voters = Int($template[\"voting.count_type_voters\"])\r\n        $v_volume = Int($template[\"voting.volume\"])\r\n        $v_quorum = Int($template[\"voting.quorum\"])\r\n        $v_type_decision = Int($template[\"voting.type_decision\"])\r\n        $v_type_participants = Int($template[\"voting.type_participants\"])\r\n        $v_type = Int($template[\"voting.type\"])\r\n        $v_rating = $template[\"voting.rating\"]\r\n\r\n        $s_candidates = Int($template[\"subject.candidates\"])\r\n        $s_vacancies = $template[\"subject.vacancies\"]\r\n        $s_voters = Int($template[\"subject.voters\"])\r\n        $s_contract_accept = $template[\"subject.contract_accept\"]\r\n        $s_contract_reject = $template[\"subject.contract_reject\"]\r\n        \r\n        $o_contract_accept = $template[\"optional.contract_accept\"]\r\n        $o_contract_reject = $template[\"optional.contract_reject\"]\r\n        $o_init_contract = $template[\"optional.init_contract\"]\r\n        $o_contract_accept_params = $template[\"optional.contract_accept_params\"]\r\n        $o_contract_reject_params = $template[\"optional.contract_reject_params\"]\r\n        $o_init_contract_params = $template[\"optional.init_contract_params\"]\r\n        \r\n        $desc = Sprintf(LangRes(\"@1template\", \"en\") + \" #%v\", $TemplateId)       \r\n        if $Duration <= 0 {\r\n            $Duration = 3\r\n        }\r\n\r\n        if $v_type < 1 || $v_type > 3 {\r\n            warning LangRes(\"@1voting_type_invalid\", \"en\")\r\n        }\r\n\r\n        if $v_type == 2 {\r\n            getPermission()\r\n\r\n            // check duplicated\r\n            if DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"voting->name\": $v_name, \"voting->type\": 2, \"flags->decision\": {\"$nin\": [\"1\", \"-1\"]}, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1same_voting_created\", \"en\")\r\n            }\r\n        } \r\n\r\n        // candidates\r\n        if $v_type_decision == 1 || $v_type_decision == 2 {\r\n            if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $s_candidates, \"deleted\": 0}).One(\"id\") {\r\n                warning Sprintf(LangRes(\"@1candidate_role_id_not_found\", \"en\"), $s_candidates)\r\n            }\r\n        }\r\n\r\n        // document\r\n        if $v_type_decision == 3 {\r\n            checkInput($TextDocument, \"TextDocument\")\r\n        }\r\n\r\n        // contracts\r\n        if $v_type_decision == 4 {\r\n            if GetContractByName($s_contract_accept) == 0 {\r\n                warning LangRes(\"@1accepted_contract_not_found\", \"en\")\r\n            }\r\n            if Size($s_contract_reject) > 0 {\r\n                if GetContractByName($s_contract_reject) == 0 {\r\n                    warning LangRes(\"@1rejected_contract_not_found\", \"en\")\r\n                }\r\n            }\r\n        }\r\n\r\n        if $v_type_participants == 3 {\r\n            // if the type of the participants \"in role\" - check the role\r\n            if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $s_voters, \"deleted\": 0}).One(\"id\") {\r\n                warning Sprintf(LangRes(\"@1voters_role_id_not_found\", \"en\"), $s_voters)\r\n            }\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0, \"role->id\": $s_voters, \"member->account\": $account_id}).One(\"id\") {\r\n                warning LangRes(\"@1role_not_involved\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        // start init contract\r\n        if Size($o_init_contract) > 0 {\r\n            var params map\r\n            if Size($o_init_contract_params) > 0 {\r\n                params = JSONToMap($o_init_contract_params)\r\n            }\r\n            params[\"TemplateId\"] = $TemplateId\r\n            CallContract($o_init_contract, params)\r\n        }\r\n\r\n        // creating a vote\r\n        var votingId int\r\n        votingId = @1VotingCreate(\"Name,Type,TypeParticipants,TypeDecision,Quorum,Rating,Volume,CountTypeVoters,Description,Interval\", \r\n            $v_name, $v_type, $v_type_participants, $v_type_decision, $v_quorum, $v_rating, $v_volume, $v_count_type_voters, $desc, $Duration)\r\n\r\n        // new optional parameters\r\n        var o_accept_params o_reject_params map\r\n        if Size($o_contract_accept) > 0 {\r\n            if Size($o_contract_accept_params) > 0 {\r\n                o_accept_params = JSONToMap($o_contract_accept_params)\r\n            }\r\n            o_accept_params[\"VotingId\"] = votingId\r\n            o_accept_params[\"TemplateId\"] = $TemplateId\r\n        }\r\n        if Size($o_contract_reject) > 0 {\r\n            if Size($o_contract_reject_params) > 0 {\r\n                o_reject_params = JSONToMap($o_contract_reject_params)\r\n            }\r\n            o_reject_params[\"VotingId\"] = votingId\r\n            o_reject_params[\"TemplateId\"] = $TemplateId\r\n        }\r\n\r\n        // setting the subject of the vote\r\n        if $v_type_decision == 1 || $v_type_decision == 2 {\r\n            @1VotingSubjectCandidates(\"VotingId,MemberAccount\", votingId, $account_id)\r\n            @1VotingSubjectSettings(\"VotingId,RoleId,Vacancies,OptContractAcceptName,OptContractAcceptParams,OptContractRejectName,OptContractRejectParams\", \r\n                votingId, $s_candidates, $s_vacancies, $o_contract_accept, JSONEncode(o_accept_params), $o_contract_reject, JSONEncode(o_reject_params))\r\n        }\r\n        if $v_type_decision == 3 {\r\n            @1VotingSubjectDocument(\"VotingId,TextDocument,OptContractAcceptName,OptContractAcceptParams,OptContractRejectName,OptContractRejectParams\", \r\n                votingId, $TextDocument, $o_contract_accept, JSONEncode(o_accept_params), $o_contract_reject, JSONEncode(o_reject_params))\r\n        }\r\n        if $v_type_decision == 4 {\r\n            var accept_params reject_params map\r\n            if Size($s_contract_accept) > 0 {\r\n                if Size($ContractAcceptParams) > 0 {\r\n                    accept_params = JSONToMap($ContractAcceptParams)\r\n                }\r\n                accept_params[\"VotingId\"] = votingId\r\n                accept_params[\"TemplateId\"] = $TemplateId\r\n            }\r\n            if Size($s_contract_reject) > 0 {\r\n                if Size($ContractRejectParams) > 0 {\r\n                    reject_params = JSONToMap($ContractRejectParams)\r\n                }\r\n                reject_params[\"VotingId\"] = votingId\r\n                reject_params[\"TemplateId\"] = $TemplateId\r\n            }\r\n            @1VotingSubjectContract(\"VotingId,ContractAcceptName,ContractAcceptParams,ContractRejectName,ContractRejectParams,OptContractAcceptName,OptContractAcceptParams,OptContractRejectName,OptContractRejectParams\",\r\n                votingId, $s_contract_accept, JSONEncode(accept_params), $s_contract_reject, JSONEncode(reject_params), $o_contract_accept, JSONEncode(o_accept_params), $o_contract_reject, JSONEncode(o_reject_params))\r\n        }\r\n\r\n        // setting the participants of the vote\r\n        if $v_type_participants == 1 {\r\n            // if the participants are \"all\", the invite has already occurred in \"@1VotingCreate\"\r\n        }\r\n        if $v_type_participants == 3 {\r\n            @1VotingInvite(\"VotingId,VarId\", votingId, $s_voters)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunEditEcosysParam",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunEditEcosysParam {\r\n    data {\r\n        Id int\r\n        Value string\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_ecosysparams\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        pars[\"Id\"] = $Id\r\n        pars[\"Value\"] = $Value    \r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunEditPlatformParam",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunEditPlatformParam {\r\n    data {\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_platformparams\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        pars[\"Name\"] = $Name\r\n        pars[\"Value\"] = $Value\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunNewCNConnection",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunNewCNConnection {\r\n    data {\r\n        RequestId int\r\n    }\r\n\r\n    func warn(name, detail string) {\r\n        warning Sprintf(LangRes(\"@1x_invalid\", \"en\") + \" (%v)\", name, detail)\r\n    }\r\n\r\n    func checkApiAddress(addr string) {\r\n        var name string\r\n        name = LangRes(\"@1api_address\", \"en\")\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n\r\n    func checkTcpAddress(addr string) {\r\n        var name string\r\n        name = LangRes(\"@1tcp_address\", \"en\")\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n        }\r\n    }\r\n\r\n    func checkPub(pub string) {\r\n        if PubToID(pub) == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    func getNodesJSON() string {\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 100 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n\r\n    func appendFirstNode(nodes array) array {\r\n        var first string firstNode map\r\n        first = AppParam($app_id, \"first_node\", 1)\r\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\r\n            warning LangRes(\"@1first_node_invalid\", \"en\")\r\n        }\r\n        firstNode = JSONDecode(first)\r\n        checkTcpAddress(firstNode[\"tcp_address\"])\r\n        checkApiAddress(firstNode[\"api_address\"])\r\n        checkPub(firstNode[\"public_key\"])\r\n        nodes = Append(nodes, firstNode)\r\n        return nodes\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_cn_connection\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n\r\n        $CNConnectionRequest = DBFind(\"@1cn_connection_requests\").Where({\"id\": $RequestId, \"deleted\": 0}).Row()\r\n        if !$CNConnectionRequest {\r\n            warning LangRes(\"@1request_not_found\", \"en\")\r\n        }\r\n\r\n        $TcpAddress = $CNConnectionRequest[\"tcp_address\"]\r\n        $ApiAddress = $CNConnectionRequest[\"api_address\"]\r\n        $PubKey = $CNConnectionRequest[\"pub_key\"]\r\n\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action {\r\n        var nodes array new_node map\r\n        new_node[\"tcp_address\"] = $TcpAddress\r\n        new_node[\"api_address\"] = $ApiAddress\r\n        new_node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        if Len(nodes) == 0 {\r\n            nodes = appendFirstNode(nodes)\r\n        }\r\n        nodes = Append(nodes, new_node)\r\n\r\n        @1DelegateRefresh()\r\n\r\n        var pars map\r\n        pars[\"Name\"] = \"full_nodes\"\r\n        pars[\"Value\"] = JSONEncode(nodes)\r\n        pars[\"flag\"] = \"add\"\r\n\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunRemoveCNConnection",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunRemoveCNConnection {\r\n    data {\r\n        Index int\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_cn_connection\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n\r\n        var nodesJson string\r\n        nodesJson = SysParamString(\"full_nodes\")\r\n\r\n        if Size(nodesJson) < 100 {\r\n            warning LangRes(\"@1invalid_full_nodes\", \"en\")\r\n        }\r\n\r\n        $nodes = JSONDecode(nodesJson)\r\n        if Len($nodes) <= 3 {\r\n            warning LangRes(\"@1removing_node_impossible\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var nodesNew array i int node map\r\n        while i < Len($nodes){\r\n            node = $nodes[i]\r\n            if i != $Index {\r\n                nodesNew = Append(nodesNew, node)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        var pars map\r\n        pars[\"Name\"] = \"full_nodes\"\r\n        pars[\"Value\"] = JSONEncode(nodesNew)\r\n        pars[\"flag\"] = \"remove\"\r\n\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunTokenRefund",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunTokenRefund {\r\n    data {\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount money\r\n        Note string\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $VictimAccount, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1victim_wallet_invalid\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $SuspectAccount, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1attacker_wallet_invalid\", \"en\")\r\n        }\r\n\r\n        if $Amount <= 0 {\r\n            warning LangRes(\"@1amount_invalid\", \"en\")\r\n        }\r\n        if Size($Note) == 0 {\r\n            warning LangRes(\"@1add_description\", \"en\")\r\n        }\r\n\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_tokenrefund\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        TokensLockoutMember(\"MemberAccount,Value\", $VictimAccount, 1)\r\n        TokensLockoutMember(\"MemberAccount,Value\", $SuspectAccount, 1)\r\n        \r\n        var pars m map\r\n        m[\"victim_account\"] = $VictimAccount\r\n        m[\"attacker_account\"] = $SuspectAccount\r\n        m[\"amount\"] = $Amount\r\n        m[\"note\"] = $Note\r\n        m[\"consortium_member_account\"] = $account_id\r\n        m[\"blocked_at\"] = $block_time\r\n        m[\"status\"] = 1\r\n        m[\"result\"] = 0\r\n        pars[\"RefundId\"] = DBInsert(\"tokens_refund\", m)\r\n\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams,ContractRejectParams\", $templateId, 14, JSONEncode(pars), JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplateCreate {\r\n    data {\r\n        VotingName string\r\n        TypeParticipants int\r\n        TypeDecision int\r\n        Quorum int\r\n        Rating string \"optional\"\r\n        Volume int \"optional\"\r\n        CountTypeVoters int \"optional\"\r\n\r\n        Voters string \"optional\"\r\n        Vacancies int \"optional\"\r\n        Candidates string \"optional\"\r\n\r\n        ContractAccept string \"optional\"\r\n        ParamsAccept string \"optional\"\r\n        ContractReject string \"optional\"\r\n        ParamsReject string \"optional\"\r\n\r\n        InitContract string \"optional\"\r\n        ParamsInit string \"optional\"\r\n        OptionalContractAccept string \"optional\"\r\n        OptionalParamsAccept string \"optional\"\r\n        OptionalContractReject string \"optional\"\r\n        OptionalParamsReject string \"optional\"\r\n    }\r\n\r\n\r\n    conditions {\r\n        // check default settings\r\n        if ($TypeDecision == 1 || $TypeDecision == 2) && $CountTypeVoters == 1 {\r\n            info LangRes(\"@1voting_type_not_suitable\", \"en\")\r\n        }\r\n        if $Quorum < 1 || $Quorum > 100 {\r\n            warning Sprintf(LangRes(\"@1quorum_range_must_be\", \"en\"), $Quorum)\r\n        }\r\n        if $CountTypeVoters == 0 && $TypeDecision != 1 && $TypeDecision != 2 {\r\n            if $Volume < 1 || $Volume > 100 {\r\n                warning Sprintf(LangRes(\"@1volume_range_must_be\", \"en\"), $Volume)\r\n            }\r\n        }\r\n        if $CountTypeVoters == 1 {\r\n            if $Quorum < 1 {\r\n                info LangRes(\"@1voters_number_less_one\", \"en\")\r\n            }\r\n            $Volume = 0\r\n        }\r\n\r\n        // if type of participant is a role -> check this role\r\n        if $TypeParticipants == 3 && Int($Voters) == 0 {\r\n            warning LangRes(\"@1voters_role_not_found\", \"en\")\r\n        }\r\n\r\n        // if voting for candidates -> check vacancies and candidates\r\n        if $TypeDecision == 1 || $TypeDecision == 2 {\r\n            if Int($Vacancies) < 1 {\r\n                warning LangRes(\"@1vacancies_number_wrong\", \"en\")\r\n            }\r\n            if Int($Candidates) == 0 {\r\n                warning LangRes(\"@1candidate_role_wrong\", \"en\")\r\n            }\r\n        }\r\n\r\n        // if voting for contract -> check the availability of the contract\r\n        if $TypeDecision == 4 {\r\n            if GetContractByName($ContractAccept) == 0 {\r\n                warning LangRes(\"@1accepted_contract_not_found\", \"en\")\r\n            }\r\n            if Size($ContractReject) > 0 {\r\n                if GetContractByName($ContractReject) == 0 {\r\n                    warning LangRes(\"@1rejected_contract_not_found\", \"en\")\r\n                }\r\n            }\r\n        }\r\n\r\n        // if initialization contract is set -> check the availability of the contract\r\n        if Size($InitContract) > 0 {\r\n            if GetContractByName($InitContract) == 0 {\r\n                warning LangRes(\"@1init_contract_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var template map\r\n\r\n        template[\"voting->name\"] = $VotingName\r\n        template[\"voting->type\"] = 1\r\n        template[\"voting->volume\"] = $Volume\r\n        template[\"voting->quorum\"] = $Quorum\r\n        if $Rating == \"true\" {\r\n            template[\"voting->rating\"] = 1\r\n        } else {\r\n            template[\"voting->rating\"] = 0\r\n        }\r\n        template[\"voting->count_type_voters\"] = $CountTypeVoters\r\n        template[\"voting->type_decision\"] = $TypeDecision\r\n        template[\"voting->type_participants\"] = $TypeParticipants\r\n\r\n        template[\"subject->candidates\"] = $Candidates\r\n        template[\"subject->vacancies\"] = $Vacancies\r\n        template[\"subject->voters\"] = $Voters\r\n        template[\"subject->contract_accept\"] = $ContractAccept\r\n        template[\"subject->contract_reject\"] = $ContractReject\r\n\r\n        template[\"optional->contract_accept\"] = $OptionalContractAccept\r\n        template[\"optional->contract_reject\"] = $OptionalContractReject\r\n        template[\"optional->init_contract\"] = $InitContract\r\n        template[\"optional->contract_accept_params\"] = $OptionalParamsAccept\r\n        template[\"optional->contract_reject_params\"] = $OptionalParamsReject\r\n        template[\"optional->init_contract_params\"] = $ParamsInit\r\n\r\n        template[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1voting_templates\", template)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunVes",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunVes {\r\n    data {\r\n        EcosystemId int\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_ves\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        pars[\"EcosystemId\"] = $EcosystemId\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionReject {\r\n    data {\r\n        VotingId int\r\n        RoleId int\r\n    }\r\n\r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->role_id\": $RoleId, \"page_params->voting_id\": $VotingId, \"closed\": 0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"NotificId\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->account\": $account_id, \"page_params->voting_id\": $VotingId, \"closed\": 0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"NotificId\", id)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $VotingId}).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3 {\r\n            if $voting[\"voting.role_id\"] != $RoleId{\r\n                warning LangRes(\"@1voting_role_incorrect\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED || $block_time > Int($voting[\"date_ended\"]) {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Columns(\"id,number_accept,results->rating_accepted,results->rating_rejected\").Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($voting[\"voting.type_participants\"]) != 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": $account_id, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId, \"member->account\": 0, \"member->role_id\": $RoleId, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if !$participant {\r\n            warning LangRes(\"@1voting_not_participant\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->account\": $account_id, \"role->id\": $RoleId, \"deleted\": 0}).One(\"id\") {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            } else {\r\n                var member map\r\n                member[\"account\"] = $account_id\r\n                member[\"member_name\"] = $account_id\r\n                member[\"role_id\"] = $RoleId\r\n                var member_json string\r\n                member_json = JSONEncode(member)\r\n                DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), {\"member\": member_json})\r\n            }\r\n        }\r\n\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var m map\r\n            m[\"decision_date\"] = $block_time\r\n            m[\"decision\"] = -1\r\n            DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), m)\r\n\r\n            var p map\r\n            var rating_accepted rating_rejected summ_rating int\r\n            rating_accepted = Int($subject[\"results.rating_accepted\"])\r\n            rating_rejected = Int($subject[\"results.rating_rejected\"]) + Int($participant[\"rating\"])\r\n            summ_rating = rating_accepted + rating_rejected\r\n            var percent_accepted percent_rejected int\r\n            percent_accepted = (Float(rating_accepted)*Float(100))/Float(summ_rating)\r\n            percent_rejected = (Float(rating_rejected)*Float(100))/Float(summ_rating)\r\n            p[\"results->rating_accepted\"] = rating_accepted\r\n            p[\"results->rating_rejected\"] = rating_rejected\r\n            p[\"results->percent_accepted\"] = percent_accepted\r\n            p[\"results->percent_rejected\"] = percent_rejected\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), p)\r\n\r\n            @1VotingUpdate(\"VotingId\", $VotingId)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingVesAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingVesAccept {\r\n    data {\r\n        EcosystemId int\r\n        TemplateId string\r\n        VotingId string\r\n    }\r\n\r\n    conditions {\r\n        var prev string\r\n        prev = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        if prev != \"@1VotingDecisionCheck\" {\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        var appId tId int\r\n        appId = Int(DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        tId = Int(AppParam(appId, \"voting_template_ves\", 1))\r\n        if !DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id, \"id\": tId}).One(\"id\") {\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n        if $TemplateId != tId {\r\n            warning LangRes(\"@1template_incorrect\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1ecosystems\", Int($EcosystemId), {\"is_valued\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingWizardBuffer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingWizardBuffer {\r\n    data {\r\n        LoadAutosave string \"optional\"\r\n        Name string \"optional\"\r\n        Type int \"optional\"\r\n        TypeParticipants int \"optional\"\r\n        TypeDecision int \"optional\"\r\n        Volume int \"optional\"\r\n        Quorum int \"optional\"\r\n        Rating string \"optional\"\r\n        CountTypeVoters string \"optional\"\r\n        Description string \"optional\"\r\n        Interval string \"optional\"\r\n        StartDate string \"optional\"\r\n        StartTime string \"optional\"\r\n        EndDate string \"optional\"\r\n        EndTime string \"optional\"\r\n        MemberParticipants string \"optional\"\r\n        RoleParticipants string \"optional\"\r\n        GroupParticipants string \"optional\"\r\n        ExecuteContract string \"optional\"\r\n        ContractAcceptName string \"optional\"\r\n        ContractAcceptParams string \"optional\"\r\n        ContractRejectName string \"optional\"\r\n        ContractRejectParams string \"optional\"\r\n        TextDocument string \"optional\"\r\n        Candidates string \"optional\"\r\n        Apply string \"optional\"\r\n        RoleId string \"optional\"\r\n        Vacancies string \"optional\"\r\n    }\r\n\r\n    action {\r\n        if $LoadAutosave == \"no\" {\r\n            DBUpdateExt(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"account\": $account_id, \"ecosystem\": $ecosystem_id}, {\"value\": \"{}\"})\r\n        }\r\n\r\n        var buffer_map old_buffer old_value map\r\n\r\n        old_buffer = DBFind(\"@1buffer_data\").Where({\"key\": \"voting_wizard_buffer\", \"account\": $account_id, \"ecosystem\": $ecosystem_id}).Row()\r\n        if old_buffer {\r\n            old_value = JSONDecode(old_buffer[\"value\"])\r\n        }\r\n\r\n        buffer_map[\"save_time\"] = $block_time\r\n\r\n        if $Name {\r\n            buffer_map[\"voting_name\"] = $Name\r\n        } elif old_value[\"voting_name\"] {\r\n            buffer_map[\"voting_name\"] = old_value[\"voting_name\"]\r\n        }\r\n        if $Type != 0 {\r\n            buffer_map[\"voting_type\"] = $Type\r\n        } elif old_value[\"voting_type\"] {\r\n            buffer_map[\"voting_type\"] = old_value[\"voting_type\"]\r\n        }\r\n        if $TypeParticipants != 0 {\r\n            buffer_map[\"type_participants\"] = $TypeParticipants\r\n        } elif old_value[\"type_participants\"] {\r\n            buffer_map[\"type_participants\"] = old_value[\"type_participants\"]\r\n        }\r\n        if $TypeDecision != 0 {\r\n            buffer_map[\"type_decision\"] = $TypeDecision\r\n        } elif old_value[\"type_decision\"] {\r\n            buffer_map[\"type_decision\"] = old_value[\"type_decision\"]\r\n        }\r\n        if $Volume != 0 {\r\n            buffer_map[\"volume\"] = $Volume\r\n        } elif old_value[\"volume\"] {\r\n            buffer_map[\"volume\"] = old_value[\"volume\"]\r\n        }\r\n        if $Quorum != 0 {\r\n            buffer_map[\"quorum\"] = $Quorum\r\n        } elif old_value[\"quorum\"] {\r\n            buffer_map[\"quorum\"] = old_value[\"quorum\"]\r\n        }\r\n        if $Rating {\r\n            buffer_map[\"rating\"] = $Rating\r\n        } elif old_value[\"rating\"] {\r\n            buffer_map[\"rating\"] = old_value[\"rating\"]\r\n        }\r\n        if $CountTypeVoters {\r\n            buffer_map[\"count_type_voters\"] = $CountTypeVoters\r\n        } elif old_value[\"count_type_voters\"] {\r\n            buffer_map[\"count_type_voters\"] = old_value[\"count_type_voters\"]\r\n        }\r\n        if $Description {\r\n            buffer_map[\"description\"] = $Description\r\n        } elif old_value[\"description\"] {\r\n            buffer_map[\"description\"] = old_value[\"description\"]\r\n        }\r\n        if $Interval {\r\n            buffer_map[\"interval\"] = $Interval\r\n        } elif old_value[\"interval\"] {\r\n            buffer_map[\"interval\"] = old_value[\"interval\"]\r\n        }\r\n        if $StartDate {\r\n            buffer_map[\"start_date\"] = $StartDate\r\n        } elif old_value[\"start_date\"] {\r\n            buffer_map[\"start_date\"] = old_value[\"start_date\"]\r\n        }\r\n        if $StartTime {\r\n            buffer_map[\"start_time\"] = $StartTime\r\n        } elif old_value[\"start_time\"] {\r\n            buffer_map[\"start_time\"] = old_value[\"start_time\"]\r\n        }\r\n        if $EndDate {\r\n            buffer_map[\"end_date\"] = $EndDate\r\n        } elif old_value[\"end_date\"] {\r\n            buffer_map[\"end_date\"] = old_value[\"end_date\"]\r\n        }\r\n        if $EndTime {\r\n            buffer_map[\"end_time\"] = $EndTime\r\n        } elif old_value[\"end_time\"] {\r\n            buffer_map[\"end_time\"] = old_value[\"end_time\"]\r\n        }\r\n        if $MemberParticipants {\r\n            buffer_map[\"member_participants\"] = $MemberParticipants\r\n        } elif old_value[\"member_participants\"] {\r\n            buffer_map[\"member_participants\"] = old_value[\"member_participants\"]\r\n        }\r\n        if $RoleParticipants {\r\n            buffer_map[\"role_participants\"] = $RoleParticipants\r\n        } elif old_value[\"role_participants\"] {\r\n            buffer_map[\"role_participants\"] = old_value[\"role_participants\"]\r\n        }\r\n        if $GroupParticipants {\r\n            buffer_map[\"group_participants\"] = $GroupParticipants\r\n        } elif old_value[\"group_participants\"] {\r\n            buffer_map[\"group_participants\"] = old_value[\"group_participants\"]\r\n        }\r\n        if $ExecuteContract {\r\n            buffer_map [\"execute_contract\"] = $ExecuteContract\r\n        } elif old_value[\"execute_contract\"] {\r\n            buffer_map[\"execute_contract\"] = old_value[\"execute_contract\"]\r\n        }\r\n        if $ContractAcceptName {\r\n            buffer_map [\"contract_accept_name\"] = $ContractAcceptName\r\n        } elif old_value[\"contract_accept_name\"] {\r\n            buffer_map[\"contract_accept_name\"] = old_value[\"contract_accept_name\"]\r\n        }\r\n        if $ContractAcceptParams {\r\n            buffer_map[\"contract_accept_params\"] = $ContractAcceptParams\r\n        } elif old_value[\"contract_accept_params\"] {\r\n            buffer_map[\"contract_accept_params\"] = old_value[\"contract_accept_params\"]\r\n        }\r\n        if $ContractRejectName {\r\n            buffer_map[\"contract_reject_name\"] = $ContractRejectName\r\n        } elif old_value[\"contract_reject_name\"] {\r\n            buffer_map[\"contract_reject_name\"] = old_value[\"contract_reject_name\"]\r\n        }\r\n        if $ContractRejectParams {\r\n            buffer_map[\"contract_reject_params\"] = $ContractRejectParams\r\n        } elif old_value[\"contract_reject_params\"] {\r\n            buffer_map[\"contract_reject_params\"] = old_value[\"contract_reject_params\"]\r\n        }\r\n        if $TextDocument {\r\n            buffer_map[\"text_document\"] = $TextDocument\r\n        } elif old_value[\"text_document\"] {\r\n            buffer_map[\"text_document\"] = old_value[\"text_document\"]\r\n        }\r\n        if $Candidates {\r\n            buffer_map[\"candidates\"] = $Candidates\r\n        } elif old_value[\"candidates\"] {\r\n            buffer_map[\"candidates\"] = old_value[\"candidates\"]\r\n        }\r\n        if $Apply {\r\n            buffer_map[\"apply\"] = $Apply\r\n        } elif old_value[\"apply\"] {\r\n            buffer_map[\"apply\"] = old_value[\"apply\"]\r\n        }\r\n        if $RoleId {\r\n            buffer_map[\"role_id\"] = $RoleId\r\n        } elif old_value[\"role_id\"] {\r\n            buffer_map[\"role_id\"] = old_value[\"role_id\"]\r\n        }\r\n        if $Vacancies {\r\n            buffer_map[\"vacancies\"] = $Vacancies\r\n        } elif old_value[\"vacancies\"] {\r\n            buffer_map[\"vacancies\"] = old_value[\"vacancies\"]\r\n        }\r\n\r\n        if old_buffer {\r\n            DBUpdateExt(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"account\": $account_id, \"ecosystem\": $ecosystem_id}, {\"value\": buffer_map})\r\n        } else {\r\n            DBInsert(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"account\": $account_id, \"ecosystem\": $ecosystem_id, \"value\": buffer_map})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingWizardCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingWizardCreate {\r\n    data {\r\n        Name string\r\n        Type int\r\n        TypeParticipants int\r\n        TypeDecision int\r\n        Volume int \"optional\"\r\n        Quorum int\r\n        Rating string \"optional\"\r\n        CountTypeVoters string \"optional\"\r\n        Description string \"optional\"\r\n        Interval string \"optional\"\r\n        StartDate string \"optional\"\r\n        StartTime string \"optional\"\r\n        EndDate string \"optional\"\r\n        EndTime string \"optional\"\r\n        MemberParticipants string \"optional\"\r\n        RoleParticipants string \"optional\"\r\n        GroupParticipants string \"optional\"\r\n        ExecuteContract string \"optional\"\r\n        ContractAcceptName string \"optional\"\r\n        ContractAcceptParams string \"optional\"\r\n        ContractRejectName string \"optional\"\r\n        ContractRejectParams string \"optional\"\r\n        TextDocument string \"optional\"\r\n        Candidates string \"optional\"\r\n        Apply string \"optional\"\r\n        RoleId string \"optional\"\r\n        Vacancies string \"optional\"\r\n    }\r\n\r\n    func sendInvites(voting int, participants string, type string) {\r\n        var participants_list array i current_participant int m map\r\n        participants_list = Split(participants, \",\")\r\n        i = 0\r\n        while i < Len(participants_list) {\r\n            current_participant = Int(participants_list[i])\r\n            var participants_count int\r\n            if type == \"role\" {\r\n                participants_count = Len(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": current_participant, \"deleted\": 0}))\r\n            } elif type == \"group\" {\r\n                participants_count = Len(DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": current_participant, \"deleted\": 0}))\r\n            }\r\n            \r\n            if type == \"member\" || participants_count != 0  {\r\n                m[\"VotingId\"] = voting\r\n                m[\"VarId\"] = current_participant\r\n                CallContract(\"@1VotingInvite\", m)\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var create_map subject_map invite_map m map voting_id i int\r\n\r\n        create_map[\"Name\"] = $Name\r\n        create_map[\"Type\"] = $Type\r\n        create_map[\"TypeParticipants\"] = $TypeParticipants\r\n        create_map[\"TypeDecision\"] = $TypeDecision\r\n        create_map[\"Volume\"] = $Volume\r\n        create_map[\"Quorum\"] = $Quorum\r\n        create_map[\"Rating\"] = $Rating\r\n        create_map[\"CountTypeVoters\"] = $CountTypeVoters\r\n        create_map[\"Description\"] = $Description\r\n        create_map[\"StartDate\"] = $StartDate\r\n        create_map[\"StartTime\"] = $StartTime\r\n        create_map[\"EndDate\"] = $EndDate\r\n        create_map[\"EndTime\"] = $EndTime\r\n\r\n        voting_id = CallContract(\"@1VotingCreate\", create_map)\r\n\r\n        subject_map[\"VotingId\"] = voting_id\r\n\r\n        if $TypeDecision == 4 {\r\n            subject_map[\"ContractAcceptName\"] = $ContractAcceptName\r\n            subject_map[\"ContractAcceptParams\"] = $ContractAcceptParams\r\n            subject_map[\"ContractRejectName\"] = $ContractRejectName\r\n            subject_map[\"ContractRejectParams\"] = $ContractRejectParams\r\n        } elif $ExecuteContract == \"yes\" {\r\n            subject_map[\"OptContractAcceptName\"] = $ContractAcceptName\r\n            subject_map[\"OptContractAcceptParams\"] = $ContractAcceptParams\r\n            subject_map[\"OptContractRejectName\"] = $ContractRejectName\r\n            subject_map[\"OptContractRejectParams\"] = $ContractRejectParams\r\n        }\r\n\r\n        if $TypeDecision == 1 && $Apply == 1 {\r\n            m[\"VotingId\"] = voting_id\r\n            m[\"MemberAccount\"] = 0\r\n            CallContract(\"@1VotingSubjectCandidates\", m)\r\n            subject_map[\"RoleId\"] = Int($RoleId)\r\n            subject_map[\"Vacancies\"] = Int($Vacancies)\r\n            CallContract(\"@1VotingSubjectSettings\", subject_map)\r\n        } elif $TypeDecision == 2 && Str($Candidates) != \"0\" {\r\n            var candidates_list array\r\n            candidates_list = Split($Candidates, \",\")\r\n            i = 0\r\n            while i < Len(candidates_list) {\r\n                m[\"VotingId\"] = voting_id\r\n                m[\"MemberAccount\"] = candidates_list[i]\r\n                CallContract(\"@1VotingSubjectCandidates\", m)\r\n                i = i + 1\r\n            }\r\n            subject_map[\"RoleId\"] = Int($RoleId)\r\n            subject_map[\"Vacancies\"] = Int($Vacancies)\r\n            CallContract(\"@1VotingSubjectSettings\", subject_map)\r\n        } elif $TypeDecision == 3 {\r\n            subject_map[\"TextDocument\"] = $TextDocument\r\n            CallContract(\"@1VotingSubjectDocument\", subject_map)\r\n        } elif $TypeDecision == 4 {\r\n            CallContract(\"@1VotingSubjectContract\", subject_map)\r\n        }\r\n\r\n        if Str($MemberParticipants) != \"0\" && $TypeParticipants != 1 {\r\n            sendInvites(voting_id, $MemberParticipants, \"member\")\r\n        } elif Str($RoleParticipants) != \"0\" {\r\n            sendInvites(voting_id, $RoleParticipants, \"role\")\r\n        } elif Str($GroupParticipants) != \"0\" {\r\n            sendInvites(voting_id, $GroupParticipants, \"group\")\r\n        }\r\n        DBUpdateExt(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"account\": $account_id, \"ecosystem\": $ecosystem_id}, {\"value\": \"{}\"})\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}